<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.ComplexEventProcessing</name>
  </assembly>
  <members>
    <member name="T:Microsoft.ComplexEventProcessing.AdapterAdvanceTimeSettings">
      <summary>Adapter factories can use this class to instruct the engine on how to automatically advance application time for their adapters.</summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.AdapterAdvanceTimeSettings.#ctor(Microsoft.ComplexEventProcessing.AdvanceTimeGenerationSettings,Microsoft.ComplexEventProcessing.AdvanceTimePolicy)">
      <summary>Initializes a new instance of the AdapterAdvanceTimeSettings class.</summary>
      <param name="generationSettings">Defines how and when the engine should advance application time.</param>
      <param name="policy">Defines the policy that determines how the engine should deal with events that violate the current application time.</param>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.AdapterAdvanceTimeSettings.AdvanceTimeGenerationSettings">
      <summary>Gets the settings that define how and when the engine should advance application time for adapters from this factory.</summary>
      <returns>The settings that define how and when the engine should advance application time for adapters from this factory.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.AdapterAdvanceTimeSettings.AdvanceTimePolicy">
      <summary>Gets the policy the determines how violations of current application time should be dealt with.</summary>
      <returns>The policy that determines how violations of current application time should be dealt with.</returns>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.AdvanceTimeFrequencyType">
      <summary>Defines when the engine advances application time.</summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.AdvanceTimeFrequencyType.EventCount">
      <summary>The engine advances time based on the number of events that have been received from the data source.</summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.AdvanceTimeFrequencyType.Duration">
      <summary>The engine advances time based on the application time of the events that have been received from the data source.</summary>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.AdvanceTimeGenerationSettings">
      <summary>Defines how and when the engine should advance application time by inserting a Current Time Increment (CTI) event.</summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.AdvanceTimeGenerationSettings.#ctor(System.TimeSpan,System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ComplexEventProcessing.AdvanceTimeGenerationSettings" /> class with the specified frequency and delay settings.</summary>
      <param name="duration">Defines the application time span that must elapse since the last Current Time Increment (CTI) in terms of input event timestamps before the engine advances time again by generating a CTI event.</param>
      <param name="delay">Defines the timestamp of the generated CTIs as a delay of time T with respect to the last received event. Smaller values reduce latency. Larger values increase the window in which out-of-order events can be received.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.AdvanceTimeGenerationSettings.#ctor(System.TimeSpan,System.TimeSpan,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ComplexEventProcessing.AdvanceTimeGenerationSettings" /> class with the specified frequency, delay and advance to infinity setting .</summary>
      <param name="duration">Defines the application time span that must elapse since the last Current Time Increment (CTI) in terms of input event timestamps before the engine advances time again by generating a new CTI event.</param>
      <param name="delay">Defines the timestamp of the generated CTIs as a delay of time T with respect to the last received event. A positive value implements a grace period to allow for out-of-order events. Smaller values reduce latency. Larger values increase the window in which out-of-order events can be received.</param>
      <param name="advanceToInfinityOnShutdown">Controls whether a final CTI with a time stamp of positive infinity should be inserted when the query is shut down. This is used to flush all remaining events from the query's operators.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.AdvanceTimeGenerationSettings.#ctor(System.UInt32,System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ComplexEventProcessing.AdvanceTimeGenerationSettings" /> class with specified frequency and delay.</summary>
      <param name="eventCount">Defines the number of events that must be received from the event source before the engine advances time again by generating a Current Time Increment (CTI) event.</param>
      <param name="delay">Defines the timestamp of the generated CTIs as a delay of time T with respect to the last received event. Smaller values reduce latency. Larger values increase the window in which out-of-order events can be received.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.AdvanceTimeGenerationSettings.#ctor(System.UInt32,System.TimeSpan,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ComplexEventProcessing.AdvanceTimeGenerationSettings" /> class with specified frequency, delay and advance to infinity settings.</summary>
      <param name="eventCount">Defines the number of events that must be received from the event source before the engine advances time again by generating a Current Time Increment (CTI) event.</param>
      <param name="delay">Defines the timestamp of the generated CTIs as a delay of time T with respect to the last received event. Smaller values reduce latency. Larger values increase the window in which out-of-order events can be received.</param>
      <param name="advanceToInfinityOnShutdown">Controls whether a final CTI with a time stamp of positive infinity should be inserted when the query is shut down. This is used to flush all remaining events from the query's operators.</param>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.AdvanceTimeGenerationSettings.AdvanceTimeFrequencyType">
      <summary>Gets the policy that determines when the engine advances application time by generating a Current Time Increment (CTI) event.</summary>
      <returns>The policy that determines when the engine advances application time.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.AdvanceTimeGenerationSettings.AdvanceToInfinityOnShutdown">
      <summary>Gets a value that determines whether a final CTI with a time stamp of positive infinity should be inserted when the query is shut down. This is used to flush all remaining events from the query's operators. The default value is false.</summary>
      <returns>true if the final CTI with a time stamp of positive infinity should be inserted when the query is shut down; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.AdvanceTimeGenerationSettings.Delay">
      <summary>Gets the time span that defines the timestamp of the generated CTIs as a delay of time T with respect to the last received event. A positive value implements a grace period to allow for out of order events. Smaller values reduce latency. </summary>
      <returns>The time span that defines the timestamp of the generated CTI.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.AdvanceTimeGenerationSettings.Duration">
      <summary>Gets the application time span that must elapse since the last Current Time Increment (CTI) in terms of input event timestamps before the engine advances time again by generating a new CTI event.</summary>
      <returns>The duration that defines how much application time needs to progress in the input before the engine advances time again.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.AdvanceTimeGenerationSettings.EventCount">
      <summary>Gets the event count that defines the number of events that must be received from the event source before the engine advances time again by generating a Current Time Increment (CTI) event.</summary>
      <returns>The event count that defines the number of events that must be received from the event source before the engine advances time again.</returns>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.AdvanceTimeImportSettings">
      <summary>Defines another input stream as the source of application current time increments (CTIs) events during query binding. This feature enables the synchronization of two streams.</summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.AdvanceTimeImportSettings.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ComplexEventProcessing.AdvanceTimeImportSettings" /> class.</summary>
      <param name="streamName">Name of the stream that advances application time by importing the CTI events from that stream to the query.</param>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.AdvanceTimeImportSettings.StreamName">
      <summary>Gets the name of the stream that advances application time by importing the CTI events from that stream to the query.</summary>
      <returns>The name of the stream that advances application time.</returns>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.AdvanceTimePolicy">
      <summary>Defines the different policies for how the engine can handle input events that would violate the current application time.</summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.AdvanceTimePolicy.Adjust">
      <summary>The start time of incoming events is adjusted to the current application time if the event starts before the current application time and end after the current application time.</summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.AdvanceTimePolicy.Drop">
      <summary>Incoming events are dropped from the input if they start before the current application time.</summary>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.AdvanceTimeSettings">
      <summary>The settings that instruct the engine on how to advance application time for an input stream.</summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.AdvanceTimeSettings.#ctor(Microsoft.ComplexEventProcessing.AdvanceTimeGenerationSettings,Microsoft.ComplexEventProcessing.AdvanceTimeImportSettings,Microsoft.ComplexEventProcessing.AdvanceTimePolicy)">
      <summary>Initializes a new instance of the AdvanceTimeSettings class which specifies whether application time is advanced based on its own input, from another input, or both.</summary>
      <param name="generationSettings">Defines how and when the engine should advance application time. If null, the engine does not automatically advance application time.</param>
      <param name="importSettings">Defines other input streams as sources of application time. If null, application time is not imported from another source.</param>
      <param name="policy">Defines the policy for how the engine should deal with events that violate the current application time.</param>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.AdvanceTimeSettings.AdvanceTimeGenerationSettings">
      <summary>Gets the settings that define how and when the engine should advance application time.</summary>
      <returns>The settings that define how and when the engine should advance application time.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.AdvanceTimeSettings.AdvanceTimeImportSettings">
      <summary>Gets the settings that define other input streams as sources of application time.</summary>
      <returns>The settings that define other input streams as sources of application time.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.AdvanceTimeSettings.AdvanceTimePolicy">
      <summary>Gets the policy how violations of current application time should be dealt with.</summary>
      <returns>The policy that determines how violations of current application time should be dealt with.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.AdvanceTimeSettings.AdvanceTimeSourceType">
      <summary>Gets the settings that define what other input streams can advance application time for this stream.</summary>
      <returns>The settings that define what other input streams can advance application time for this stream.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.AdvanceTimeSettings.IncreasingStartTime">
      <summary>Gets <see cref="T:Microsoft.ComplexEventProcessing.AdvanceTimeSettings" /> that cause a CTI to be inserted after every event with a delay of zero.</summary>
      <returns>Returns <see cref="T:Microsoft.ComplexEventProcessing.AdvanceTimeSettings" />.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.AdvanceTimeSettings.StrictlyIncreasingStartTime">
      <summary>Gets <see cref="T:Microsoft.ComplexEventProcessing.AdvanceTimeSettings" /> that cause a CTI to be inserted after every event with a timestamp that is one tick later than the timestamp of the event.</summary>
      <returns>Returns <see cref="T:Microsoft.ComplexEventProcessing.AdvanceTimeSettings" />.</returns>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.AdvanceTimeSettings.UnorderedStartTime(System.TimeSpan)">
      <summary>Gets <see cref="T:Microsoft.ComplexEventProcessing.AdvanceTimeSettings" /> that cause a CTI to be inserted after every event with a user-specified delay.</summary>
      <returns>Returns <see cref="T:Microsoft.ComplexEventProcessing.AdvanceTimeSettings" />.</returns>
      <param name="consistencyDelay">Defines the timestamp of the generated CTIs as a delay of time T with respect to the last received event. A positive value implements a grace period to allow for out of order events. Smaller values reduce latency.</param>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.AdvanceTimeSourceType">
      <summary>Defines the options for how application time can be advanced on an input stream.</summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.AdvanceTimeSourceType.Generate">
      <summary>Time is advanced only based on the events received in the input stream.</summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.AdvanceTimeSourceType.Import">
      <summary>Time is advanced by importing application time from another input stream.</summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.AdvanceTimeSourceType.GenerateAndImport">
      <summary>Time is advanced by both events received in the input stream and by importing application time from another input stream. </summary>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Application">
      <summary> Represents an application on a CEP server. Applications serve as containers for further CEP metadata objects. </summary>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.Application.CheckpointableProcesses">
      <summary> Gets all checkpointable processes registered in the application.</summary>
      <returns>All checkpointable processes registered in the application.</returns>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Application.CreateInputAdapter``1(System.String,System.String)">
      <summary>Creates a CEP input adapter object based on an adapter factory class.</summary>
      <returns>The new input adapter object.</returns>
      <param name="name">The name for the input adapter object in metadata.</param>
      <param name="description">The description for the input adapter object in metadata.</param>
      <typeparam name="TInputAdapterFactory">The input adapter factory class that instantiates the adapter.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Application.CreateOutputAdapter``1(System.String,System.String)">
      <summary>Creates a CEP output adapter object based on an adapter factory class.</summary>
      <returns>The new output adapter object.</returns>
      <param name="name">The name for the output adapter object in metadata.</param>
      <param name="description">The description for the output adapter object in metadata.</param>
      <typeparam name="TOutputAdapterFactory">The output adapter factory class that instantiates the adapter.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Application.CreateQuery(System.String,System.String,Microsoft.ComplexEventProcessing.QueryBinder)">
      <summary>Creates a query from a query binder.</summary>
      <returns>The new query object being generated.</returns>
      <param name="name">Name for the query object in metadata.</param>
      <param name="description">Description for the query in metadata.</param>
      <param name="queryBinder">Binder object that contains the input and output binding information for the query.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Application.CreateQuery(System.String,System.String,Microsoft.ComplexEventProcessing.QueryBinder,System.Boolean)">
      <summary>Creates a query from a query binder and specifies whether the query is resilient.</summary>
      <returns>The new query object.</returns>
      <param name="name">Name for the query object in metadata.</param>
      <param name="description">Description for the query in metadata.</param>
      <param name="queryBinder">Binder object that contains the input and output binding information for the query.</param>
      <param name="isResilient">true if the query is resilient; otherwise, false.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Application.CreateQueryTemplate``1(System.String,System.String,Microsoft.ComplexEventProcessing.Linq.CepStream{``0})">
      <summary>Creates a new query template from a LINQ expression.</summary>
      <returns>New query template object being created.</returns>
      <param name="queryTemplateName">Name for the query template in metadata.</param>
      <param name="description">Description of the query template.</param>
      <param name="streamDefinition">Query template definition.</param>
      <typeparam name="T">The type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Application.CreateQueryTemplate(System.Xml.XmlReader)">
      <summary>Creates a new query template from its XML representation.</summary>
      <returns>The new query template object being created.</returns>
      <param name="queryTextReader">The XML query template definition.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Application.Delete">
      <summary>Deletes the application object from metadata.</summary>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.Application.Entities">
      <summary> Gets all entities registered in the application (sources, sinks, subjects and processes).</summary>
      <returns>All entities registered in the application.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.Application.EventTypes">
      <summary>Gets the collection of event types defined in the application.</summary>
      <returns>The collection of event types defined in the application.</returns>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Application.GetPublishedStreamInputAdapter">
      <summary>Gets the built-in published stream input adapter that can be used for dynamic query composition.</summary>
      <returns>The published stream input adapter.</returns>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Application.GetPublishedStreamOutputAdapter">
      <summary>Gets the built-in published stream output adapter that can be used for dynamic query composition.</summary>
      <returns>The published stream output adapter.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.Application.InputAdapters">
      <summary>Gets the collection of input adapters defined in the application.</summary>
      <returns>The collection of input adapter objects that are defined in the application.</returns>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Application.Microsoft#ComplexEventProcessing#Linq#IRemoteProvider#CreateBinding(System.Linq.Expressions.Expression)">
      <summary>Creates a remote binding between a data generator and a data consumer.</summary>
      <returns>The proxy for remote binding.</returns>
      <param name="expression">The binding definition.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Application.Microsoft#ComplexEventProcessing#Linq#IRemoteProvider#CreateEnumerable``1(System.Linq.Expressions.Expression)">
      <summary>Creates a remote enumerable sequence using the given definition.</summary>
      <returns>The proxy for remote enumerable.</returns>
      <param name="expression">The enumerable definition.</param>
      <typeparam name="TElement">The enumerable element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Application.Microsoft#ComplexEventProcessing#Linq#IRemoteProvider#CreateObservable``1(System.Linq.Expressions.Expression)">
      <summary>Creates a remote observable sequence using the given definition.</summary>
      <returns>The proxy for remote observable.</returns>
      <param name="expression">The observable definition.</param>
      <typeparam name="TResult">The observable element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Application.Microsoft#ComplexEventProcessing#Linq#IRemoteProvider#CreateObserver``1(System.Linq.Expressions.Expression)">
      <summary>Creates a remote observer using the given definition.</summary>
      <returns>The proxy for remote observer.</returns>
      <param name="expression">The observer definition.</param>
      <typeparam name="TElement">The observer element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Application.Microsoft#ComplexEventProcessing#Linq#IRemoteProvider#CreateStreamable``1(System.Linq.Expressions.Expression)">
      <summary>Creates a remote temporal stream using the given definition.</summary>
      <returns>The proxy for remote temporal stream.</returns>
      <param name="expression">The temporal stream definition.</param>
      <typeparam name="T">The stream payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Application.Microsoft#ComplexEventProcessing#Linq#IRemoteProvider#CreateStreamableBinding(System.Linq.Expressions.Expression)">
      <summary>Creates a remote binding between a streamable data generator and data consumer.</summary>
      <returns>The proxy for remote streamable binding.</returns>
      <param name="expression">The binding definition.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Application.Microsoft#ComplexEventProcessing#Linq#IRemoteProvider#CreateStreamableSink``1(System.Linq.Expressions.Expression)">
      <summary>Creates a remote temporal stream sink using the given definition.</summary>
      <returns>The proxy for remote temporal stream sink.</returns>
      <param name="expression">The sink definition.</param>
      <typeparam name="TPayload">The stream payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Application.Microsoft#ComplexEventProcessing#Linq#IRemoteProvider#CreateSubjectReference``2(System.String)">
      <summary>Creates a remote subject using the given definition.</summary>
      <returns>The proxy for remote subject.</returns>
      <param name="id">The definition identifier.</param>
      <typeparam name="TSource">The subject input element type.</typeparam>
      <typeparam name="TResult">The subject output element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Application.Microsoft#ComplexEventProcessing#Linq#IRemoteProvider#Deploy(System.Linq.Expressions.Expression,System.String)">
      <summary>Deploys the specified definition.</summary>
      <param name="expression">The definition to be deployed.</param>
      <param name="id">The definition identifier.</param>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.Application.OutputAdapters">
      <summary>Gets the collection of output adapters defined in the application.</summary>
      <returns>The collection of output adapter objects defined in the application.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.Application.Processes">
      <summary> Gets all processes registered in the application.</summary>
      <returns>All processes registered in the application.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.Application.Queries">
      <summary>Gets the collection of queries that are defined in this application.</summary>
      <returns>The collection of query objects that are defined in the application.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.Application.QueryTemplates">
      <summary>Gets the collection of query templates that are defined in this application.</summary>
      <returns>The collection of query template objects that are defined in the application.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.Application.Server">
      <summary>Gets a reference to the server in which the application resides.</summary>
      <returns>The server object that is hosting the application.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.Application.Sinks">
      <summary> Gets all sinks registered in the application.</summary>
      <returns>All sinks registered in the application.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.Application.Sources">
      <summary> Gets all sources registered in the application.</summary>
      <returns>All sources registered in the application.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.Application.Subjects">
      <summary> Gets all subjects registered in the application.</summary>
      <returns>All subjects registered in the application.</returns>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.ApplicationObject">
      <summary>Base class for all objects that are contained in an application.</summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.ApplicationObject.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ComplexEventProcessing.ApplicationObject" /> class. </summary>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.ApplicationObject.Application">
      <summary>Gets the hosting application.</summary>
      <returns>The hosting application object.</returns>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.ApplicationObject.Delete">
      <summary>Deletes the object.</summary>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.CepCheckpointableProcess">
      <summary>Specifies a metadata object representing a running checkpointable computation.</summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.CepCheckpointableProcess.CheckpointAsync">
      <summary>Asynchronously checkpoint and returns the associated task.</summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.CepCheckpointableProcess.CheckpointAsync(System.Threading.CancellationToken)">
      <summary>Asynchronously checkpoint and returns the associated task. The passed cancellationToken is associated with the created task.</summary>
      <param name="cancellationToken">The cancellationToken to be associated with the created task.</param>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.CepEntity">
      <summary> Metadata object that is the base for sources, sinks, subjects, and processes. </summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.CepEntity.GetTypeDefinition">
      <summary> Exposes the type of the expression that defines the entity. </summary>
      <returns>The type of the expression that defines the entity, in serialized format.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.CepEntity.Logic">
      <summary>Gets the logic that defines the entity.</summary>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.CepEventType">
      <summary>Represents an event type that is used by a CEP application. Event payloads as well as their fields have associated CEP event types.</summary>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.CepEventType.ClrType">
      <summary>Gets the Common Language Runtime (CLR) type equivalent of the CEP event type.</summary>
      <returns>The CLR type equivalent of the CEP event type.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.CepEventType.Fields">
      <summary>Gets the collection of fields of the event type by their name, ordered lexicographically.</summary>
      <returns>A dictionary containing all fields in the CEP event type, ordered lexicographically by name. Null, if the type is an event field itself.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.CepEventType.FieldsByOrdinal">
      <summary>Gets the collection of fields of the event type by ordinal.</summary>
      <returns>A dictionary containing all fields in the CEP event type by ordinal. Null, if the type is an event field itself.</returns>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.CepEventTypeField">
      <summary>Represents a single field in a CEP event type.</summary>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.CepEventTypeField.CultureInfo">
      <summary>Gets the culture settings of the field.</summary>
      <returns>The culture information that contains the field's culture settings. These setting are used for culture-sensitive operations. If null, the default culture settings are used.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.CepEventTypeField.IsFixedSize">
      <summary>Gets a value indicating whether the field size is fixed.</summary>
      <returns>true if the field size is fixed; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.CepEventTypeField.IsNullable">
      <summary>Gets a value indicating whether the field is nullable.</summary>
      <returns>true if the field is nullable; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.CepEventTypeField.MaxSize">
      <summary>Gets the maximum size of the field, in bytes.</summary>
      <returns>The maximum size of the field in bytes.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.CepEventTypeField.Name">
      <summary>Gets the name of the field.</summary>
      <returns>The name of the field.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.CepEventTypeField.Ordinal">
      <summary>Gets the ordinal value of the field.</summary>
      <returns>The ordinal value of the field within the CEP event type.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.CepEventTypeField.Type">
      <summary>Gets the CEP event type of the field. </summary>
      <returns>The run-time type of the field.</returns>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.CepObject">
      <summary>Represents the base class for CEP objects.</summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.CepObject.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ComplexEventProcessing.CepObject" /> class. </summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.CepObject.Delete">
      <summary>Deletes the object.</summary>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.CepObject.Name">
      <summary>Gets the name of this object.</summary>
      <returns>The name of the object.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.CepObject.ShortName">
      <summary>Gets the short name of the CEP object. </summary>
      <returns>The relative URI of the CEP object, without the full metadata path of the object.</returns>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.CepObjectReadOnlyDictionary`1">
      <summary>Represents a generic read-only collection for CEP metadata objects.</summary>
      <typeparam name="T">The type of the element.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.CepObjectReadOnlyDictionary`1.Contains(System.Collections.Generic.KeyValuePair{System.String,`0})">
      <summary>Indicates whether the collection contains the given item.</summary>
      <returns>true if the item is contained in the collection; otherwise, false.</returns>
      <param name="item">The item to search in the collection.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.CepObjectReadOnlyDictionary`1.ContainsKey(System.String)">
      <summary>Indicates whether the collection contains the given key.</summary>
      <returns>true if the key is contained in the collection; otherwise, false.</returns>
      <param name="key">The key to search in the collection.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.CepObjectReadOnlyDictionary`1.CopyTo(System.Collections.Generic.KeyValuePair{System.String,`0}[],System.Int32)">
      <summary>Copies the elements of the collection to a given array, starting at a particular array index.</summary>
      <param name="array">The array to copy the items to.</param>
      <param name="arrayIndex">The array index to start copying to.</param>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.CepObjectReadOnlyDictionary`1.Count">
      <summary>Gets the number of elements contained in the collection.</summary>
      <returns>The number of elements in the collection.</returns>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.CepObjectReadOnlyDictionary`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An enumerator that iterates through the collection.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.CepObjectReadOnlyDictionary`1.IsReadOnly">
      <summary>Gets a value that indicates whether the collection is read-only.</summary>
      <returns>true if the collection is read-only; otherwise, false</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.CepObjectReadOnlyDictionary`1.Item(System.String)">
      <summary>Gets metadata objects by name.</summary>
      <returns>The object with the specified name.</returns>
      <param name="key">The name of the CEP object to retrieve.</param>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.CepObjectReadOnlyDictionary`1.Keys">
      <summary>Gets the keys of the collection.</summary>
      <returns>The read-only collection of keys.</returns>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.CepObjectReadOnlyDictionary`1.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{System.String,`0})">
      <summary>Adds a new object to a collection of metadata objects.</summary>
      <param name="item">The name of the object to add to the collection.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.CepObjectReadOnlyDictionary`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Removes all keys and values from a collection of metadata objects.</summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.CepObjectReadOnlyDictionary`1.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{System.String,`0})">
      <summary>Removes the specified item from a collection of metadata objects.</summary>
      <returns>true if the element is successfully found and removed; otherwise, false.</returns>
      <param name="item">The item to be removed.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.CepObjectReadOnlyDictionary`1.System#Collections#Generic#IDictionary{TKey@TValue}#Add(System.String,`0)">
      <summary>Adds a new object to a collection of metadata objects.</summary>
      <param name="key">The key that identifies the object.</param>
      <param name="value">The object to add to the collection.</param>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.CepObjectReadOnlyDictionary`1.System#Collections#Generic#IDictionary{TKey@TValue}#Item(System.String)">
      <summary>Gets or sets the metadata objects by name.</summary>
      <returns>The object with the specified key.</returns>
      <param name="key">The key of the object to retrieve.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.CepObjectReadOnlyDictionary`1.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(System.String)">
      <summary>Removes the specified item from a collection of metadata objects.</summary>
      <returns>true if the element is successfully found and removed; otherwise, false.</returns>
      <param name="key">The key for the item to be removed.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.CepObjectReadOnlyDictionary`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.CepObjectReadOnlyDictionary`1.TryGetValue(System.String,`0@)">
      <summary>Tries to get the value given the key.</summary>
      <returns>Contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter.</returns>
      <param name="key">The key of the value to get.</param>
      <param name="value">The value for the key, if the key exists.</param>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.CepObjectReadOnlyDictionary`1.Values">
      <summary>Gets the values of the collection.</summary>
      <returns>The read-only collection of values.</returns>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.CepProcess">
      <summary>Specifies a metadata object representing a running computation.</summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.CepProcess.Resume">
      <summary>Resumes a computation suspended due to server shutdown. If a computation is already running, this operation has no effect.</summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.CepProcess.System#IDisposable#Dispose">
      <summary>Releases all resources used by the <see cref="T:Microsoft.ComplexEventProcessing.CepProcess" /> class.</summary>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.CepSink">
      <summary>Represents a sink of events for CEP engines.</summary>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.CepSource">
      <summary>Represents the source data for CEP application.</summary>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.CepSubject">
      <summary>Represents the subject for the CEP application.</summary>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.CheckpointConfiguration">
      <summary>Configures a server to support checkpointing.</summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.CheckpointConfiguration.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ComplexEventProcessing.CheckpointConfiguration" /> class.</summary>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.CheckpointConfiguration.CreateLogPathIfMissing">
      <summary>Gets or sets a value that indicates whether to create the log path if the folder does not exist.</summary>
      <returns>A value that indicates whether to create the log path if the folder does not exist. The default is false.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.CheckpointConfiguration.LogPath">
      <summary> Gets or sets the path for the checkpointing log. </summary>
      <returns>The path for the checkpointing log. The default is the server path.</returns>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.ConnectionException">
      <summary>Exception thrown when connecting to a server fails.</summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.ConnectionException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ComplexEventProcessing.ConnectionException" /> class. </summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.ConnectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ComplexEventProcessing.ConnectionException" /> class with serialized data. </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains the contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.ConnectionException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ComplexEventProcessing.ConnectionException" /> class. </summary>
      <param name="message">Error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.ConnectionException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ComplexEventProcessing.ConnectionException" /> class with the specified error message and a reference to the inner exception that is the cause of this exception. </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. </param>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.DiagnosticAspect">
      <summary>Enumeration of different diagnostics aspects that can be turned on or off separately.</summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticAspect.None">
      <summary>Disables all diagnostics aspects.</summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticAspect.DiagnosticViews">
      <summary>Enables diagnostic views.</summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticAspect.Debug">
      <summary>Enables debug tracing (enter or exit methods, exceptions and so forth).</summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticAspect.StateChanges">
      <summary>Enables tracing of creation, destruction, and state changes of objects in the engine.</summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticAspect.CepEventTracing">
      <summary>Enables tracing of CEP events as they progress through the queries.</summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticAspect.GenerateErrorReports">
      <summary>Generates error reports on query failures.</summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticAspect.PerformanceCounters">
      <summary>Enables performance counters.</summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticAspect.Admin">
      <summary>Enables application logging of administrative events.</summary>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.DiagnosticLevel">
      <summary>Enumeration of different verbosity levels for the diagnostic aspects.</summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticLevel.Always">
      <summary>The least verbose diagnostic level. Only diagnostics that are always on are enabled on this level.</summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticLevel.Critical">
      <summary>Critical diagnostics are enabled on this level.</summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticLevel.Error">
      <summary>Error diagnostics are enabled on this level. </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticLevel.Warning">
      <summary>Warning diagnostics are enabled on this level.</summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticLevel.Informational">
      <summary>Informational diagnostics are enabled on this level.</summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticLevel.Verbose">
      <summary>The most verbose diagnostic level. All diagnostics are enabled on this level.</summary>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.DiagnosticSettings">
      <summary>Represents a collection of diagnostic settings.</summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.DiagnosticSettings.#ctor">
      <summary>Initializes a new instance of the DiagnosticSettings class with the default values of diagnostic aspects None and verbosity level Critical.</summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.DiagnosticSettings.#ctor(Microsoft.ComplexEventProcessing.DiagnosticAspect,Microsoft.ComplexEventProcessing.DiagnosticLevel)">
      <summary>Initializes a new instance of the DiagnosticSettings class with the given diagnsotic aspects and level.</summary>
      <param name="aspects">Diagnostic aspects.</param>
      <param name="level">Diagnostic level.</param>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.DiagnosticSettings.Aspects">
      <summary>Gets or sets different diagnostics aspects that can be turned on or off separately.</summary>
      <returns>A <see cref="T:Microsoft.ComplexEventProcessing.Diagnostics.DiagnosticAspect" /> value that specifies the diagnostic aspects to enable.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.DiagnosticSettings.Level">
      <summary>Gets or sets different verbosity levels for the diagnostic aspects.</summary>
      <returns>A <see cref="T:Microsoft.ComplexEventProcessing.Diagnostics.DiagnosticLevel" /> value that specifies the verbosity level for the diagnostic aspects.</returns>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.DiagnosticView">
      <summary>Represents a diagnostic view for a single engine object as a bag of name-value pairs (properties).</summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.DiagnosticView.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>This method is currently not supported.</summary>
      <param name="item">The item to be added.</param>
      <exception cref="T:System.NotSupportedException">This method is currently not supported.</exception>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.DiagnosticView.Add(System.String,System.Object)">
      <summary>This method is currently not supported.</summary>
      <param name="key">The key of the element.</param>
      <param name="value">The value of the element.</param>
      <exception cref="T:System.NotSupportedException">This method is currently not supported.</exception>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.DiagnosticView.Clear">
      <summary>This method is currently not supported.</summary>
      <exception cref="T:System.NotSupportedException">This method is currently not supported.</exception>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.DiagnosticView.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Checks if the diagnostic view contains the given key-value pair.</summary>
      <returns>true if the diagnostic view contains the given key-value pair; otherwise, false.</returns>
      <param name="item">The key-value pair to check.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.DiagnosticView.ContainsKey(System.String)">
      <summary>Determines whether the diagnostic view collection contains an element with the specified key.</summary>
      <returns>true if the collection contains the element; otherwise, false.</returns>
      <param name="key">The key of the element.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.DiagnosticView.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>Copies the elements of the collection to a given array, starting at a particular array index.</summary>
      <param name="array">The array to copy to.</param>
      <param name="arrayIndex">The array index to start copying to.</param>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.DiagnosticView.Count">
      <summary>Gets the number of items in the collection.</summary>
      <returns>The number of items in the collection.</returns>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.DiagnosticView.GetEnumerator">
      <summary>Returns an enumerator that can enumerate the diagnostic view items.</summary>
      <returns>An enumerator that can enumerate the diagnostic view items.</returns>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.DiagnosticView.GetProperty``1(Microsoft.ComplexEventProcessing.DiagnosticViewProperty)">
      <summary>Gets the value for a specific property.</summary>
      <returns>The value of the given property.</returns>
      <param name="name">The property name.</param>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.DiagnosticView.GetProperty``1(System.String)">
      <summary>Gets the value of the specified property.</summary>
      <returns>The value of the specified property.</returns>
      <param name="name">The name of the property.</param>
      <typeparam name="TValue">The type of the property value.</typeparam>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.DiagnosticView.IsReadOnly">
      <summary>Gets a value that indicates whether the diagnostic view is read-only.</summary>
      <returns>true if the diagnostic view is read-only; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.DiagnosticView.Item(Microsoft.ComplexEventProcessing.DiagnosticViewProperty)">
      <summary>Gets or sets the value of the specified property.</summary>
      <returns>The value of the specified property.</returns>
      <param name="property">The property to get or set the value for.</param>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.DiagnosticView.Item(System.String)">
      <summary>Gets or sets the element with the specified key. Setting the value of the element is not supported because instances of this class are read-only. Attempts to set the value will result in an exception being thrown.</summary>
      <returns>The value of the element.</returns>
      <param name="key">The key of the element to get or set the value of.</param>
      <exception cref="T:System.NotSupportedException">Setting this property is not currently supported.</exception>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.DiagnosticView.Keys">
      <summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the diagnostic view.</summary>
      <returns>An object that contains names of the keys of the diagnostic view.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.DiagnosticView.ObjectName">
      <summary>Gets the name of the object for this diagnostic view.</summary>
      <returns>The name of the object for the diagnostic view.</returns>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.DiagnosticView.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>This method is currently not supported.</summary>
      <param name="item">The key/value pair to remove.</param>
      <exception cref="T:System.NotSupportedException">This method is currently not supported.</exception>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.DiagnosticView.Remove(System.String)">
      <summary>This method is currently not supported.</summary>
      <param name="key">The key to remove.</param>
      <exception cref="T:System.NotSupportedException">This method is currently not supported.</exception>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.DiagnosticView.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.DiagnosticView.TryGetValue(System.String,System.Object@)">
      <summary>Gets the value associated with the specified key.</summary>
      <returns>true if the element with given key is found; otherwise, false.</returns>
      <param name="key">The key of the element to get.</param>
      <param name="value">The return value.</param>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.DiagnosticView.Values">
      <summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> object containing the keys of this diagnostic view.</summary>
      <returns>An object that contains values of the keys of the diagnostic view.</returns>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.DiagnosticViewProperty">
      <summary> Represents the enumeration of all diagnostic view properties. </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.AdapterState">
      <summary>The current state of the adapter (String). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.AdapterNumberOfRunningWorkers">
      <summary>The number of instances of the adapter in the Running state (Int32). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.AdapterNumberOfStoppedWorkers">
      <summary>The number of instances of the adapter in the Stopped state (Int32). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.AdapterNumberOfSuspendedWorkers">
      <summary>The number of instances of the adapter in the Suspended state (Int32). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.AdapterTotalSuspendCount">
      <summary>The total number of times the adapter was suspended (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.AdapterMinSuspendCountAcrossWorkers">
      <summary>The minimum number of times that an instance of the adapter has been suspended (Int64).</summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.AdapterMaxSuspendCountAcrossWorkers">
      <summary>The maximum number of times an instance of the adapter was suspended.</summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.AdapterTotalTimeInSuspendedState">
      <summary>The total time the adapter was in suspended state (TimeSpan). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.AdapterMinTimeInSuspendedStateAcrossWorkers">
      <summary>The minimum time that an instance of the adapter was in the suspended state (TimeSpan). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.AdapterMaxTimeInSuspendedStateAcrossWorkers">
      <summary>The maximum time that an instance of the adapter was in the suspended state (TimeSpan).</summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.AdapterTotalTimeInNonSuspendedState">
      <summary>The total time the adapter was in a non-suspended state (TimeSpan). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.AdapterMinTimeInNonSuspendedStateAcrossWorkers">
      <summary>The minimum time that an instance of the adapter was in a non-suspended state (TimeSpan).</summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.AdapterMaxTimeInNonSuspendedStateAcrossWorkers">
      <summary>The minimum time that an instance of the adapter was in a non-suspended state (TimeSpan).</summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.AdapterStateTransitionHistory">
      <summary>The XML representation of the last few adapter state transitions (String). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.AdapterFirstCtiTimestamp">
      <summary>The timestamp of the first CTI (in application time) produced or consumed by the adapter (DateTime).</summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.InputAdapterLastCheckpointHighWaterMark">
      <summary>The high-water mark of application time used for the last checkpoint of this stream. This uniquely identifies a point in the input stream, and the stream should replay all events after this point during recovery (DateTime). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.OutputAdapterLastCheckpointHighWaterMark">
      <summary>The application time high-water mark of the output stream for the last checkpoint taken by the query (DateTime). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.OutputAdapterLastCheckpointEventOffset">
      <summary>The number of events since the application time high-water mark specifying the place in the output stream where the last checkpoint was taken (Int32). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.BranchParentOperatorId">
      <summary>The ID of the Group operator for the branch.</summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.BranchGroupingFields">
      <summary>The XML representation of the values of the grouping fields for the branch (String). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.AllEventsCount">
      <summary>The number of all events allocated in the server instance (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.AllEventsMemory">
      <summary>The total amount of memory used by all events on the server instance (bytes).</summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.OperatorId">
      <summary>The identifier for an operator (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.OperatorKind">
      <summary>The type of operator (String). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.OperatorQueryId">
      <summary>The identifier of the query for the operator (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.OperatorSystemInstance">
      <summary>A Boolean value indicating whether the operator is a system operator.</summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.OperatorEventType">
      <summary>The XML representation of the type of the events produced by the operator (String). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.OperatorSchedulerId">
      <summary>The ID of the scheduler for the operator. </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.OperatorNumberOfWorkers">
      <summary>The number of computational units that are executing the operator (Int32). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.OperatorTotalInputEventCount">
      <summary>The total number of input events for the operator (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.OperatorMinInputEventCountAcrossWorkers">
      <summary>The minimum number of input events processed across all the workers for an operator (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.OperatorMaxInputEventCountAcrossWorkers">
      <summary>The maximum number of input events processed across all the workers for an operator (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.OperatorTotalOutputEventCount">
      <summary>The total number of output events for the operator (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.OperatorMinOutputEventCountAcrossWorkers">
      <summary>The minimum number of output events generated across all the workers for an operator (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.OperatorMaxOutputEventCountAcrossWorkers">
      <summary>The maximum number of output events generated across all the workers for an operator (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.OperatorIndexEventCount">
      <summary>The total number of events in the operator’s indexes (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.OperatorMinIndexEventCountAcrossWorkers">
      <summary>The minimum number of events in the indexes across the workers of the operator (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.OperatorMaxIndexEventCountAcrossWorkers">
      <summary>The maximum number of events in the indexes across all the workers of the operator (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.OperatorEventMemory">
      <summary>The amount of memory used by the events in the operator’s indexes (bytes). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.OperatorMinEventMemoryAcrossWorkers">
      <summary>The minimum amount of memory used by the events in the indexes across all workers of an operator (bytes). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.OperatorMaxEventMemoryAcrossWorkers">
      <summary>The maximum amount of memory used by the events in the indexes across all workers of an operator (bytes). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.OperatorIndexMemory">
      <summary>The amount of memory used by the indexes in the operator (bytes). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.OperatorMinIndexMemoryAcrossWorkers">
      <summary>The minimum amount of memory used by the indexes across all workers of an operator (bytes). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.OperatorMaxIndexMemoryAcrossWorkers">
      <summary>The maximum amount of memory used by the indexes across all workers of an operator (bytes). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.OperatorTotalCpuUsage">
      <summary>The total CPU usage of the operator in milliseconds (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.OperatorMinCpuUsageAcrossWorkers">
      <summary>The minimum CPU time usage across the workers of the operator (milliseconds). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.OperatorMaxCpuUsageAcrossWorkers">
      <summary>The maximum CPU time usage across the workers of the operator (milliseconds). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.OperatorTotalScheduledCount">
      <summary>The total number of times the operator was scheduled (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.OperatorLastOutputCtiTimestamp">
      <summary>The timestamp of the last CTI (in application time) produced by the operator (DateTime). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.OperatorTotalOutputCtiCount">
      <summary>The total number of CTI events produced by the operator (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.OperatorMinOutputCtiCountAcrossWorkers">
      <summary>The minimum number of CTI events produced across all the workers for an operator (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.OperatorMaxOutputCtiCountAcrossWorkers">
      <summary>The maximum number of CTI events produced across all the workers for an operator (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.OperatorEventCountSinceLastCti">
      <summary>The number of events produced by the operator since the last CTI (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.OperatorGroupIdField">
      <summary>The name of the group ID field for a Group and Apply operator (String). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.OperatorTotalEventDroppedCount">
      <summary>The total number of events dropped by all workers of the operator (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.OperatorMinEventDroppedCount">
      <summary>The minimum number of events dropped across the workers of the operator (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.OperatorMaxEventDroppedCount">
      <summary>The maximum number of events dropped across the workers of the operator (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.OperatorTotalEventAdjustedCount">
      <summary>The total number of events adjusted by all workers of the operator (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.OperatorMinEventAdjustedCount">
      <summary>The minimum number of events adjusted across the workers of the operator (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.OperatorMaxEventAdjustedCount">
      <summary>The maximum number of events adjusted across the workers of the operator (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.AllQueriesCount">
      <summary>The number of all queries instantiated on the server (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.AllQueriesOperatorCount">
      <summary>The number of all operators instantiated on the server (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.AllQueriesStreamCount">
      <summary>The number of all streams instantiated on the server (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.PublishedStreamId">
      <summary>The ID of the published stream (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.PublishedStreamEventShape">
      <summary>The event shape of the events in the published stream (String). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.PublishedStreamEventType">
      <summary>The XML representation of the event type of the events in the published stream (String). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.PublishedStreamEventCount">
      <summary>The number of events in the published stream (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.PublishedStreamTotalEventCount">
      <summary>The total number of events produced events in the published stream (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.PublishedStreamProducerCount">
      <summary>The number of queries consuming events from the published stream (String32). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.PublishedStreamConsumerCount">
      <summary>The number of queries consuming events from the published stream (Int32). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.QueryId">
      <summary>The ID of the query (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.QuerySystemInstance">
      <summary>A Boolean value indicating whether the query is a system query. </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.QueryInstanceGroupId">
      <summary>The instance group ID of the query (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.QueryCreationTime">
      <summary>The time when the query instance was created (DateTime). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.QueryStartTime">
      <summary>The start time of the query (DateTime). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.QueryEndTime">
      <summary>The end time of the query (DateTime). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.QueryState">
      <summary>The current state of the query (String). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.QueryException">
      <summary>The last exception that occurred in the query (String). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.QueryTotalIncomingEventCount">
      <summary>The total number of incoming events for the query (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.QueryTotalConsumedEventCount">
      <summary>The total number of events consumed by the query (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.QueryTotalProducedEventCount">
      <summary>The total number of events produced by the query (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.QueryTotalOutgoingEventCount">
      <summary>The total number of outgoing events for the query (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.QueryLastIncomingEventTimestamp">
      <summary>The system time of the last incoming event for the query (DateTime). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.QueryLastConsumedEventTimestamp">
      <summary>The system time of the last consumed event for the query (DateTime). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.QueryLastProducedEventTimestamp">
      <summary>The system time of the last produced event for the query (DateTime). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.QueryLastOutgoingEventTimestamp">
      <summary>The system time of the last outgoing event for the query (DateTime). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.QueryTotalConsumedEventLatency">
      <summary>The total latency of all events consumed by the query (milliseconds). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.QueryTotalProducedEventLatency">
      <summary>The total latency of all events produced by the query (milliseconds). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.QueryTotalOutgoingEventLatency">
      <summary>The total latency of all outgoing events for the query (milliseconds). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.QueryLastProducedCtiTimestamp">
      <summary>The timestamp (in application time) of the last CTI produced by the query (DateTime). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.QueryLastCheckpointBeginTime">
      <summary>The time when the last checkpoint of the query began. This will not be present if a checkpoint has never been taken, if the query is stopped, or if the query is aborted (DateTime). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.QueryLastCheckpointEndTime">
      <summary>The time when the last checkpoint of the query completed. This will not be present if a checkpoint has never been taken, if the query is stopped, of if the query is aborted (DateTime). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.QueryLastCheckpointSize">
      <summary>The size in bytes of the last checkpoint of the query. This will not be present if a checkpoint has never been taken (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.QueryIsResilient">
      <summary>A Boolean value that specifies whether the query is configured for resiliency (regardless of the server state).</summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.SchedulerId">
      <summary>The ID of the scheduler. </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.SchedulerState">
      <summary>The current state of the scheduler (String). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.SchedulerStateTransitionHistory">
      <summary>The XML representation of the last few scheduler state transitions (String). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.SchedulerCurrentTaskId">
      <summary>The ID of the currently running task on the scheduler. </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.SchedulerActiveTaskCount">
      <summary>The number of active tasks on the scheduler. </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.SchedulerDormantTaskCount">
      <summary>The number of dormant tasks on the scheduler. </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.SchedulerAsyncRunningTaskCount">
      <summary>The number of running asynchronous tasks on the scheduler. </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.SchedulerCommandQueueLength">
      <summary>The length of the scheduler command queue. </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.SchedulerLastErrorTaskId">
      <summary>The ID of the last task that hit an error on the scheduler. </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.SchedulerLastTaskError">
      <summary>The last task error on this scheduler (String). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.SchedulerTaskCount">
      <summary>The number of tasks on the scheduler. </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.SchedulerTotalBusyTime">
      <summary>The total busy time of the scheduler (milliseconds). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.SchedulerTotalIdleTime">
      <summary>The total idle time of the scheduler (milliseconds). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.SchedulerTotalContextSwitchTime">
      <summary>The total context switch time of the scheduler (milliseconds). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.SchedulerTotalContextSwitchCount">
      <summary>The total number of context switches for the scheduler. </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.SchedulerTotalTaskErrorCount">
      <summary>The total number of task errors on the scheduler. </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.StreamId">
      <summary>The ID of the stream (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.StreamQueryId">
      <summary>The ID of the source operator for the stream (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.StreamSourceOperatorId">
      <summary>The ID of the source operator for the stream (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.StreamTargetOperatorId">
      <summary>The ID of the target operator for the stream (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.StreamSystemInstance">
      <summary>A value indicating whether the stream is a system stream (Boolean). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.StreamNumberOfWorkers">
      <summary>The number of instances of this stream (int32). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.StreamTotalInputEventCount">
      <summary>The total number of input events for the stream (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.StreamMinInputEventCountAcrossWorkers">
      <summary>The minimum number of input events across the instances of the stream (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.StreamMaxInputEventCountAcrossWorkers">
      <summary>The maximum number of input events across the instances of the stream (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.StreamEventCount">
      <summary>The number of events in the stream (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.StreamMinEventCountAcrossWorkers">
      <summary>The minimum number of events in all instances of the stream (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.StreamMaxEventCountAcrossWorkers">
      <summary>The maximum number of events in all instances of the stream (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.StreamMemoryIncludingEvents">
      <summary>The amount of memory used by the stream and all events in it (bytes). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.StreamMinMemoryIncludingEventsAcrossWorkers">
      <summary>The minimum amount of memory used across the instances of the stream (bytes). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.StreamMaxMemoryIncludingEventsAcrossWorkers">
      <summary>The maximum amount of memory used across the instances of the stream (bytes). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.ServerLastRecoveryBeginTime">
      <summary>The time the server began its last recovery process (DateTime). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.ServerLastRecoveryEndTime">
      <summary>The time the server completed its last recovery process (DateTime). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.ServerCheckpointMemory">
      <summary>The amount of memory taken up for checkpointing. </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.ServerVersion">
      <summary>The assembly version of the server (String). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.EntityId">
      <summary> The ID of the entity (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.EntityCreationTime">
      <summary> The creation time of the entity (DateTime). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.ActivationStartTime">
      <summary> The Date and time of activation creation (DateTime). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.SubjectInputCount">
      <summary> The number of OnNext calls made to the Subject (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.SubjectInputErrorCount">
      <summary> The number of OnError calls made to the Subject (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.SubjectInputCompletedCount">
      <summary> The number of OnComplete calls made to the Subject (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.SubjectSubscriberCount">
      <summary> The number of subscribers to the subject (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.SubjectLastError">
      <summary>The last exception that went through the subject (It64).</summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.SubscriptionId">
      <summary> The ID of the subscription (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.SubscriptionOutputCount">
      <summary> The number of events that have been outputted by the subscription (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.SubscriptionLastError">
      <summary> The last exception that went through the subscription (String). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.SubscriptionErrorCount">
      <summary> The number of times OnError was called on the subscription (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.SubscriptionCompletedCount">
      <summary> The number of times OnComplete was called on the subscription (Int64). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.SubscriptionKind">
      <summary> The kind of the subscription (String). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.SubscriptionQueryUri">
      <summary> The URI of the StreamInsight temporal query that represents this subscription if one exists (URI). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.SubscriptionLastEventReceivedTime">
      <summary> The date and time when the last event was received by this subscription (DateTime). </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.DiagnosticViewProperty.SubscriptionDisposed">
      <summary>Specifies whether the subscription has been disposed (Boolean). </summary>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.DynamicQueryCompositionExtensions">
      <summary>This class contains the extension methods to the Query class for dynamic query composition.</summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.DynamicQueryCompositionExtensions.ToStream``1(Microsoft.ComplexEventProcessing.Query)">
      <summary>Creates a new input stream bound to the output event stream of an existing query.</summary>
      <returns>An instance of the CepStream class that can be used to create new queries.</returns>
      <param name="query">Existing query.</param>
      <typeparam name="TPayload">Type of the payload for the new stream.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.DynamicQueryCompositionExtensions.ToStream``1(Microsoft.ComplexEventProcessing.Query,Microsoft.ComplexEventProcessing.AdvanceTimeSettings)">
      <summary>Creates a new input stream with given advance time settings bound to the output event stream of an existing query.</summary>
      <returns>An instance of the CepStream class that can be used to create new queries.</returns>
      <param name="query">Existing query.</param>
      <param name="advanceTimeSettings">Advance time settings for the stream.</param>
      <typeparam name="TPayload">Type of the payload for the new stream.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.DynamicQueryCompositionExtensions.ToStream``1(Microsoft.ComplexEventProcessing.Query,System.String)">
      <summary>Creates a new input stream with a given name bound to the output event stream of an existing query.</summary>
      <returns>An instance of the CepStream class that can be used to create new queries.</returns>
      <param name="query">Existing query.</param>
      <param name="streamName">Name of the input stream in the query template.</param>
      <typeparam name="TPayload">Type of the payload for the new stream.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.DynamicQueryCompositionExtensions.ToStream``1(Microsoft.ComplexEventProcessing.Query,System.String,Microsoft.ComplexEventProcessing.AdvanceTimeSettings)">
      <summary>Creates a new input stream with given name and advance time settings bound to the output event stream of an existing query.</summary>
      <returns>An instance of the CepStream class that can be used to create new queries.</returns>
      <param name="query">Existing query.</param>
      <param name="streamName">Name of the input stream in the query template.</param>
      <param name="advanceTimeSettings">Advance time settings for the stream.</param>
      <typeparam name="TPayload">Type of the payload for the new stream.</typeparam>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.EdgeEvent">
      <summary>Defines methods and properties that allow adapters and user-defined operators to create and access edge events.</summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.EdgeEvent.CreateCti``1(System.DateTimeOffset)">
      <summary>Creates a CTI in a stream of edge events.</summary>
      <returns>The CTI event.</returns>
      <param name="startTime">Timestamp of the CTI.</param>
      <typeparam name="TPayload">Type of the event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.EdgeEvent.CreateEnd``1(System.DateTimeOffset,System.DateTimeOffset,``0)">
      <summary>Creates an edge end event with the specified payload.</summary>
      <returns>The edge end event.</returns>
      <param name="startTime">Start time of the edge event.</param>
      <param name="endTime">End time of the edge event.</param>
      <param name="payload">Payload of the event.</param>
      <typeparam name="TPayload">Type of the event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.EdgeEvent.CreateStart``1(System.DateTimeOffset,``0)">
      <summary>Creates an edge start event with the specified payload.</summary>
      <returns>The edge start event.</returns>
      <param name="startTime">Start time of the edge event.</param>
      <param name="payload">Payload of the event.</param>
      <typeparam name="TPayload">Type of the event payload.</typeparam>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.EdgeEvent.EdgeType">
      <summary>Gets the edge type.</summary>
      <returns>Start for Start edges; end for End edges.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.EdgeEvent.EndTime">
      <summary>Gets or sets the end time of the event. This value is ignored if this is a Start edge event.</summary>
      <returns>The end time of the event.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.EdgeEvent.EventKind">
      <summary>Gets the event kind for the event.</summary>
      <returns>One of the enumeration values that specifies the kind of event (Insert or Cti).</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.EdgeEvent.StartTime">
      <summary>Gets or sets the valid start time of the event. </summary>
      <returns>The start time of the event.</returns>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.EdgeEvent`1">
      <summary>An edge event represents either the start or end of a CEP event.</summary>
      <typeparam name="TPayload">Type of the payload of the edge event.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.EdgeEvent`1.CreateCti(System.DateTimeOffset)">
      <summary>Creates a CTI in a stream of edge events.</summary>
      <returns>The CTI event.</returns>
      <param name="startTime">Timestamp of the CTI.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.EdgeEvent`1.CreateEnd(System.DateTimeOffset,System.DateTimeOffset,`0)">
      <summary>Creates an edge end event with the specified payload.</summary>
      <returns>The edge end event.</returns>
      <param name="startTime">Start time of the edge event.</param>
      <param name="endTime">End time of the edge event.</param>
      <param name="payload">Payload of the event.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.EdgeEvent`1.CreateStart(System.DateTimeOffset,`0)">
      <summary>Creates an edge start event with the specified payload.</summary>
      <returns>The edge start event.</returns>
      <param name="startTime">Start time of the edge event.</param>
      <param name="payload">Payload of the event.</param>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.EdgeEvent`1.EdgeType">
      <summary>Gets the edge type.</summary>
      <returns>Start for Start edges, End for End edges.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.EdgeEvent`1.EndTime">
      <summary>Gets or sets the valid end time of the event. This value is ignored if this is a start edge event.</summary>
      <returns>The end time of the event.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.EdgeEvent`1.StartTime">
      <summary>Gets or sets the valid start time of the event. This value is ignored if this is an end edge event.</summary>
      <returns>A <see cref="T:System:DateTime" /> object that represents the valid start time of the event.</returns>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.EdgeType">
      <summary>Enumerates the valid edge types.</summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.EdgeType.Start">
      <summary>Represents a Start edge event.</summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.EdgeType.End">
      <summary>Represents an End edge event.</summary>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.EventInstance">
      <summary>Abstract class that represents a user-facing event. This is a wrapper around an underlying event in the system. </summary>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.EventKind">
      <summary>Enumerates the valid kinds of events. </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.EventKind.Insert">
      <summary>Represents an Insert event.</summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.EventKind.Cti">
      <summary>Represents a current time increment (CTI) event.</summary>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.EventShape">
      <summary>Specifies the shape of events that the stream contains.</summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.EventShape.Interval">
      <summary>Interval events have a start time and an end time, indicating the lifetime during which the payload of the event is valid.</summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.EventShape.Edge">
      <summary>Edge events indicate either the start or the end of the lifetime of a payload. Events of shape Edge can be either Start edges or End edges.</summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.EventShape.Point">
      <summary>Point events have a lifetime of a single tick, and hence only a single timestamp.</summary>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.EventTypeConverter">
      <summary>Represents functionality to convert a CLR type into a CEP event type.</summary>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.EventTypeConverter`1">
      <summary>Represents functionality to convert a CLR type into a CEP event type.</summary>
      <typeparam name="T">The CLR type to convert.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.EventTypeConverter`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ComplexEventProcessing.EventTypeConverter`1" /> class. </summary>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.EventTypeConverter`1.EventType">
      <summary>Gets the CEP type representation of the CLR type.</summary>
      <returns>The CEP type representation of the CLR type.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.EventTypeConverter`1.MapEngineFieldToClrField">
      <summary>Returns a collection of mappings from CEP fields to CLR fields.</summary>
      <returns>A collection of mappings from CEP fields to CLR fields.</returns>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.InputAdapter">
      <summary>Class that represents an input adapter as a CEP metadata object. </summary>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.InputAdapter.Description">
      <summary>Gets the description of this input adapter.</summary>
      <returns>The description that was specified when the adapter was registered.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.InputAdapter.FactoryClassName">
      <summary>Gets the full name of the adapter factory class.</summary>
      <returns>The full name of the adapter factory class, including the assembly name.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.InputAdapter.IsTyped">
      <summary>Gets or sets a value that indicates whether or not this factory is a typed factory.</summary>
      <returns>true if the factory is typed; otherwise, false.</returns>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.InputStreamBinding">
      <summary>Represents binding information for an input stream of a query.</summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.InputStreamBinding.#ctor">
      <summary>Initializes a new instance of the InputStreamBinding class.</summary>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.InputStreamBinding.AdvanceTimeSettings">
      <summary>Gets the AdvanceTimeSettings for this input binding.</summary>
      <returns>The settings that specify how to advance application time for this input binding.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.InputStreamBinding.EventShape">
      <summary>Gets the shape of the input stream of this binding.</summary>
      <returns>The event shape of the input stream of this binding.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.InputStreamBinding.PayloadClassName">
      <summary>Gets the name of the stream's payload class for this binding.</summary>
      <returns>The payload class name of this stream.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.InputStreamBinding.StreamName">
      <summary>Gets the name of the input stream for this binding.</summary>
      <returns>The full name of the input stream.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.InputStreamBinding.StreamSource">
      <summary>Gets the name of the source for this input binding.</summary>
      <returns>The full name of the event source.</returns>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.InputStreamBinding.TryGetConfigInfo``1(``0@)">
      <summary>Returns an instance of a initialization info structure. If the underlying XML cannot be converted into this structure an exception will be thrown.</summary>
      <returns>true if a configuration structure could be retrieved; otherwise, false.</returns>
      <param name="configInfo">An instance of the configuration structure.</param>
      <typeparam name="TConfigInfo">Type of the initialization structure that is returned.</typeparam>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.IntervalEvent">
      <summary>Defines methods and properties that allow adapters and user-defined operators to create and access interval events.</summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.IntervalEvent.CreateCti``1(System.DateTimeOffset)">
      <summary>Creates a CTI in a stream of interval events.</summary>
      <returns>The CTI event.</returns>
      <param name="startTime">Timestamp of the CTI.</param>
      <typeparam name="TPayload">Type of the event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.IntervalEvent.CreateInsert``1(System.DateTimeOffset,System.DateTimeOffset,``0)">
      <summary>Creates an interval event with the specified payload.</summary>
      <returns>The interval event.</returns>
      <param name="startTime">Start time of the interval event.</param>
      <param name="endTime">End time of the interval event.</param>
      <param name="payload">Payload of the event.</param>
      <typeparam name="TPayload">Type of the payload of the event.</typeparam>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.IntervalEvent.EndTime">
      <summary>Gets or sets the end time of the event.</summary>
      <returns>The end time of the event.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.IntervalEvent.StartTime">
      <summary>Gets or sets the start time of the event.</summary>
      <returns>The start time of the event.</returns>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.IntervalEvent`1">
      <summary>Defines methods and properties that allow adapters and user-defined operators to create and access interval events</summary>
      <typeparam name="TPayload">Payload of the interval event.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.IntervalEvent`1.CreateCti(System.DateTimeOffset)">
      <summary>Creates a CTI in a stream of interval events.</summary>
      <returns>The CTI event.</returns>
      <param name="startTime">Timestamp of the CTI.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.IntervalEvent`1.CreateInsert(System.DateTimeOffset,System.DateTimeOffset,`0)">
      <summary>Creates an interval event with the specified payload.</summary>
      <returns>The interval event.</returns>
      <param name="startTime">Start time of the interval event.</param>
      <param name="endTime">End time of the interval event.</param>
      <param name="payload">Payload of the event.</param>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.IntervalEvent`1.EndTime">
      <summary>Gets or sets the end time of the event.</summary>
      <returns>The end time of the event.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.IntervalEvent`1.StartTime">
      <summary>Gets or sets the start time of the event.</summary>
      <returns>The start time of the event.</returns>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.InvalidDefinitionException">
      <summary>Exception thrown when creating a CEP metadata object fails.</summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.InvalidDefinitionException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ComplexEventProcessing.InvalidDefinitionException" /> class. </summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.InvalidDefinitionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ComplexEventProcessing.InvalidDefinitionException" /> class with serialized data. </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains the contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.InvalidDefinitionException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ComplexEventProcessing.InvalidDefinitionException" /> class with the specified error message. </summary>
      <param name="message">Error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.InvalidDefinitionException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ComplexEventProcessing.InvalidDefinitionException" /> class with the specified error message and a reference to the inner exception that is the cause of this exception. </summary>
      <param name="message">Error message that explains the reason for the exception.</param>
      <param name="innerException">Exception that is the cause of the current exception. </param>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.InvalidNameException">
      <summary>Exception thrown when creating a type fails.</summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.InvalidNameException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ComplexEventProcessing.InvalidNameException" /> class. </summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.InvalidNameException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ComplexEventProcessing.InvalidNameException" /> class with serialized data. </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains the contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.InvalidNameException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ComplexEventProcessing.InvalidNameException" /> class with the specified error message. </summary>
      <param name="message">Error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.InvalidNameException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ComplexEventProcessing.InvalidNameException" /> class with the specified error message and a reference to the inner exception that is the cause of this exception. </summary>
      <param name="message">Error message that explains the reason for the exception. </param>
      <param name="innerException">Exception that is the cause of the current exception.</param>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.ManagementException">
      <summary>Exception thrown when creating a type fails.</summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.ManagementException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ComplexEventProcessing.ManagementException" /> class. </summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.ManagementException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ComplexEventProcessing.ManagementException" /> class with serialized data. </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains the contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.ManagementException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ComplexEventProcessing.ManagementException" /> class with the specified error message. </summary>
      <param name="message">Error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.ManagementException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ComplexEventProcessing.ManagementException" /> class with the specified error message and a reference to the inner exception that is the cause of this exception. </summary>
      <param name="message">Error message that explains the reason for the exception. </param>
      <param name="innerException">Exception that is the cause of the current exception.</param>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.OutputAdapter">
      <summary>Class that represents an output adapter as CEP metadata object.</summary>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.OutputAdapter.Description">
      <summary>Gets the description of this output adapter.</summary>
      <returns>The description that was specified when the adapter was registered.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.OutputAdapter.FactoryClassName">
      <summary>ets the full name of the adaper factory class.</summary>
      <returns>The full name of the adapter factory class, including the assembly name.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.OutputAdapter.IsTyped">
      <summary>Gets or sets a value that indicates whether or not this factory is a typed factory.</summary>
      <returns>true if the factory is typed; otherwise, false.</returns>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.OutputStreamBinding">
      <summary>Represents binding information for the output stream of a query.</summary>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.OutputStreamBinding.EventShape">
      <summary>Gets the shape of the output stream of this binding.</summary>
      <returns>The event shape of the output stream of this binding.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.OutputStreamBinding.PayloadClassName">
      <summary>Gets the name of the stream's payload class for this binding.</summary>
      <returns>The payload class name of this stream.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.OutputStreamBinding.StreamConsumerName">
      <summary>Gets the name of the consumer for this output binding.</summary>
      <returns>The name of the event consumer.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.OutputStreamBinding.StreamEventOrder">
      <summary>Gets information about the order of events in that stream.</summary>
      <returns>The order of events in that stream.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.OutputStreamBinding.StreamName">
      <summary>Gets the name of the output stream for this binding.</summary>
      <returns>The full name of the output stream.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.OutputStreamBinding.StreamTarget">
      <summary>Gets the name of the stream target.</summary>
      <returns>The full name of the event sink.</returns>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.OutputStreamBinding.TryGetConfigInfo``1(``0@)">
      <summary>Returns an instance of a initialization info structure. If the underlying XML cannot be converted into this structure an exception is thrown.</summary>
      <returns>true if a configuration structure could be retrieved; otherwise, false.</returns>
      <param name="configInfo">An instance of the configuration structure.</param>
      <typeparam name="TConfigInfo">Type of the initialization structure that is returned</typeparam>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.PointEvent">
      <summary>Defines methods and properties that allow adapters and user-defined operators to create and access point events.</summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.PointEvent.CreateCti``1(System.DateTimeOffset)">
      <summary>Creates a CTI in a stream of point events.</summary>
      <returns>The CTI event.</returns>
      <param name="startTime">Timestamp of the CTI.</param>
      <typeparam name="TPayload">Type of the event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.PointEvent.CreateInsert``1(System.DateTimeOffset,``0)">
      <summary>Creates a point event with the specified payload.</summary>
      <returns>The point event.</returns>
      <param name="startTime">Timestamp of the point event.</param>
      <param name="payload">Payload of the event.</param>
      <typeparam name="TPayload">Type of the event payload.</typeparam>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.PointEvent.StartTime">
      <summary>Gets or sets the time of the point event.</summary>
      <returns>The time of the event.</returns>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.PointEvent`1">
      <summary>Defines methods and properties that allow adapters and user-defined operators to create and access point events.</summary>
      <typeparam name="TPayload">Payload of the point event.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.PointEvent`1.CreateCti(System.DateTimeOffset)">
      <summary>Creates a CTI in a stream of point events.</summary>
      <returns>The CTI event.</returns>
      <param name="startTime">Timestamp of the CTI.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.PointEvent`1.CreateInsert(System.DateTimeOffset,`0)">
      <summary>Creates a point event with the specified payload.</summary>
      <returns>The point event.</returns>
      <param name="startTime">Timestamp of the point event.</param>
      <param name="payload">Payload of the event.</param>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.PointEvent`1.StartTime">
      <summary>Gets or sets the time of the event.</summary>
      <returns>The time of the event.</returns>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Query">
      <summary>Represents a query object in CEP metadata.</summary>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.Query.Description">
      <summary>Gets the description of this query.</summary>
      <returns>The description that was specified when the query was registered.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.Query.InputStreamBindings">
      <summary>Gets the collection of input stream bindings.</summary>
      <returns>The collection of input stream bindings.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.Query.IsResilient">
      <summary>Gets or sets a value that indicates whether the query is resilient.</summary>
      <returns>true if the query is resilient; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.Query.OutputStreamBindings">
      <summary>Gets the collection of output stream bindings.</summary>
      <returns>The collection of output stream bindings.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.Query.QueryTemplateName">
      <summary>Gets the name of the query template associated with this query.</summary>
      <returns>Full name of the query template associated with this query.</returns>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Query.Start">
      <summary>Starts the query asynchronously.</summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Query.Stop">
      <summary>Stops this query.</summary>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.QueryAbortException">
      <summary>The exception that is raised when a query stops due to a failure.</summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.QueryAbortException.#ctor">
      <summary>Initializes a new instance of a <see cref="T:Microsoft.ComplexEventProcessing.QueryAbortException" />.</summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.QueryAbortException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of a <see cref="T:Microsoft.ComplexEventProcessing.QueryAbortException" /> with serialized data.</summary>
      <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.QueryAbortException.#ctor(System.String)">
      <summary>Initializes a new instance of a <see cref="T:Microsoft.ComplexEventProcessing.QueryAbortException" /> with the specified message..</summary>
      <param name="message">Message that provides more information about the exception.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.QueryAbortException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of a <see cref="T:Microsoft.ComplexEventProcessing.QueryAbortException" /> with the specified message and inner exception.</summary>
      <param name="message">Message that provides more information about the exception.</param>
      <param name="innerException">Exception that caused the <see cref="T:Microsoft.ComplexEventProcessing.QueryAbortException" />.</param>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.QueryBinder">
      <summary>Represents a client-side helper class to bind query producers and consumers in order to create a query object.</summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.QueryBinder.#ctor(Microsoft.ComplexEventProcessing.QueryTemplate)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ComplexEventProcessing.QueryBinder" /> class. </summary>
      <param name="queryTemplate">The query template that must be bound by this query binder.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.QueryBinder.AddConsumer(System.String,Microsoft.ComplexEventProcessing.OutputAdapter,System.Object,Microsoft.ComplexEventProcessing.EventShape,Microsoft.ComplexEventProcessing.StreamEventOrder)">
      <summary>Adds an untyped adapter as an event consumer.</summary>
      <param name="streamConsumerName">The stream consumer name, used to uniquely identify the consumer.</param>
      <param name="outputAdapter">The output adapter metadata object to be bound.</param>
      <param name="configInfo">The runtime configuration for the output adapter.</param>
      <param name="eventShape">The desired event shape of the output stream.</param>
      <param name="streamEventOrder">The desired event order in the output stream.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.QueryBinder.AddConsumer``1(System.String,Microsoft.ComplexEventProcessing.OutputAdapter,System.Object,Microsoft.ComplexEventProcessing.EventShape,Microsoft.ComplexEventProcessing.StreamEventOrder)">
      <summary>Adds an adapter as an event consumer.</summary>
      <param name="streamConsumerName">The stream consumer name, used to uniquely identify the consumer.</param>
      <param name="outputAdapter">The output adapter metadata object to be bound.</param>
      <param name="configInfo">The runtime configuration for the output adapter.</param>
      <param name="eventShape">The desired event shape of the output stream.</param>
      <param name="streamEventOrder">The desired event order in the output stream.</param>
      <typeparam name="PayloadT">The output stream payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.QueryBinder.BindOutputToPublishedStream(Microsoft.ComplexEventProcessing.EventShape,Microsoft.ComplexEventProcessing.StreamEventOrder)">
      <summary>Binds the output of the query to the default published stream with the same name as the query.</summary>
      <param name="eventShape">The desired event shape of the output stream.</param>
      <param name="streamEventOrder">The desired event order in the output stream.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.QueryBinder.BindOutputToPublishedStream(System.Uri,Microsoft.ComplexEventProcessing.EventShape,Microsoft.ComplexEventProcessing.StreamEventOrder)">
      <summary>Binds the output of the query to an explicitly named published stream.</summary>
      <param name="publishedStreamName">The name of the published stream.</param>
      <param name="eventShape">The desired event shape of the output stream.</param>
      <param name="streamEventOrder">The desired event order in the output stream.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.QueryBinder.BindProducer(System.String,Microsoft.ComplexEventProcessing.InputAdapter,System.Object,Microsoft.ComplexEventProcessing.EventShape)">
      <summary>Binds a query template input to an untyped input adapter.</summary>
      <param name="streamName">The name of the input stream of the query template to be bound.</param>
      <param name="inputAdapter">The input adapter metadata object to be bound.</param>
      <param name="configInfo">The runtime configuration for the input adapter.</param>
      <param name="eventShape">The desired event shape of the input stream.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.QueryBinder.BindProducer``1(System.String,Microsoft.ComplexEventProcessing.InputAdapter,System.Object,Microsoft.ComplexEventProcessing.EventShape)">
      <summary>Binds a query template input to an input adapter.</summary>
      <param name="streamName">The name of the input stream of the query template to be bound.</param>
      <param name="inputAdapter">The input adapter metadata object to be bound.</param>
      <param name="configInfo">The runtime configuration for the input adapter.</param>
      <param name="eventShape">The desired event shape of the input stream.</param>
      <typeparam name="PayloadT">The input stream payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.QueryBinder.BindProducer(System.String,Microsoft.ComplexEventProcessing.InputAdapter,System.Object,Microsoft.ComplexEventProcessing.EventShape,Microsoft.ComplexEventProcessing.AdvanceTimeSettings)">
      <summary>Binds a query template input to an untyped input adapter.</summary>
      <param name="streamName">The name of the input stream of the query template to be bound.</param>
      <param name="inputAdapter">The input adapter metadata object to be bound.</param>
      <param name="configInfo">The runtime configuration for the input adapter.</param>
      <param name="eventShape">The desired event shape of the input stream.</param>
      <param name="advanceTimeSettings">The settings to advance application time for this input stream.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.QueryBinder.BindProducer``1(System.String,Microsoft.ComplexEventProcessing.InputAdapter,System.Object,Microsoft.ComplexEventProcessing.EventShape,Microsoft.ComplexEventProcessing.AdvanceTimeSettings)">
      <summary>Binds a query template input to an input adapter.</summary>
      <param name="streamName">The name of the input stream of the query template to be bound.</param>
      <param name="inputAdapter">The input adapter metadata object to be bound.</param>
      <param name="configInfo">The runtime configuration for the input adapter.</param>
      <param name="eventShape">The desired event shape of the input stream.</param>
      <param name="advanceTimeSettings">The settings to advance application time for this input stream.</param>
      <typeparam name="PayloadT">The input stream payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.QueryBinder.BindProducer(System.String,Microsoft.ComplexEventProcessing.Query)">
      <summary>Binds the output events stream of an existing query to a given input stream in the query template.</summary>
      <param name="streamName">The name of the input stream of the query template to be bound.</param>
      <param name="query">The existing query.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.QueryBinder.BindProducer(System.String,Microsoft.ComplexEventProcessing.Query,Microsoft.ComplexEventProcessing.AdvanceTimeSettings)">
      <summary>Binds the output events stream of an existing query to a given input stream in the query template.</summary>
      <param name="streamName">The name of the input stream of the query template to be bound.</param>
      <param name="query">The existing query.</param>
      <param name="advanceTimeSettings">The settings to advance application time for this input stream.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.QueryBinder.BindProducer(System.String,System.Uri,Microsoft.ComplexEventProcessing.EventShape)">
      <summary>Binds an existing published stream to a given input stream in the query template.</summary>
      <param name="streamName">The name of the input stream of the query template to be bound.</param>
      <param name="publishedStreamName">The name of the published stream.</param>
      <param name="eventShape">The desired event shape of the input stream.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.QueryBinder.BindProducer(System.String,System.Uri,Microsoft.ComplexEventProcessing.EventShape,Microsoft.ComplexEventProcessing.AdvanceTimeSettings)">
      <summary>Binds an existing published stream to a given input stream in the query template.</summary>
      <param name="streamName">The name of the input stream of the query template to be bound.</param>
      <param name="publishedStreamName">The name of the published stream.</param>
      <param name="eventShape">The desired event shape of the input stream.</param>
      <param name="advanceTimeSettings">The settings to advance application time for this input stream.</param>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.QueryBinder.InputBindings">
      <summary>Gets the collection of input stream binding information.</summary>
      <returns>A collection of input stream binding objects.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.QueryBinder.OutputBindings">
      <summary>Gets the collection of output stream binding information.</summary>
      <returns>A collection of output stream binding objects.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.QueryBinder.QueryTemplate">
      <summary>Gets the query template this query binder is trying to bind.</summary>
      <returns>The query template that this query binder is trying to bind.</returns>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.QueryTemplate">
      <summary>Represents a query template metadata object.</summary>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.QueryTemplate.Definition">
      <summary>The query template definition in the form of XML.</summary>
      <returns>The query definition as an XML string.</returns>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.QueryTemplate.Delete">
      <summary>Deletes the query template from metadata.</summary>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.QueryTemplate.Description">
      <summary>Gets a description for this query template.</summary>
      <returns>The description for this query template</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.QueryTemplate.QueryTemplateInputs">
      <summary>Gets the collection of inputs associated with this query template.</summary>
      <returns>A collection of input stream names.</returns>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.QueryTemplateInput">
      <summary>Represents a stream entry point in a query template.</summary>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.QueryTemplateInput.EventTypeName">
      <summary>Gets the name of the event type associated with the stream input.</summary>
      <returns>The name of the event type associated with the stream input.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.QueryTemplateInput.QueryTemplate">
      <summary>Gets the query template that is associated with this input.</summary>
      <returns>The query template that is associated with this input.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.QueryTemplateInput.StreamName">
      <summary>Gets the name of the input stream.</summary>
      <returns>The name of the input stream.</returns>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Server">
      <summary> Represents a CEP server. </summary>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.Server.Applications">
      <summary>Gets the collection of applications that are registered in the server.</summary>
      <returns>The collection of applications that are registered in the server.</returns>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Server.BeginCheckpoint(Microsoft.ComplexEventProcessing.Query,System.AsyncCallback,System.Object)">
      <summary>Initiates an asynchronous checkpoint for the query.</summary>
      <returns>The asynchronous checkpoint, which could still be pending.</returns>
      <param name="query">The query to begin a checkpoint for.</param>
      <param name="asyncCallback">An optional asynchronous callback, to be called when the checkpoint is complete.</param>
      <param name="asyncState">A user-provided object that distinguishes this asynchronous checkpoint request from other requests.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Server.CancelCheckpoint(System.IAsyncResult)">
      <summary>Cancels a pending asynchronous checkpoint.</summary>
      <param name="asyncResult">The reference to the pending asynchronous request to cancel.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Server.ClearDiagnosticSettings(System.Uri)">
      <summary>Clears the diagnostic settings for the named object.</summary>
      <param name="name">The full name of the object or the name of a collection or subobject of the Server (such as PlanManager).</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Server.Connect(System.ServiceModel.EndpointAddress)">
      <summary>Prepares a connection to a running instance of a CEP server through an endpoint. WsHttpBinding is used as the default binding.</summary>
      <returns>A new CEP server instance that represents the remote server.</returns>
      <param name="endpointAddress">The endpoint of the server to connect to.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Server.Connect(System.ServiceModel.EndpointAddress,System.ServiceModel.Channels.Binding)">
      <summary>Prepares a connection to a running instance of a CEP server through an endpoint with a specific binding.</summary>
      <returns>A new CEP server instance that represents the remote server.</returns>
      <param name="endpointAddress">The endpoint of the server.</param>
      <param name="binding">The connection binding information.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Server.Connect(System.ServiceModel.EndpointAddress,System.ServiceModel.Channels.Binding,System.Uri)">
      <summary>Prepares a connection to a running instance of a CEP server through an endpoint with a specific binding.</summary>
      <returns>A new CEP server instance that represents the remote server.</returns>
      <param name="endpointAddress">The endpoint of the remote server.</param>
      <param name="binding">The connection binding information.</param>
      <param name="via">The URI that contains the transport address to which the channel sends messages.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Server.Create(System.String)">
      <summary>Creates an instance of the CEP server, backed by an in-memory metadata store.</summary>
      <returns>The new CEP server instance.</returns>
      <param name="instanceName">The name of the installed StreamInsight instance.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Server.Create(System.String,Microsoft.ComplexEventProcessing.SqlCeMetadataProviderConfiguration)">
      <summary>Creates a CEP server using the SQL Server Compact metadata provider.</summary>
      <returns>The new CEP server instance.</returns>
      <param name="instanceName">The name of the installed StreamInsight instance.</param>
      <param name="config">The SQL Server Compact metadata provider configuration.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Server.Create(System.String,Microsoft.ComplexEventProcessing.SqlCeMetadataProviderConfiguration,Microsoft.ComplexEventProcessing.CheckpointConfiguration)">
      <summary>Creates a CEP server using the SQL Server Compact metadata provider and specifies a checkpoint configuration.</summary>
      <returns>The new CEP server instance.</returns>
      <param name="instanceName">The name of the installed StreamInsight instance.</param>
      <param name="config">The SQL Server Compact metadata provider configuration.</param>
      <param name="checkpointConfig">The checkpoint configuration.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Server.CreateApplication(System.String)">
      <summary>Creates an application in the CEP server.</summary>
      <returns>The newly created application.</returns>
      <param name="name">The name of the application to create.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Server.CreateManagementService">
      <summary>Returns a management service implementation for the current server.</summary>
      <returns>A management service implementation for the current server.</returns>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Server.Dispose">
      <summary>Releases all resources referenced by this server.</summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Server.EndCheckpoint(System.IAsyncResult)">
      <summary>Waits for the pending asynchronous checkpoint request to complete.</summary>
      <returns>true if the checkpoint completed successfully; otherwise, false.</returns>
      <param name="asyncResult">The reference to the pending asynchronous request.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Server.Enumerate(System.Uri)">
      <summary>Enumerates a collection of metadata objects in the server.</summary>
      <returns>The names of all of the objects that belong to the specified collection.</returns>
      <param name="name">The name of the collection.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Server.GetDiagnosticSettings(System.Uri)">
      <summary>Gets the diagnostic settings for the named object.</summary>
      <returns>The diagnostic settings for the object.</returns>
      <param name="name">The full name of the object or the name of a collection or sub-object of the Server (for example, PlanManager).</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Server.GetDiagnosticView(System.Uri)">
      <summary>Gets the diagnostic view for the named object.</summary>
      <returns>The diagnostic view for the object.</returns>
      <param name="name">The full name of the object or the name of a collection or sub-object of the Server (for example, PlanManager).</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Server.GetTypeDefinition(System.String,System.String,System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}})">
      <summary> Returns the type definition as it exists on the remote server. </summary>
      <returns>The type definition in serialized format.</returns>
      <param name="name">The full name of the type.</param>
      <param name="assemblyName">The full name of the assembly.</param>
      <param name="genericArguments">The list of tuples representing the generic parameters.</param>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.Server.IsEmbedded">
      <summary>Gets a flag indicating whether the server is running in process or is a remote server.</summary>
      <returns>true if the server is running in-process; false if the server is a remote server.</returns>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Server.SetDiagnosticSettings(System.Uri,Microsoft.ComplexEventProcessing.DiagnosticSettings)">
      <summary>Sets the diagnostic settings for the named object.</summary>
      <param name="name">The full name of the object or the name of a collection or sub-object of the Server (for example, PlanManager).</param>
      <param name="diagnosticSettings">The diagnostic settings for the object.</param>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.SqlCeMetadataProviderConfiguration">
      <summary>Represents configuration information specific to the SqlCe metadata provider.</summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.SqlCeMetadataProviderConfiguration.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ComplexEventProcessing.SqlCeMetadataProviderConfiguration" /> class. </summary>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.SqlCeMetadataProviderConfiguration.CreateDataSourceIfMissing">
      <summary>Gets or sets a flag indicating if the data source file should be created if missing.</summary>
      <returns>A boolean value that indicates whether data source files should be created if they are found to be missing.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.SqlCeMetadataProviderConfiguration.DataSource">
      <summary>Gets or sets the path to the database file used by the provider.</summary>
      <returns>The path to the database file.</returns>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.SqlCeMetadataProviderConfiguration.DefaultCreateDataSourceIfMissing">
      <summary>Default relative location of the file that holds the SqlCe metadata database.</summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.SqlCeMetadataProviderConfiguration.DefaultDataSource">
      <summary>Returns the default location of the file that holds the SQL Server CE metadata database.</summary>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.StreamEventOrder">
      <summary>Specifies the event order in a query output stream.</summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.StreamEventOrder.ChainOrdered">
      <summary>In a ChainOrdered output stream each CTI releases all interval events with an end time before the CTI to the output.</summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.StreamEventOrder.FullyOrdered">
      <summary>In a FullyOrdered output stream each CTI releases interval events to the output only if all other events with an earlier start time have been released to the output already.</summary>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.TypeCreationException">
      <summary>Txception thrown when creating a type fails. </summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.TypeCreationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ComplexEventProcessing.TypeCreationException" /> class. </summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.TypeCreationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ComplexEventProcessing.TypeCreationException" /> class with serialized data. </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains the contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.TypeCreationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ComplexEventProcessing.TypeCreationException" /> class with the specified error message. </summary>
      <param name="message">Error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.TypeCreationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ComplexEventProcessing.TypeCreationException" /> class with the specified error message and a reference to the inner exception that is the cause of this exception. </summary>
      <param name="message">Error message that explains the reason for the exception.</param>
      <param name="innerException">Exception that is the cause of the current exception.</param>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.TypedEvent`1">
      <summary>Represents a typed event.</summary>
      <typeparam name="TPayload"></typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.TypedEvent`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ComplexEventProcessing.TypedEvent`1" /> class. </summary>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.TypedEvent`1.EventKind">
      <summary>Gets the kind of the event.</summary>
      <returns>The kind of the event.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.TypedEvent`1.Payload">
      <summary>Gets or sets the payload of the event.</summary>
      <returns>The event payload.</returns>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.UntypedEvent">
      <summary>Represents an untyped event.</summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.UntypedEvent.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ComplexEventProcessing.UntypedEvent" /> class. </summary>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.UntypedEvent.EventKind">
      <summary>Gets the kind of the event.</summary>
      <returns>The kind of the event.</returns>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.UntypedEvent.GetField(System.Int32)">
      <summary>Returns the value of the specified field, regardless of its type.</summary>
      <returns>An object that represents the field value.</returns>
      <param name="ordinal">The ordinal of the field to get.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.UntypedEvent.GetField``1(System.Int32)">
      <summary>Gets a field value by its ordinal.</summary>
      <returns>An object containing the field value.</returns>
      <param name="ordinal">Field ordinal, as defined by the event type.</param>
      <typeparam name="T">The type of the field.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.UntypedEvent.SetField(System.Int32,System.Object)">
      <summary>Sets the value of the specified field, regardless of its type.</summary>
      <param name="ordinal">Field ordinal, as defined by the event type.</param>
      <param name="value">Value to be set.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.UntypedEvent.SetField``1(System.Int32,``0)">
      <summary>Sets the field value specified by its ordinal.</summary>
      <param name="ordinal">field ordinal, as defined by the event type.</param>
      <param name="value">Value to be set.</param>
      <typeparam name="T">Type of the field.</typeparam>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Extensibility.CepAggregate`2">
      <summary>The base class for a user-defined non-incremental, time-insensitive aggregate.</summary>
      <typeparam name="TInput"></typeparam>
      <typeparam name="TOutput"></typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Extensibility.CepAggregate`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ComplexEventProcessing.Extensibility.CepAggregate`2" /> class.</summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Extensibility.CepAggregate`2.GenerateOutput(System.Collections.Generic.IEnumerable{`0})">
      <summary>Generates a single scalar value as a result of the aggregate computation over a collection of input event payloads.</summary>
      <returns>Scalar result of the aggregation.</returns>
      <param name="payloads">Collection of input event payloads.</param>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Extensibility.CepEdgeStreamOperator`2">
      <summary>Creates a user-defined stream operator that processes edge events in sync time order. </summary>
      <typeparam name="TInputPayload">The type of the input event payload.</typeparam>
      <typeparam name="TOutputPayload">The type of the output event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Extensibility.CepEdgeStreamOperator`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ComplexEventProcessing.Extensibility.CepEdgeStreamOperator`2" /> class.</summary>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Extensibility.CepModule`2">
      <summary>The base class for a user-defined non-incremental, time-insensitive operator or aggregate.</summary>
      <typeparam name="TInput"></typeparam>
      <typeparam name="TOutput"></typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Extensibility.CepModule`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ComplexEventProcessing.Extensibility.CepModule`2" /> class.</summary>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.Extensibility.CepModule`2.InputEventType">
      <summary>Gets theevent type that is input to the CEP operator or aggregate.</summary>
      <returns>The CEP representation of the input event type.</returns>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Extensibility.CepOperator`2">
      <summary>The base class for a user-defined non-incremental, time-insensitive operator.</summary>
      <typeparam name="TInput">Payload type of the input events.</typeparam>
      <typeparam name="TOutput">Payload type of the output events.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Extensibility.CepOperator`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ComplexEventProcessing.Extensibility.CepOperator`2" /> class.</summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Extensibility.CepOperator`2.GenerateOutput(System.Collections.Generic.IEnumerable{`0})">
      <summary>The GenerateOutput method generates a collection of output event payloads as a result of the operator computation over a collection of input event payloads.</summary>
      <returns>A collection of output event payloads.</returns>
      <param name="payloads">Collection of input event payloads..</param>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Extensibility.CepPointStreamOperator`2">
      <summary> Creates a user-defined stream operator that processes point events in StartTime order. </summary>
      <typeparam name="TInputPayload">The type of the input event payload.</typeparam>
      <typeparam name="TOutputPayload">The type of the output event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Extensibility.CepPointStreamOperator`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ComplexEventProcessing.Extensibility.CepPointStreamOperator`2" /> class.</summary>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Extensibility.CepStreamOperator">
      <summary>Creates a user-defined stream operator that processes events in sync time order. </summary>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.Extensibility.CepStreamOperator.IsEmpty">
      <summary> When overriden in a derived class, gets a value that indicates whether the internal state of the operator is empty. When true, the StreamInsight query engine may discard the operator instance to minimize memory utilization. </summary>
      <returns>true if the internal state of the  operator is empty; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.Extensibility.CepStreamOperator.NextCti">
      <summary> When overridden in a derived class, gets the next point in time at which the operator will be asked to process a CTI event. If the value is null, or less than or equal to the sync time of the last processed event, then no CTI events will be passed to the ProcessEvent method. </summary>
      <returns>The next point in time at which the operator will be asked to process a CTI event.</returns>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Extensibility.CepStreamOperator`3">
      <summary>Creates a user-defined stream operator that processes events in sync time order. </summary>
      <typeparam name="TInputEvent">The type of the input event.</typeparam>
      <typeparam name="TInputPayload">The type of the input payload.</typeparam>
      <typeparam name="TOutputPayload">The type of the output payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Extensibility.CepStreamOperator`3.ProcessEvent(`0)">
      <summary> When overridden in a derived class, generates output and updates internal state of the operator in response to an input event. </summary>
      <returns>Output events triggered by the given input event. Null output is equivalent to 'empty'. However no elements of the returned collection may be null.</returns>
      <param name="inputEvent">Input event to the stream operator.</param>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Extensibility.CepTimeSensitiveAggregate`2">
      <summary>The base class for a user-defined non-incremental, time-sensitive aggregate. </summary>
      <typeparam name="TInput">Payload type of the input events.</typeparam>
      <typeparam name="TOutput">Type of the scalar aggregation result.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Extensibility.CepTimeSensitiveAggregate`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ComplexEventProcessing.Extensibility.CepTimeSensitiveAggregate`2" /> class.</summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Extensibility.CepTimeSensitiveAggregate`2.GenerateOutput(System.Collections.Generic.IEnumerable{Microsoft.ComplexEventProcessing.IntervalEvent{`0}},Microsoft.ComplexEventProcessing.Extensibility.WindowDescriptor)">
      <summary>Generates a single scalar value as a result of the aggregate computation over a collection of input events.</summary>
      <returns>Scalar result of the aggregation.</returns>
      <param name="events">Collection of input events.</param>
      <param name="windowDescriptor">Window descriptor of the window that contains the input events.</param>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Extensibility.CepTimeSensitiveModule`2">
      <summary>The base class for a user-defined non-incremental, time-sensitive operator or aggregate.</summary>
      <typeparam name="TInput">Payload type of the input events.</typeparam>
      <typeparam name="TOutput">Type of the result.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Extensibility.CepTimeSensitiveModule`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ComplexEventProcessing.Extensibility.CepTimeSensitiveModule`2" /> class.</summary>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Extensibility.CepTimeSensitiveOperator`2">
      <summary>The base class for a user-defined non-incremental, time-sensitive operator.</summary>
      <typeparam name="TInput">Payload type of the input events.</typeparam>
      <typeparam name="TOutput">Payload type of the output events.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Extensibility.CepTimeSensitiveOperator`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ComplexEventProcessing.Extensibility.CepTimeSensitiveOperator`2" /> class.</summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Extensibility.CepTimeSensitiveOperator`2.CreateIntervalEvent">
      <summary>Creates an event to be contained in the returned result of the user-defined operator.</summary>
      <returns>An interval event.</returns>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Extensibility.CepTimeSensitiveOperator`2.GenerateOutput(System.Collections.Generic.IEnumerable{Microsoft.ComplexEventProcessing.IntervalEvent{`0}},Microsoft.ComplexEventProcessing.Extensibility.WindowDescriptor)">
      <summary>Generates a collection of output events as a result of the operator computation over a collection of input event payloads. </summary>
      <returns>A collection of output events.</returns>
      <param name="events">Collection of input events.</param>
      <param name="windowDescriptor">Window descriptor of the window that contains the input events.</param>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Extensibility.IDeclareEventProperties">
      <summary>Defines properties for user defined operators or aggregates to provide additional information about the event field, such as the culture information for a string field in the result.</summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Extensibility.IDeclareEventProperties.DeclareEventProperties(Microsoft.ComplexEventProcessing.CepEventType)">
      <summary>Declares additional properties of the result event type.</summary>
      <returns>A decorated outputEventType that contains additional event fields information.</returns>
      <param name="outputEventType">CEP representation of the event type that is output from the user defined module.</param>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Extensibility.WindowDescriptor">
      <summary>The window descriptor provides information about the temporal properties of the window that contains the events that are input to a user-defined time-sensitive operator or aggregate.</summary>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.Extensibility.WindowDescriptor.EndTime">
      <summary>Gets or sets the end time of the window.</summary>
      <returns>The end time of the time window.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.Extensibility.WindowDescriptor.StartTime">
      <summary>Gets or sets the start time of the window.</summary>
      <returns>The start time of the time window.</returns>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.CepCheckpointableProcessExtensions">
      <summary> Extension methods supporting creation of checkpointable processes. </summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepCheckpointableProcessExtensions.RunCheckpointable(Microsoft.ComplexEventProcessing.Linq.IRemoteStreamableBinding,System.String)">
      <summary> Constructs a checkpointable process given a binding between temporal stream producers and consumers. </summary>
      <returns>Checkpointable process.</returns>
      <param name="binding">Binding definition.</param>
      <param name="id">Identifier for the resulting process.</param>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.CepEvent">
      <summary>Provides access to the start time with expressions that can only refer to the start time of an event.</summary>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.Linq.CepEvent.StartTime">
      <summary>Gets the start time of the event.</summary>
      <returns>The start time of the event. </returns>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.CepEvent`1">
      <summary>Allows to specify lambda expressions for event duration changes. It provides access to start time, end time, and event payload.</summary>
      <typeparam name="TPayload"></typeparam>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.Linq.CepEvent`1.EndTime">
      <summary>Gets the end time of the event.</summary>
      <returns>A <see cref="T:DateTime" /> object that represents the end time of the event.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.Linq.CepEvent`1.Payload">
      <summary>Gets the event payload.</summary>
      <returns>An object that represents the event payload.</returns>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.CepGroupingStreams`2">
      <summary> Represents a group of streams. </summary>
      <typeparam name="TPayload">Payload type.</typeparam>
      <typeparam name="TGroupingKey">Payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepGroupingStreams`2.ApplyWithUnion``1(System.Linq.Expressions.Expression{System.Func{Microsoft.ComplexEventProcessing.Linq.CepStream{`0},Microsoft.ComplexEventProcessing.Linq.CepStream{``0}}})">
      <summary> Applies the query logic specified by the applybranch parameter to a grouped stream.  Produces a result stream per group and unions all result streams together. </summary>
      <returns>Stream with TApplyOutput as the event payload type.</returns>
      <param name="applybranch">Query to be applied to each group.</param>
      <typeparam name="TApplyOutput">Event payload type at the output of the apply.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepGroupingStreams`2.ApplyWithUnion``2(System.Linq.Expressions.Expression{System.Func{Microsoft.ComplexEventProcessing.Linq.CepStream{`0},Microsoft.ComplexEventProcessing.Linq.CepStream{``1}}},System.Linq.Expressions.Expression{System.Func{Microsoft.ComplexEventProcessing.Linq.KeyedPayload{`1,``1},``0}})">
      <summary> Applies the query logic specified by the applybranch parameter to a grouped stream.  Produces a result stream per group and unions all result streams together. The selector parameter is a lambda expression that allows additional  project operations on the output and provides access to grouping fields. </summary>
      <returns>A stream with TApplyOutput as event payload type.</returns>
      <param name="applybranch">The query to be applied to each group.</param>
      <param name="selector">The lambda expression for projections of the output.</param>
      <typeparam name="TUnionOutput">The event type at the output of the group union.</typeparam>
      <typeparam name="TApplyOutput">The event payload type at the output of the apply.</typeparam>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.CepOrderableStream`1">
      <summary>Represents a stream of events that can be ordered.</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.CepOrderedStream`1">
      <summary>An ordered stream is the result of an "order by" or one of its variants in the query. It helps constrain subsequent query specification to operations that are allowed on an ordered stream, such as Take.</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.CepRankedEvent`1">
      <summary>Exposes a rank along with the event payload over a ranked stream using Take. </summary>
      <typeparam name="P"></typeparam>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.Linq.CepRankedEvent`1.Payload">
      <summary>Gets the payload of the event.</summary>
      <returns>The payload of the event.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.Linq.CepRankedEvent`1.Rank">
      <summary>Gets the rank of the event.</summary>
      <returns>The rank of the event.</returns>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.CepStream">
      <summary> Provides the extension methods used for writing LINQ queries over a stream of CEP events. </summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.AlterEventDuration``1(Microsoft.ComplexEventProcessing.Linq.CepStream{``0},System.Linq.Expressions.Expression{System.Func{Microsoft.ComplexEventProcessing.Linq.CepEvent{``0},System.TimeSpan}})">
      <summary>Changes the duration of the input events. This method does not change the start time of an event.</summary>
      <returns>A stream with new event durations. </returns>
      <param name="source">The stream that contains the events whose duration is going to be changed.</param>
      <param name="eventDurationFunc">The expression that defines the new event duration. </param>
      <typeparam name="TPayload">The type of payload in input stream.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.AlterEventLifetime``1(Microsoft.ComplexEventProcessing.Linq.CepStream{``0},System.Linq.Expressions.Expression{System.Func{Microsoft.ComplexEventProcessing.Linq.CepEvent,System.DateTime}},System.Linq.Expressions.Expression{System.Func{Microsoft.ComplexEventProcessing.Linq.CepEvent{``0},System.TimeSpan}})">
      <summary>Alters the lifetime of the events in the stream. This method can change both the start time and end time of an event.</summary>
      <returns>A new stream with changed event lifetimes. </returns>
      <param name="source">The input stream. </param>
      <param name="startTimeFunc">The function that defines the new event start time given an event.</param>
      <param name="lifeTimeFunc">The function that defines the new event life time given an event.</param>
      <typeparam name="TPayload">The type of the input event payload. </typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.ClipEventDuration``2(Microsoft.ComplexEventProcessing.Linq.CepStream{``0},Microsoft.ComplexEventProcessing.Linq.CepStream{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
      <summary> Shortens the lifetime of events in <paramref name="sourceStream" /> to the start time of the next corresponding event in <paramref name="clipStream" />, matched by <paramref name="matchExpression" />. </summary>
      <returns>An event stream with clipped lifetimes.</returns>
      <param name="sourceStream">The stream that contains the events to be clipped.</param>
      <param name="clipStream">The stream that contains the events that determine the clipping behavior for <paramref name="sourceStream" />.</param>
      <param name="matchExpression">The expression used to match events from <paramref name="sourceStream" /> and <paramref name="clipStream" />.</param>
      <typeparam name="TSource">The type of payload in <paramref name="sourceStream" />.</typeparam>
      <typeparam name="TClip">The type of payload in clip stream.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.CountByStartTimeWindow``1(Microsoft.ComplexEventProcessing.Linq.CepStream{``0},System.UInt32)">
      <summary>Groups input stream events into windows of events based on a given number of unique event start times using the default output policy. The window slides when a new event arrives that starts at a different time.</summary>
      <returns>A window stream to which aggregates, ranking or user-defined operations can be applied.</returns>
      <param name="source">The CepStream to apply the window operation against.</param>
      <param name="numberOfEventStartTime">The window size by number of unique event start times.</param>
      <typeparam name="TPayload">The type of the input event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.CountByStartTimeWindow``1(Microsoft.ComplexEventProcessing.Linq.CepStream{``0},System.UInt32,Microsoft.ComplexEventProcessing.Linq.CountWindowOutputPolicy)">
      <summary>Groups input stream events into windows of events based on a given number of unique event start times. The window slides when a new event arrives that starts at a different time.</summary>
      <returns>A window stream to which aggregates, ranking or user-defined operations can be applied.</returns>
      <param name="source">The CepStream to apply the window operation against.</param>
      <param name="numberOfEventStartTime">The window size by number of unique event start times.</param>
      <param name="outputPolicy">Indicates how output events of the window operation are altered or defined before they are introduced back into the stream.</param>
      <typeparam name="TPayload">The type of the input event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.CountByStartTimeWindow``1(Microsoft.ComplexEventProcessing.Linq.CepStream{``0},System.UInt32,Microsoft.ComplexEventProcessing.Linq.WindowInputPolicy,Microsoft.ComplexEventProcessing.Linq.CountWindowOutputPolicy)">
      <summary>Groups input stream events into windows of events based on a given number of unique event start times. The window slides when a new event arrives that starts at a different time.</summary>
      <returns>A window stream to which aggregates, ranking or user-defined operations can be applied.</returns>
      <param name="source">The CepStream to apply the window operation against.</param>
      <param name="numberOfEventStartTime">The window size by number of unique event start times.</param>
      <param name="inputPolicy">Indicates how events are altered before being input into the window operation.</param>
      <param name="outputPolicy">Indicates how output events of the window operation are altered or defined before they are introduced back into the stream.</param>
      <typeparam name="TPayload">The type of the input event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.GroupBy``2(Microsoft.ComplexEventProcessing.Linq.CepStream{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Partitions the input stream by the specified grouping key.</summary>
      <returns>The groups of streams.</returns>
      <param name="source">The input stream. </param>
      <param name="keySelector">The expressions for projecting the grouping key. </param>
      <typeparam name="TPayload">The payload type of the input events. </typeparam>
      <typeparam name="TGroupingKey">The grouping key event type. </typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.GroupBy``3(Microsoft.ComplexEventProcessing.Linq.CepStream{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
      <summary>Groups the source stream by the specified key selector functions and projects results using the element selector function.</summary>
      <returns>The groups of streams.</returns>
      <param name="source">The input stream.</param>
      <param name="keySelector">The expression that defines key value.</param>
      <param name="selector">The expression that projects the results.</param>
      <typeparam name="TPayload">The payload type of input events.</typeparam>
      <typeparam name="TGroupingKey">The grouping key event type.</typeparam>
      <typeparam name="TResult">The payload type of result events.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.HoppingWindow``1(Microsoft.ComplexEventProcessing.Linq.CepStream{``0},System.TimeSpan,System.TimeSpan)">
      <summary>Transforms a stream to a window stream where each member is a CepWindow using the default output policy.</summary>
      <returns>A window stream to which aggregates, ranking, or user-defined operations can be applied to.</returns>
      <param name="source">The CepStream to apply the HoppingWindow operation against.</param>
      <param name="windowSize">The length of the window.</param>
      <param name="hopSize">The hop size of the window.</param>
      <typeparam name="TPayload">The type of the input event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.HoppingWindow``1(Microsoft.ComplexEventProcessing.Linq.CepStream{``0},System.TimeSpan,System.TimeSpan,Microsoft.ComplexEventProcessing.Linq.HoppingWindowOutputPolicy)">
      <summary>Transforms a stream to a window stream where each member is a CepWindow using the default output policy.</summary>
      <returns>A window stream to which aggregates, ranking, or user-defined operations can be applied to.</returns>
      <param name="source">The CepStream to apply the HoppingWindow operation against.</param>
      <param name="windowSize">The length of the window.</param>
      <param name="hopSize">The hop size of the window.</param>
      <param name="outputPolicy">Indicates how the output events of the window operation are altered.</param>
      <typeparam name="TPayload">The type of the input event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.HoppingWindow``1(Microsoft.ComplexEventProcessing.Linq.CepStream{``0},System.TimeSpan,System.TimeSpan,Microsoft.ComplexEventProcessing.Linq.WindowInputPolicy,Microsoft.ComplexEventProcessing.Linq.HoppingWindowOutputPolicy)">
      <summary>Transforms a stream to a window stream where each member is a CepWindow using the default output policy.</summary>
      <returns>A window stream to which aggregates, TopK, or user-defined operators (UDOs) can be applied to.</returns>
      <param name="source">The CepStream to apply the HoppingWindow operation against.</param>
      <param name="windowSize">The length of the window.</param>
      <param name="hopSize">The hop size of the window.</param>
      <param name="inputPolicy">Indicates how events are altered before being input into the window operation.</param>
      <param name="outputPolicy">Indicates how the output events of the window operation are altered.</param>
      <typeparam name="TPayload">The type of the input event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.HoppingWindow``1(Microsoft.ComplexEventProcessing.Linq.CepStream{``0},System.TimeSpan,System.TimeSpan,System.DateTime)">
      <summary>Transforms a stream to a window stream where each member is a CepWindow using the default output policy.</summary>
      <returns>A window stream to which aggregates, ranking, or user-defined operations can be applied to.</returns>
      <param name="source">The CepStream to apply the HoppingWindow operation against.</param>
      <param name="windowSize">The length of the window.</param>
      <param name="hopSize">The hop size of the window.</param>
      <param name="alignment">The reference time to align window start times.</param>
      <typeparam name="TPayload">The type of the input event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.HoppingWindow``1(Microsoft.ComplexEventProcessing.Linq.CepStream{``0},System.TimeSpan,System.TimeSpan,System.DateTime,Microsoft.ComplexEventProcessing.Linq.HoppingWindowOutputPolicy)">
      <summary>Transforms a stream to a window stream where each member is a CepWindow.</summary>
      <returns>A window stream to which aggregates, ranking, or user-defined operations can be applied to.</returns>
      <param name="source">The CepStream to apply the HoppingWindow operation against.</param>
      <param name="windowSize">The length of the window.</param>
      <param name="hopSize">The hop size of the window.</param>
      <param name="alignment">The reference time to align window start times.</param>
      <param name="outputPolicy">Indicates how output events of the window operation are altered before they are introduced back into the stream.</param>
      <typeparam name="TPayload">The type of the input event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.HoppingWindow``1(Microsoft.ComplexEventProcessing.Linq.CepStream{``0},System.TimeSpan,System.TimeSpan,System.DateTime,Microsoft.ComplexEventProcessing.Linq.WindowInputPolicy,Microsoft.ComplexEventProcessing.Linq.HoppingWindowOutputPolicy)">
      <summary>The window is defined by constant window size and hop size timespans.</summary>
      <returns>A window stream to which aggregates, ranking or user-defined operations can be applied to.Returns.</returns>
      <param name="source">The CepStream to apply the HoppingWindow operation against.</param>
      <param name="windowSize">The length of the window.</param>
      <param name="hopSize">The hop size of the window.</param>
      <param name="alignment">The reference time to align window start times.</param>
      <param name="inputPolicy">Indicates how events are altered before being input into the window operation.</param>
      <param name="outputPolicy">Indicates how output events of the window operation are altered before they are introduced back into the stream.</param>
      <typeparam name="TPayload">The type of the input event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.IsEmpty``1(Microsoft.ComplexEventProcessing.Linq.CepStream{``0})">
      <summary>Performs a left anti-semi-join (LASJ) query on the specified stream.</summary>
      <returns>A new stream with the events' time changed.</returns>
      <param name="source">The input stream.</param>
      <typeparam name="TPayload">The input event payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.Join``4(Microsoft.ComplexEventProcessing.Linq.CepStream{``0},Microsoft.ComplexEventProcessing.Linq.CepStream{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
      <summary>Joins the events from the outer stream with events from the inner stream on the given join key.</summary>
      <returns>A stream of joined events. </returns>
      <param name="outer">The outer stream.</param>
      <param name="inner">The inner stream.</param>
      <param name="outerKeySelector">The selector to select the key values from outer stream event.</param>
      <param name="innerKeySelector">The selector to select the key value from inner stream event.</param>
      <param name="selector">The mapping expression that defines a projection on the output. </param>
      <typeparam name="TOuter">The outer stream event type.</typeparam>
      <typeparam name="TInner">The inner stream event type.</typeparam>
      <typeparam name="TKey">The join key type.</typeparam>
      <typeparam name="TResult">The join result type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.OrderBy``2(Microsoft.ComplexEventProcessing.Linq.CepOrderableStream{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Orders the input stream by the <paramref name="rankSelector" />.</summary>
      <returns>An ordered stream that can furthur be ranked, for example, by using Take(). </returns>
      <param name="source">The stream source to order against.</param>
      <param name="rankSelector">The ranking expression whose value is used to compare events against each other.</param>
      <typeparam name="TPayload">The payload type of input events.</typeparam>
      <typeparam name="TOrderKey">The type of the ordering key.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.OrderByDescending``2(Microsoft.ComplexEventProcessing.Linq.CepOrderableStream{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Orders the input stream by the <paramref name="rankSelector" /> in descending order.</summary>
      <returns>An ordered stream that can furthur be ranked, for example, by using Take().</returns>
      <param name="source">The stream source to order against.</param>
      <param name="rankSelector">The expression whose value is used to compare events against each other.</param>
      <typeparam name="TPayload">The payload type of input events.</typeparam>
      <typeparam name="TOrderKey">The type of the ordering key.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.Scan``3(Microsoft.ComplexEventProcessing.Linq.CepStream{``1},Microsoft.ComplexEventProcessing.Extensibility.CepStreamOperator{``0,``1,``2})">
      <summary>Scans an input stream using a user-defined stream operator.</summary>
      <returns>The stream produced by the user-defined stream operator.</returns>
      <param name="source">The CepStream to scan.</param>
      <param name="initialState">The initial state of the user-defined stream operator.</param>
      <typeparam name="TInputEvent">The type of the input event.</typeparam>
      <typeparam name="TInputPayload">The type of the input event payload.</typeparam>
      <typeparam name="TOutputPayload">The type of the output event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.Select``2(Microsoft.ComplexEventProcessing.Linq.CepOrderedStream{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Given an ordered stream, this method produces an ordered stream that can be used for ranking.</summary>
      <returns>An ordered stream. </returns>
      <param name="source">The input stream. </param>
      <param name="selector">The mapping to produce the result event type.</param>
      <typeparam name="TInput">The payload type of input events.</typeparam>
      <typeparam name="TResult">The payload type of result events. </typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.Select``2(Microsoft.ComplexEventProcessing.Linq.CepStream{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Projects events from input stream using a projections expression.</summary>
      <returns>The stream of projected input events. </returns>
      <param name="source">The input stream. </param>
      <param name="selector">The mapping functions that defines the projection over the input events. </param>
      <typeparam name="TPayload">The type of the input event payload. </typeparam>
      <typeparam name="TResult">The type of the result event payload. </typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.Select``2(Microsoft.ComplexEventProcessing.Linq.CepWindowStream{Microsoft.ComplexEventProcessing.Linq.CepWindow{``0}},System.Linq.Expressions.Expression{System.Func{Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},``1}})">
      <summary>Maps a window stream to a stream based on a given mapping expression.</summary>
      <returns>A stream which is the union of all window streams. </returns>
      <param name="source">The stream of windows. </param>
      <param name="selector">Defines the mapping expression. </param>
      <typeparam name="TInput">The input event payload type of the window. </typeparam>
      <typeparam name="TResult">The result payload type. </typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.Select``2(Microsoft.ComplexEventProcessing.Linq.ICepEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Projects each event of an enumerable input stream into a new event.</summary>
      <returns>The enumerable stream of projected results.</returns>
      <param name="source">The enumerable source to be projected. This parameter cannot be null.</param>
      <param name="selector">The projection selector. This parameter cannot be null.</param>
      <typeparam name="TInput">Type of the source.</typeparam>
      <typeparam name="TOutput">Type of the result.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.SelectMany``4(Microsoft.ComplexEventProcessing.Linq.CepGroupingStreams{``0,``1},System.Linq.Expressions.Expression{System.Func{Microsoft.ComplexEventProcessing.Linq.CepStream{``0},Microsoft.ComplexEventProcessing.Linq.CepStream{``2}}},System.Linq.Expressions.Expression{System.Func{Microsoft.ComplexEventProcessing.Linq.IKey{``1},``2,``3}})">
      <summary> Supports adding query logic inside a Group and Apply.  </summary>
      <returns>A stream that can be used for further apply logic in the Group and Apply.</returns>
      <param name="source">The stream source.</param>
      <param name="bind">The bind information that bind the second stream to the first stream.</param>
      <param name="selector">The mapping expression that defines a projection on the output.</param>
      <typeparam name="TInput">The payload type of input events. </typeparam>
      <typeparam name="TGroupingKey">The payload type of grouping key events. </typeparam>
      <typeparam name="TBind">The payload type of bound events. </typeparam>
      <typeparam name="TResult">The payload type of result events. </typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.SelectMany``4(Microsoft.ComplexEventProcessing.Linq.CepGroupingStreams{``0,``1},System.Linq.Expressions.Expression{System.Func{Microsoft.ComplexEventProcessing.Linq.CepStream{``0},Microsoft.ComplexEventProcessing.Linq.CepWindowStream{``2}}},System.Linq.Expressions.Expression{System.Func{Microsoft.ComplexEventProcessing.Linq.IKey{``1},``2,``3}})">
      <summary> Enables window operations on top of a grouping stream. </summary>
      <returns>A stream that is the result of select many and the window operation. </returns>
      <param name="source">The grouping stream source. </param>
      <param name="bind">The binding from grouping stream to window streaming. </param>
      <param name="selector">The mapping expression that defines a projection on the output. </param>
      <typeparam name="TInput">The payload type of input events. </typeparam>
      <typeparam name="TGroupingKey">The payload type of the grouping key. </typeparam>
      <typeparam name="TBind">The payload type of bound events. </typeparam>
      <typeparam name="TResult">The payload type of result events. </typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.SelectMany``3(Microsoft.ComplexEventProcessing.Linq.CepStream{``0},System.Linq.Expressions.Expression{System.Func{Microsoft.ComplexEventProcessing.Linq.CepStream{``0},Microsoft.ComplexEventProcessing.Linq.CepStream{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary> Produces a stream based on the cross join of two input streams. </summary>
      <returns>A stream where the result is a cross join of the outer and inner stream. </returns>
      <param name="source">The outer input stream. </param>
      <param name="bind">The inner input stream. </param>
      <param name="selector">The mapping expression that defines a projection on the output. </param>
      <typeparam name="TInput">The payload type of events from the outer input stream. </typeparam>
      <typeparam name="TBind">The payload type of events from the inner input stream. </typeparam>
      <typeparam name="TResult">The payload type of result events. </typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.SelectMany``2(Microsoft.ComplexEventProcessing.Linq.CepWindowStream{Microsoft.ComplexEventProcessing.Linq.CepWindow{``0}},System.Linq.Expressions.Expression{System.Func{Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},Microsoft.ComplexEventProcessing.Linq.CepWindow{``0}}},System.Linq.Expressions.Expression{System.Func{Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},``0,``1}})">
      <summary>Supports order by operation against a windowed stream.</summary>
      <returns>A stream that can be ordered. </returns>
      <param name="source">The stream source. </param>
      <param name="bind">The bind expression to bind elements in the two "from" clauses. </param>
      <param name="selector">The result selector. </param>
      <typeparam name="TInput">The type of the input event payload. </typeparam>
      <typeparam name="TResult">The type of output event payload. </typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.ShiftEventTime``1(Microsoft.ComplexEventProcessing.Linq.CepStream{``0},System.Linq.Expressions.Expression{System.Func{Microsoft.ComplexEventProcessing.Linq.CepEvent,System.DateTime}})">
      <summary>Shift event times to the value specified by the <paramref name="shiftExpr" /> parameter. The method does not change event life times.  </summary>
      <returns>A stream with shifted event start times. </returns>
      <param name="source">The input stream. </param>
      <param name="shiftExpr">The expression that defines the new event time.</param>
      <typeparam name="TPayload">The type of the input event payload. </typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.ShiftEventTime``1(Microsoft.ComplexEventProcessing.Linq.CepStream{``0},System.Linq.Expressions.Expression{System.Func{Microsoft.ComplexEventProcessing.Linq.CepEvent,System.TimeSpan}})">
      <summary> Shift event times by the amount specified by the <paramref name="shiftExpr" /> parameter. The value returned may be positive or negative. </summary>
      <returns>A stream with shifted event start times. </returns>
      <param name="source">The input stream. </param>
      <param name="shiftExpr">The expression that defines the time span to shift. </param>
      <typeparam name="TPayload">The type of the input event payload. </typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.SnapshotWindow``1(Microsoft.ComplexEventProcessing.Linq.CepStream{``0})">
      <summary>Transforms a stream to a window stream where each member is a CepWindow using the default output policy.</summary>
      <returns>A window stream to which aggregates, ranking or user-defined operations can be applied.</returns>
      <param name="source">The CepStream to apply the Snapshot operation against.</param>
      <typeparam name="TPayload">The type of the input event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.SnapshotWindow``1(Microsoft.ComplexEventProcessing.Linq.CepStream{``0},Microsoft.ComplexEventProcessing.Linq.SnapshotWindowOutputPolicy)">
      <summary>Transforms a stream to a window stream where each member is a CepWindow.</summary>
      <returns>A window stream to which aggregates, ranking or user-defined operations can be applied.</returns>
      <param name="source">The CepStream to apply the Snapshot operation against.</param>
      <param name="outputPolicy">Indicates how the output events of the window operation are altered they are introduced back into the stream.</param>
      <typeparam name="TPayload">The type of the input event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.SnapshotWindow``1(Microsoft.ComplexEventProcessing.Linq.CepStream{``0},Microsoft.ComplexEventProcessing.Linq.WindowInputPolicy,Microsoft.ComplexEventProcessing.Linq.SnapshotWindowOutputPolicy)">
      <summary>Transforms a stream to a window stream where each member is a CepWindow.</summary>
      <returns>A window stream to which aggregates, ranking or user-defined operations can be applied.</returns>
      <param name="source">The CepStream to apply the snapshot operation against.</param>
      <param name="inputPolicy">Indicates how events are altered before being fed into the window operation.</param>
      <param name="outputPolicy">Indicates how the output events of the window operation are altered they are introduced back into the stream.</param>
      <typeparam name="TPayload">The type of the input event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.Take``2(Microsoft.ComplexEventProcessing.Linq.CepOrderedStream{``0},System.UInt32,System.Linq.Expressions.Expression{System.Func{Microsoft.ComplexEventProcessing.Linq.CepRankedEvent{``0},``1}})">
      <summary>Takes a given number of events from each window and also evaluate the given expression. This is used for cases in which you want to project the rank into the result of Take().</summary>
      <returns>A stream that is the result of Take().</returns>
      <param name="source">The input stream to take events from.</param>
      <param name="numberOfElements">The number of elements to take.</param>
      <param name="resultSelector">The project expression to project the ranking into the result.</param>
      <typeparam name="TInput">The payload type of input events. </typeparam>
      <typeparam name="TResult">The payload type of output events. </typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.Take``1(Microsoft.ComplexEventProcessing.Linq.CepOrderedStream{``0},System.UInt32)">
      <summary>Given an ordered stream, takes a given number of events from each window.</summary>
      <returns>A stream with a given number of events taken from each window.</returns>
      <param name="source">The input stream.</param>
      <param name="numberOfElements">The number of elements to take from each window.</param>
      <typeparam name="TPayload">The payload type of input events.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.ThenBy``2(Microsoft.ComplexEventProcessing.Linq.CepOrderedStream{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Orders an ordered stream by another order key as indicated by <paramref name="rankSelector" />.</summary>
      <returns>An ordered stream that can furthur be ranked, for example, by using Take().</returns>
      <param name="source">The stream source to order against.</param>
      <param name="rankSelector">The expression whose value is used to compare events against each other.</param>
      <typeparam name="TPayload">The payload type of input events. </typeparam>
      <typeparam name="TOrderKey">The type of the ordering key.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.ThenByDescending``2(Microsoft.ComplexEventProcessing.Linq.CepOrderedStream{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary> Orders an ordered stream by another order key as indicated by <paramref name="rankSelector" />. </summary>
      <returns>An ordered stream that can furthur be ranked, for example, by using Take().</returns>
      <param name="source">The stream source to order against.</param>
      <param name="rankSelector">The expression whose value is used to compare events against each other.</param>
      <typeparam name="TPayload">The payload type of input events.</typeparam>
      <typeparam name="TOrderKey">The type of the ordering key.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.ToEdgeEnumerable``1(Microsoft.ComplexEventProcessing.Linq.CepStream{``0})">
      <summary>Converts a CepStream of edge events to an event sink that implements the IEnumerable interface.</summary>
      <returns>An event sink that supports iteration.</returns>
      <param name="stream">The fully bound event source from which the enumerable event sink is created.</param>
      <typeparam name="TPayload">The type of the event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.ToEdgeEnumerable``1(Microsoft.ComplexEventProcessing.Linq.CepStream{``0},Microsoft.ComplexEventProcessing.StreamEventOrder)">
      <summary>Converts a CepStream of edge events to an event sink that implements the IEnumerable interface.</summary>
      <returns>An event sink that supports iteration.</returns>
      <param name="stream">The fully bound event source from which the enumerable event sink is created.</param>
      <param name="streamEventOrder">One of the enumeration values that specifies how events are ordered.</param>
      <typeparam name="TPayload">The type of the event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.ToEdgeStream``2(System.Collections.Generic.IEnumerable{``0},Microsoft.ComplexEventProcessing.Application,System.Linq.Expressions.Expression{System.Func{``0,Microsoft.ComplexEventProcessing.EdgeEvent{``1}}},Microsoft.ComplexEventProcessing.AdvanceTimeSettings,System.String)">
      <summary>Converts an enumerable input stream to a stream of edge events, and provides the temporal characteristics of the input.</summary>
      <returns>A stream of edge events.</returns>
      <param name="source">The enumerable input stream.</param>
      <param name="application">An application instance that hosts the event source. This parameter cannot be null. The application must belong to an embedded server that was generated by calling one of the overloads of Server.Create.</param>
      <param name="selector">An expression that reshapes the input as a stream of edge events.</param>
      <param name="advanceTimeSettings">The temporal characteristics of the input.</param>
      <param name="streamName">A stream name supports “importing” CTI events from one stream to another using AdvanceTimeImportSettings.</param>
      <typeparam name="TInput">The type of the input.</typeparam>
      <typeparam name="TPayload">The type of the event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.ToEnumerable``1(Microsoft.ComplexEventProcessing.Linq.CepStream{``0})">
      <summary>Converts a stream of events to enumerable output by removing event headers and discarding CTI events.</summary>
      <returns>An enumerable output.</returns>
      <param name="stream">The stream of events to convert.</param>
      <typeparam name="TPayload">The type of the event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.ToEnumerable``1(Microsoft.ComplexEventProcessing.Linq.CepStream{``0},Microsoft.ComplexEventProcessing.StreamEventOrder)">
      <summary>Converts a stream of events to enumerable output with the specified event order by removing event headers and discarding CTI events.</summary>
      <returns>An enumerable output.</returns>
      <param name="stream">The stream of events to convert.</param>
      <param name="streamEventOrder">The order of the events in the output.</param>
      <typeparam name="TPayload">The type of the event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.ToIntervalEnumerable``1(Microsoft.ComplexEventProcessing.Linq.CepStream{``0})">
      <summary>Converts a CepStream of interval events to an event sink that implements the IEnumerable interface. The order of events is FullyOrdered.</summary>
      <returns>An event sink that supports iteration.</returns>
      <param name="stream">The fully bound event source from which the enumerable event sink is created.</param>
      <typeparam name="TPayload">The type of the event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.ToIntervalEnumerable``1(Microsoft.ComplexEventProcessing.Linq.CepStream{``0},Microsoft.ComplexEventProcessing.StreamEventOrder)">
      <summary>Converts a CepStream of interval events with the specified event order to an event sink that implements the IEnumerable interface.</summary>
      <returns>An event sink that supports iteration.</returns>
      <param name="stream">The fully bound event source from which the enumerable event sink is created.</param>
      <param name="streamEventOrder">One of the enumeration values that specifies how events are ordered.</param>
      <typeparam name="TPayload">The type of the event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.ToIntervalStream``2(System.Collections.Generic.IEnumerable{``0},Microsoft.ComplexEventProcessing.Application,System.Linq.Expressions.Expression{System.Func{``0,Microsoft.ComplexEventProcessing.IntervalEvent{``1}}},Microsoft.ComplexEventProcessing.AdvanceTimeSettings,System.String)">
      <summary>Converts an enumerable input stream to a stream of interval events, and provides the temporal characteristics of the input.</summary>
      <returns>A stream of interval events.</returns>
      <param name="source">The enumerable input stream.</param>
      <param name="application">An application instance that hosts the event source.</param>
      <param name="selector">An expression that reshapes the input as a stream of interval events.</param>
      <param name="advanceTimeSettings">The temporal characteristics of the input.</param>
      <param name="streamName">A stream name supports “importing” CTI events from one stream to another using AdvanceTimeImportSettings.</param>
      <typeparam name="TInput">The type of the input.</typeparam>
      <typeparam name="TPayload">The type of the event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.ToPointEnumerable``1(Microsoft.ComplexEventProcessing.Linq.CepStream{``0})">
      <summary>Converts a CepStream of point events to an event sink that implements the IEnumerable interface. The order of events is FullyOrdered.</summary>
      <returns>An event sink that supports iteration.</returns>
      <param name="stream">The fully bound event source from which the enumerable event sink is created.</param>
      <typeparam name="TPayload">The type of the event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.ToPointEnumerable``1(Microsoft.ComplexEventProcessing.Linq.CepStream{``0},Microsoft.ComplexEventProcessing.StreamEventOrder)">
      <summary>Converts a CepStream of point events with the specified event order to an event sink that implements the IEnumerable interface.</summary>
      <returns>An event sink that supports iteration.</returns>
      <param name="stream">The fully bound event source from which the enumerable event sink is created.</param>
      <param name="streamEventOrder">One of the enumeration values that specifies how events are ordered.</param>
      <typeparam name="TPayload">The type of the event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.ToPointEventStream``1(Microsoft.ComplexEventProcessing.Linq.CepStream{``0})">
      <summary>Changes the events in an input stream to point events by keeping only the event start times.</summary>
      <returns>A stream with events converted to point events.</returns>
      <param name="source">The input stream.</param>
      <typeparam name="TPayload">The type of the input event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.ToPointStream``2(System.Collections.Generic.IEnumerable{``0},Microsoft.ComplexEventProcessing.Application,System.Linq.Expressions.Expression{System.Func{``0,Microsoft.ComplexEventProcessing.PointEvent{``1}}},Microsoft.ComplexEventProcessing.AdvanceTimeSettings,System.String)">
      <summary>Converts a CepStream of point events to an event sink.</summary>
      <returns>A stream of point events.</returns>
      <param name="source">The enumerable input stream.</param>
      <param name="application">An application instance that hosts the event source.</param>
      <param name="selector">An expression that reshapes the input as a stream of point events.</param>
      <param name="advanceTimeSettings">Temporal characteristics of the input.</param>
      <param name="streamName">A stream name supports “importing” CTI events from one stream to another using AdvanceTimeImportSettings.</param>
      <typeparam name="TInput">The type of the input.</typeparam>
      <typeparam name="TPayload">The type of the event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.ToStream``1(System.Collections.Generic.IEnumerable{Microsoft.ComplexEventProcessing.EdgeEvent{``0}},Microsoft.ComplexEventProcessing.Application,Microsoft.ComplexEventProcessing.AdvanceTimeSettings,System.String)">
      <summary>Converts a CepStream of point events to a stream.</summary>
      <returns>A stream definition for the enumerable event source that can be used to compose queries.</returns>
      <param name="source">The event source that implements the IEnumerable interface. This parameter cannot be null.</param>
      <param name="application">An application instance that hosts the event source.</param>
      <param name="advanceTimeSettings">Specifies how to advance application time for the event source.</param>
      <param name="streamName">A stream name supports “importing” CTI events from one stream to another using AdvanceTimeImportSettings.</param>
      <typeparam name="TPayload">The type of the event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.ToStream``1(System.Collections.Generic.IEnumerable{Microsoft.ComplexEventProcessing.IntervalEvent{``0}},Microsoft.ComplexEventProcessing.Application,Microsoft.ComplexEventProcessing.AdvanceTimeSettings,System.String)">
      <summary>Converts a CepStream of point events to a stream.</summary>
      <returns>A stream definition for the enumerable event source that can be used to compose queries.</returns>
      <param name="source">The event source that implements the IEnumerable interface.</param>
      <param name="application">An application instance that hosts the event source.</param>
      <param name="advanceTimeSettings">Specifies how to advance application time for the event source.</param>
      <param name="streamName">A stream name supports “importing” CTI events from one stream to another using AdvanceTimeImportSettings.</param>
      <typeparam name="TPayload">The type of the event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.ToStream``1(System.Collections.Generic.IEnumerable{Microsoft.ComplexEventProcessing.PointEvent{``0}},Microsoft.ComplexEventProcessing.Application,Microsoft.ComplexEventProcessing.AdvanceTimeSettings,System.String)">
      <summary>Converts a CepStream of point events to a stream.</summary>
      <returns>A stream definition for the enumerable event source that can be used to compose queries.</returns>
      <param name="source">The event source that implements the IEnumerable interface.</param>
      <param name="application">An application instance that hosts the event source.</param>
      <param name="advanceTimeSettings">Specifies how to advance application time for the event source.</param>
      <param name="streamName">A stream name supports “importing” CTI events from one stream to another using AdvanceTimeImportSettings.</param>
      <typeparam name="TPayload">The type of the event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.TumblingWindow``1(Microsoft.ComplexEventProcessing.Linq.CepStream{``0},System.TimeSpan)">
      <summary>Transforms a stream to a window stream where each member is a CepWindow using the default output policy.</summary>
      <returns>A window stream to which aggregates, ranking or user-defined operations can be applied.</returns>
      <param name="source">The CepStream to apply the TumblingWindow operation against.</param>
      <param name="windowSize">The length and hop size of the window.</param>
      <typeparam name="TPayload">The type of the input event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.TumblingWindow``1(Microsoft.ComplexEventProcessing.Linq.CepStream{``0},System.TimeSpan,Microsoft.ComplexEventProcessing.Linq.HoppingWindowOutputPolicy)">
      <summary>Transforms a stream to a window stream where each member is a CepWindow.</summary>
      <returns>A window stream to which aggregates, ranking or user-defined operations can be applied.</returns>
      <param name="source">The CepStream to apply the TumblingWindow operation against.</param>
      <param name="windowSize">The length and hop size of the window.</param>
      <param name="outputPolicy">Indicates how output events coming output of window operation are altered.</param>
      <typeparam name="TPayload">The type of the input event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.TumblingWindow``1(Microsoft.ComplexEventProcessing.Linq.CepStream{``0},System.TimeSpan,Microsoft.ComplexEventProcessing.Linq.WindowInputPolicy,Microsoft.ComplexEventProcessing.Linq.HoppingWindowOutputPolicy)">
      <summary>Transforms a stream to a window stream where each member is a CepWindow.</summary>
      <returns>A window stream to which aggregates, ranking or user-defined operations can be applied.</returns>
      <param name="source">The CepStream to apply the TumblingWindow operation against.</param>
      <param name="windowSize">The length and hop size of the window.</param>
      <param name="inputPolicy">Indicates how events are altered before being input into the window operation.</param>
      <param name="outputPolicy">Indicates how output events of the window operation are altered.</param>
      <typeparam name="TPayload">The type of the input event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.TumblingWindow``1(Microsoft.ComplexEventProcessing.Linq.CepStream{``0},System.TimeSpan,System.DateTime)">
      <summary>Transforms a stream to a window stream where each member is a CepWindow using the default output policy.</summary>
      <returns>A window stream to which aggregates, ranking or user-defined operations can be applied.</returns>
      <param name="source">The CepStream to apply the TumblingWindow operation against.</param>
      <param name="windowSize">The length and hop size of the window.</param>
      <param name="alignment">The reference time to align window start times.</param>
      <typeparam name="TPayload">The type of the input event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.TumblingWindow``1(Microsoft.ComplexEventProcessing.Linq.CepStream{``0},System.TimeSpan,System.DateTime,Microsoft.ComplexEventProcessing.Linq.HoppingWindowOutputPolicy)">
      <summary>Transforms a stream to a window stream where each member is a CepWindow.</summary>
      <returns>A window stream to which aggregates, ranking or user-defined operations can be applied.</returns>
      <param name="source">The CepStream to apply the TumblingWindow operation against.</param>
      <param name="windowSize">The length and hop size of the window.</param>
      <param name="alignment">The reference time to align window start times.</param>
      <param name="outputPolicy">Indicates how output events of the window operation are altered.</param>
      <typeparam name="TPayload">The type of the input event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.TumblingWindow``1(Microsoft.ComplexEventProcessing.Linq.CepStream{``0},System.TimeSpan,System.DateTime,Microsoft.ComplexEventProcessing.Linq.WindowInputPolicy,Microsoft.ComplexEventProcessing.Linq.HoppingWindowOutputPolicy)">
      <summary>Transforms a stream to a window stream where each member is a CepWindow.</summary>
      <returns>A window stream to which aggregates, ranking or user-defined operations can be applied.</returns>
      <param name="source">The CepStream to apply the TumblingWindow operation against.</param>
      <param name="windowSize">The length and hop size of the window.</param>
      <param name="alignment">The reference time to align window start times.</param>
      <param name="inputPolicy">Indicates how events are altered before being input into the window operation.</param>
      <param name="outputPolicy">Indicates how output events of the window operation are altered.</param>
      <typeparam name="TPayload">The type of the input event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.Union``1(Microsoft.ComplexEventProcessing.Linq.CepStream{``0},Microsoft.ComplexEventProcessing.Linq.CepStream{``0})">
      <summary>Unions two streams together into one stream.</summary>
      <returns>A stream that is the union of two input streams.</returns>
      <param name="outer">The first stream for the union.</param>
      <param name="inner">The second stream for the union.</param>
      <typeparam name="TPayload">The payload type of input events.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.Where``1(Microsoft.ComplexEventProcessing.Linq.CepStream{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Filters events from an input stream using a given filter function.</summary>
      <returns>The stream of filtered events. </returns>
      <param name="source">The source stream. </param>
      <param name="filter">The filter function. </param>
      <typeparam name="TPayload">The type of the input event payload. </typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream.Where``1(Microsoft.ComplexEventProcessing.Linq.ICepEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Filters events from an enumerable input stream using the specified filter expression.</summary>
      <returns>The enumerable stream of filtered events.</returns>
      <param name="source">The enumerable source to be filtered. This parameter cannot be null.</param>
      <param name="predicate">The selection predicate. This parameter cannot be null.</param>
      <typeparam name="TInput">The type of the source.</typeparam>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.CepStream`1">
      <summary>Represents a stream of events from any user specified payload type.</summary>
      <typeparam name="TPayload">The payload type of the event in the stream.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream`1.Create(Microsoft.ComplexEventProcessing.Application,System.String,System.Type,System.Object,Microsoft.ComplexEventProcessing.EventShape)">
      <summary>Creates a bound stream from a given input adapter factory.</summary>
      <returns>A bound stream whose events come from an instance of an input adapter that is generated by the input adapter factory.</returns>
      <param name="application">The application with which the stream is associated.</param>
      <param name="streamName">The name of the input stream.</param>
      <param name="adapterFactoryType">The input adapter factory type.</param>
      <param name="configInfo">The input adapter factory configuration.</param>
      <param name="eventShape">The event shape of the input stream.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream`1.Create(Microsoft.ComplexEventProcessing.Application,System.String,System.Type,System.Object,Microsoft.ComplexEventProcessing.EventShape,Microsoft.ComplexEventProcessing.AdvanceTimeSettings)">
      <summary>Creates a bound stream from a given input adapter factory.</summary>
      <returns>A bound stream whose events come from an instance of the input adapter that is generated by the input adapter factory.</returns>
      <param name="application">The application with which the stream is associated.</param>
      <param name="streamName">The name of the input stream.</param>
      <param name="adapterFactoryType">The input adapter factory type.</param>
      <param name="configInfo">The input adapter factory configuration.</param>
      <param name="eventShape">The event shape of the input stream.</param>
      <param name="advanceTimeSettings">The advance time settings for this stream.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream`1.Create(Microsoft.ComplexEventProcessing.Application,System.Uri,Microsoft.ComplexEventProcessing.EventShape)">
      <summary>Creates a bound stream over an input from a given published stream.</summary>
      <returns>A bound input stream for the events in a given published stream.</returns>
      <param name="application">The application with which the stream is associated.</param>
      <param name="publishedStreamName">The name of the published stream.</param>
      <param name="eventShape">The event shape of the input stream.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream`1.Create(Microsoft.ComplexEventProcessing.Application,System.Uri,Microsoft.ComplexEventProcessing.EventShape,Microsoft.ComplexEventProcessing.AdvanceTimeSettings)">
      <summary>Creates a bound stream for input from a given published stream.</summary>
      <returns>A bound input stream for the events in a given published stream.</returns>
      <param name="application">The application with which the stream is associated.</param>
      <param name="publishedStreamName">The name of the published stream.</param>
      <param name="eventShape">The event shape of the input stream.</param>
      <param name="advanceTimeSettings">The advance time settings for this stream.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream`1.Create(System.String)">
      <summary>Creates an unbound stream with event payload of type 'TPayload'.</summary>
      <returns>An input stream with given name and type.</returns>
      <param name="streamName">The name of the stream.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream`1.Create(System.String,System.Type,System.Object,Microsoft.ComplexEventProcessing.EventShape)">
      <summary>Creates a bound stream from a given input adapter factory.</summary>
      <returns>A bound stream whose events come from an instance of an input adapter that is generated by the input adapter factory.</returns>
      <param name="streamName">The name of the input stream.</param>
      <param name="adapterFactoryType">The input adapter factory type.</param>
      <param name="configInfo">The input adapter factory configuration.</param>
      <param name="eventShape">The event shape of the input stream.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream`1.Create(System.String,System.Type,System.Object,Microsoft.ComplexEventProcessing.EventShape,Microsoft.ComplexEventProcessing.AdvanceTimeSettings)">
      <summary>Creates a bound stream from a given input adapter factory.</summary>
      <returns>A bound stream whose events come from an instance of the input adapter that is generated by the input adapter factory.</returns>
      <param name="streamName">The name of the input stream.</param>
      <param name="adapterFactoryType">The input adapter factory type.</param>
      <param name="configInfo">The input adapter factory configuration.</param>
      <param name="eventShape">The event shape of the input stream.</param>
      <param name="advanceTimeSettings">The advance time setting for the adapter.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream`1.Create(System.Uri,Microsoft.ComplexEventProcessing.EventShape)">
      <summary>Creates a bound stream over an input from a given published stream.</summary>
      <returns>A bound input stream for the events in a given published stream.</returns>
      <param name="publishedStreamName">The name of the published stream.</param>
      <param name="eventShape">The shape of the events in the stream.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream`1.Create(System.Uri,Microsoft.ComplexEventProcessing.EventShape,Microsoft.ComplexEventProcessing.AdvanceTimeSettings)">
      <summary> Creates a bound stream for input from a given published stream.</summary>
      <returns>A bound input stream for the events in a given published stream.</returns>
      <param name="publishedStreamName">The name of the published stream. </param>
      <param name="eventShape">The shape of the events in the stream.</param>
      <param name="advanceTimeSettings">The advance time settings for this stream.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream`1.ExtractInputStreams">
      <summary>Retrieves a list with information about input streams from a given stream definition.</summary>
      <returns>All input streams used in the query.</returns>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream`1.ToPublishedStreamQuery(System.Uri,Microsoft.ComplexEventProcessing.Application,System.String,System.String,Microsoft.ComplexEventProcessing.EventShape,Microsoft.ComplexEventProcessing.StreamEventOrder)">
      <summary>Creates a query with an output bound to an explicitly named published stream. The output of the query can be consumed through dynamic query composition. Only one query can produce events for a published stream at any given time.</summary>
      <returns>The newly created query.</returns>
      <param name="publishedStreamName">The name of the published stream.</param>
      <param name="application">The application which will host the query.</param>
      <param name="queryName">The name of the query.</param>
      <param name="description">The textual description of the query.</param>
      <param name="eventShape">The expected event shape that is going to be sent to the output adapter.</param>
      <param name="eventOrder">The expected event order.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream`1.ToPublishedStreamQuery(System.Uri,System.String,System.String,Microsoft.ComplexEventProcessing.EventShape,Microsoft.ComplexEventProcessing.StreamEventOrder)">
      <summary>Creates a query with an output bound to an explicitly named published stream. The output of the query can be consumed through dynamic query composition. Only one query can produce events for a published stream at any given time.</summary>
      <returns>The newly created query.</returns>
      <param name="publishedStreamName">The name of the published stream.</param>
      <param name="queryName">The name of the query.</param>
      <param name="description">The description of the query.</param>
      <param name="eventShape">The shape of the query output stream.</param>
      <param name="eventOrder">The expected event order.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream`1.ToQuery(Microsoft.ComplexEventProcessing.Application,System.String,System.String,Microsoft.ComplexEventProcessing.EventShape,Microsoft.ComplexEventProcessing.StreamEventOrder)">
      <summary>Creates a query from the stream with an unbound output running in the specified application. All inputs to the query must be bound to adapters, sequences or other queries. The output of the query can be consumed through dynamic query composition only.</summary>
      <returns>The newly created query.</returns>
      <param name="application">The application which will host the query.</param>
      <param name="queryName">The name of the query.</param>
      <param name="description">The description of the query.</param>
      <param name="eventShape">The shape of the query output stream.</param>
      <param name="eventOrder">The expected event order.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream`1.ToQuery(Microsoft.ComplexEventProcessing.Application,System.String,System.String,System.Type,System.Object,Microsoft.ComplexEventProcessing.EventShape,Microsoft.ComplexEventProcessing.StreamEventOrder)">
      <summary>Creates a query from the stream bound to an output adapter running in the specified application. The output adapter is specified by the type of the adapter factory and the configuration object.</summary>
      <returns>A runnable query that the user can then start, stop, or otherwise manage.</returns>
      <param name="application">The application which will host the query.</param>
      <param name="queryName">The name of the query.</param>
      <param name="description">The description of the query.</param>
      <param name="adapterFactoryType">The type of the output adapter factory.</param>
      <param name="adapterConfig">The configuration for the output adapter factory.</param>
      <param name="eventShape">The expected event shape that is going to be sent to the output adapter.</param>
      <param name="eventOrder">The expected event order.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream`1.ToQuery(Microsoft.ComplexEventProcessing.Application,System.String,System.String,System.Type,System.Object,Microsoft.ComplexEventProcessing.EventShape,Microsoft.ComplexEventProcessing.StreamEventOrder,System.Boolean)">
      <summary>Creates a query from the stream bound to an output adapter running in the specified application. The output adapter is specified by the type of the adapter factory and the configuration object. The query can be specified to be resilient.</summary>
      <returns>A runnable query that the user can then start, stop, or otherwise manage, and that is resilient when the value of <paramref name="isResilient" /> is true.</returns>
      <param name="application">The application which will host the query.</param>
      <param name="queryName">The name of the query.</param>
      <param name="description">The description of the query.</param>
      <param name="adapterFactoryType">The type of the output adapter factory.</param>
      <param name="adapterConfig">The configuration for the output adapter factory.</param>
      <param name="eventShape">The expected event shape that is going to be sent to the output adapter.</param>
      <param name="eventOrder">The expected event order.</param>
      <param name="isResilient">true if the query is resilient; otherwise, false.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream`1.ToQuery(System.String,System.String,Microsoft.ComplexEventProcessing.EventShape,Microsoft.ComplexEventProcessing.StreamEventOrder)">
      <summary>Creates a query from the stream with an unbound output. All inputs to the query must be bound to adapters, sequences or other queries. The output of the query can be consumed through dynamic query composition only. The application this query will run in is implied by the definition of the stream.</summary>
      <returns>The newly created query.</returns>
      <param name="queryName">The name of the query.</param>
      <param name="description">The description of the query.</param>
      <param name="eventShape">The expected event shape that is going to be sent to the output stream.</param>
      <param name="eventOrder">The expected event order.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream`1.ToQuery(System.String,System.String,System.Type,System.Object,Microsoft.ComplexEventProcessing.EventShape,Microsoft.ComplexEventProcessing.StreamEventOrder)">
      <summary>Creates a query from the stream bound to an output adapter. The output adapter is specified by the type of the adapter factory and the configuration object. The application this query will run in is implied by the definition of the stream.</summary>
      <returns>A runnable query that the user can then start, stop, or otherwise manage.</returns>
      <param name="queryName">The name of the query.</param>
      <param name="description">The description of the query.</param>
      <param name="adapterFactoryType">The type of the output adapter factory.</param>
      <param name="adapterConfig">The configuration for the output adapter factory.</param>
      <param name="eventShape">The expected event shape that is going to be sent to the output adapter.</param>
      <param name="eventOrder">The expected event order.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStream`1.ToQuery(System.String,System.String,System.Type,System.Object,Microsoft.ComplexEventProcessing.EventShape,Microsoft.ComplexEventProcessing.StreamEventOrder,System.Boolean)">
      <summary>Creates a query from the stream bound to an output adapter. The output adapter is specified by the type of the adapter factory and the configuration object. The application this query will run in is implied by the definition of the stream. The query can be specified to be resilient.</summary>
      <returns>A runnable query that the user can then start, stop, or otherwise manage, and that is resilient when the value of <paramref name="isResilient" /> is true.</returns>
      <param name="queryName">The name of the query.</param>
      <param name="description">The description of the query.</param>
      <param name="adapterFactoryType">The type of the output adapter factory.</param>
      <param name="adapterConfig">The configuration for the output adapter factory.</param>
      <param name="eventShape">The expected event shape that is going to be sent to the output adapter.</param>
      <param name="eventOrder">The expected event order.</param>
      <param name="isResilient">true if the query is resilient; otherwise, false.</param>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.CepStreamCreationContext">
      <summary>This class represents the context in which a CepStream was created.</summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepStreamCreationContext.#ctor">
      <summary>Initializes a new instance of the CepStreamCreationContext class.</summary>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.Linq.CepStreamCreationContext.Query">
      <summary>Gets or sets the query from which the CepStream was created.</summary>
      <returns>Null if the CepStream was not created from a query.</returns>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.CepUserDefinedAggregateAttribute">
      <summary>Decorates the user-defined aggregate extension method.</summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepUserDefinedAggregateAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the user-defined attribute.</summary>
      <param name="udaType">Type that implements the user-defined attribute.</param>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.CepUserDefinedOperatorAttribute">
      <summary>Decorates the user-defined operator extension method.</summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepUserDefinedOperatorAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the user-defined opreator attribute.</summary>
      <param name="udoType">Type that implements the user-defined operator.</param>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.CepUtility">
      <summary>Utility class used by user defined operator, aggregate and functions.</summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepUtility.DoNotCall">
      <summary>ndicates that a given method is not supposed to be called and executed. This is used to decorate the extension methods for user-defined operators and user-defined aggregates so that the user will not accidentally execute it.</summary>
      <returns>An InvalidOperationException object.</returns>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepUtility.GetEventFieldCulture(System.String)">
      <summary>Creates an object that describes culture by using the culture of a specific field from input stream event.</summary>
      <returns>An object that describes the culture of the specified input field. </returns>
      <param name="inputFieldExpression">Member access expression on input stream event. </param>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.CepWindow`1">
      <summary>A window is a finite collection of events that results from applying a windowing operator on a stream of events..</summary>
      <typeparam name="TPayload"></typeparam>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.CepWindowExtensionMethods">
      <summary>Provides extension methods for built-in aggregates. </summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepWindowExtensionMethods.Avg``1(Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Byte}})">
      <summary> Computes the average over all events in a window. The value to average over is defined in the input expression parameter. </summary>
      <returns>The value that contains the average over the events in the input window.</returns>
      <param name="window">The window with the input events to which the average is applied to.</param>
      <param name="input">The lambda expression which specifies the value that the average is computed over.</param>
      <typeparam name="TPayload">The payload type of window events.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepWindowExtensionMethods.Avg``1(Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>Computes the average over all events in a window. The value to average over is defined in the input expression parameter.</summary>
      <returns>The value that contains the average over the events in the input window.</returns>
      <param name="window">The window with the input events to which the average is applied to.</param>
      <param name="input">The lambda expression which specifies the value that the average is computed over.</param>
      <typeparam name="TPayload">The payload type of window events.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepWindowExtensionMethods.Avg``1(Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>Computes the average over all events in a window. The value to average over is defined in the input expression parameter.</summary>
      <returns>The value that contains the average over the events in the input window.</returns>
      <param name="window">The window with the input events to which the average is applied to.</param>
      <param name="input">The lambda expression which specifies the value that the average is computed over.</param>
      <typeparam name="TPayload">The payload type of window events.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepWindowExtensionMethods.Avg``1(Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int16}})">
      <summary>Computes the average over all events in a window. The value to average over is defined in the input expression parameter.</summary>
      <returns>The value that contains the average over the events in the input window.</returns>
      <param name="window">The window with the input events to which the average is applied to.</param>
      <param name="input">The lambda expression which specifies the value that the average is computed over.</param>
      <typeparam name="TPayload">The payload type of window events.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepWindowExtensionMethods.Avg``1(Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>Computes the average over all events in a window. The value to average over is defined in the input expression parameter.</summary>
      <returns>The value that contains the average over the events in the input window.</returns>
      <param name="window">The window with the input events to which the average is applied to.</param>
      <param name="input">The lambda expression which specifies the value that the average is computed over.</param>
      <typeparam name="TPayload">The payload type of window events.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepWindowExtensionMethods.Avg``1(Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>Computes the average over all events in a window. The value to average over is defined in the input expression parameter.</summary>
      <returns>The value that contains the average over the events in the input window.</returns>
      <param name="window">The window with the input events to which the average is applied to.</param>
      <param name="input">The lambda expression which specifies the value that the average is computed over.</param>
      <typeparam name="TPayload">The payload type of window events.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepWindowExtensionMethods.Avg``1(Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Byte}}})">
      <summary>Computes the average over all events in a window. The value to average over is defined in the input expression parameter.</summary>
      <returns>The nullable value that contains the average over the events in the input window.</returns>
      <param name="window">The window with the input events to which the average is applied to.</param>
      <param name="input">The lambda expression which specifies the value that the average is computed over.</param>
      <typeparam name="TPayload">The payload type of window events.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepWindowExtensionMethods.Avg``1(Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>Computes the average over all events in a window. The value to average over is defined in the input expression parameter.</summary>
      <returns>The nullable value that contains the average over the events in the input window.</returns>
      <param name="window">The window with the input events to which the average is applied to.</param>
      <param name="input">The lambda expression which specifies the value that the average is computed over.</param>
      <typeparam name="TPayload">The payload type of window events.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepWindowExtensionMethods.Avg``1(Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>Computes the average over all events in a window. The value to average over is defined in the input expression parameter.</summary>
      <returns>The nullable value that contains the average over the events in the input window.</returns>
      <param name="window">The window with the input events to which the average is applied to.</param>
      <param name="input">The lambda expression which specifies the value that the average is computed over.</param>
      <typeparam name="TPayload">The payload type of window events.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepWindowExtensionMethods.Avg``1(Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int16}}})">
      <summary>Computes the average over all events in a window. The value to average over is defined in the input expression parameter.</summary>
      <returns>The nullable value that contains the average over the events in the input window.</returns>
      <param name="window">The window with the input events to which the average is applied to.</param>
      <param name="input">The lambda expression which specifies the value that the average is computed over.</param>
      <typeparam name="TPayload">The payload type of window events.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepWindowExtensionMethods.Avg``1(Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>Computes the average over all events in a window. The value to average over is defined in the input expression parameter.</summary>
      <returns>The nullable value that contains the average over the events in the input window.</returns>
      <param name="window">The window with the input events to which the average is applied to.</param>
      <param name="input">The lambda expression which specifies the value that the average is computed over.</param>
      <typeparam name="TPayload">The payload type of window events.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepWindowExtensionMethods.Avg``1(Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>Computes the average over all events in a window. The value to average over is defined in the input expression parameter.</summary>
      <returns>The nullable value that contains the average over the events in the input window.</returns>
      <param name="window">The window with the input events to which the average is applied to.</param>
      <param name="input">The lambda expression which specifies the value that the average is computed over.</param>
      <typeparam name="TPayload">The payload type of window events.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepWindowExtensionMethods.Avg``1(Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.SByte}}})">
      <summary>Computes the average over all events in a window. The value to average over is defined in the input expression parameter.</summary>
      <returns>The nullable value that contains the average over the events in the input window.</returns>
      <param name="window">The window with the input events to which the average is applied to.</param>
      <param name="input">The lambda expression which specifies the value that the average is computed over.</param>
      <typeparam name="TPayload">The payload type of window events.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepWindowExtensionMethods.Avg``1(Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>Computes the average over all events in a window. The value to average over is defined in the input expression parameter.</summary>
      <returns>The nullable value that contains the average over the events in the input window.</returns>
      <param name="window">The window with the input events to which the average is applied to.</param>
      <param name="input">The lambda expression which specifies the value that the average is computed over.</param>
      <typeparam name="TPayload">The payload type of window events.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepWindowExtensionMethods.Avg``1(Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.UInt16}}})">
      <summary>Computes the average over all events in a window. The value to average over is defined in the input expression parameter.</summary>
      <returns>The nullable value that contains the average over the events in the input window.</returns>
      <param name="window">The window with the input events to which the average is applied to.</param>
      <param name="input">The lambda expression which specifies the value that the average is computed over.</param>
      <typeparam name="TPayload">The payload type of window events.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepWindowExtensionMethods.Avg``1(Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.UInt32}}})">
      <summary>Computes the average over all events in a window. The value to average over is defined in the input expression parameter.</summary>
      <returns>The nullable value that contains the average over the events in the input window.</returns>
      <param name="window">The window with the input events to which the average is applied to.</param>
      <param name="input">The lambda expression which specifies the value that the average is computed over.</param>
      <typeparam name="TPayload">The payload type of window events.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepWindowExtensionMethods.Avg``1(Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.UInt64}}})">
      <summary>Computes the average over all events in a window. The value to average over is defined in the input expression parameter.</summary>
      <returns>The nullable value that contains the average over the events in the input window.</returns>
      <param name="window">The window with the input events to which the average is applied to.</param>
      <param name="input">The lambda expression which specifies the value that the average is computed over.</param>
      <typeparam name="TPayload">The payload type of window events.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepWindowExtensionMethods.Avg``1(Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},System.Linq.Expressions.Expression{System.Func{``0,System.SByte}})">
      <summary>Computes the average over all events in a window. The value to average over is defined in the input expression parameter.</summary>
      <returns>The value that contains the average over the events in the input window.</returns>
      <param name="window">The window with the input events to which the average is applied to.</param>
      <param name="input">The lambda expression which specifies the value that the average is computed over.</param>
      <typeparam name="TPayload">The payload type of window events.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepWindowExtensionMethods.Avg``1(Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>Computes the average over all events in a window. The value to average over is defined in the input expression parameter.</summary>
      <returns>The value that contains the average over the events in the input window.</returns>
      <param name="window">The window with the input events to which the average is applied to.</param>
      <param name="input">The lambda expression which specifies the value that the average is computed over.</param>
      <typeparam name="TPayload">The payload type of window events.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepWindowExtensionMethods.Avg``1(Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},System.Linq.Expressions.Expression{System.Func{``0,System.UInt16}})">
      <summary>Computes the average over all events in a window. The value to average over is defined in the input expression parameter.</summary>
      <returns>The value that contains the average over the events in the input window.</returns>
      <param name="window">The window with the input events to which the average is applied to.</param>
      <param name="input">The lambda expression which specifies the value that the average is computed over.</param>
      <typeparam name="TPayload">The payload type of window events.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepWindowExtensionMethods.Avg``1(Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},System.Linq.Expressions.Expression{System.Func{``0,System.UInt32}})">
      <summary>Computes the average over all events in a window. The value to average over is defined in the input expression parameter.</summary>
      <returns>The value that contains the average over the events in the input window.</returns>
      <param name="window">The window with the input events to which the average is applied to.</param>
      <param name="input">The lambda expression which specifies the value that the average is computed over.</param>
      <typeparam name="TPayload">The payload type of window events.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepWindowExtensionMethods.Avg``1(Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},System.Linq.Expressions.Expression{System.Func{``0,System.UInt64}})">
      <summary>Computes the average over all events in a window. The value to average over is defined in the input expression parameter.</summary>
      <returns>The value that contains the average over the events in the input window.</returns>
      <param name="window">The window with the input events to which the average is applied to.</param>
      <param name="input">The lambda expression which specifies the value that the average is computed over.</param>
      <typeparam name="TPayload">The payload type of window events.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepWindowExtensionMethods.Count``1(Microsoft.ComplexEventProcessing.Linq.CepWindow{``0})">
      <summary>Computes the count of events in the window.</summary>
      <returns>A value that contains the count of events.</returns>
      <param name="window">The window containing the events to be counted.</param>
      <typeparam name="TPayload">The payload type of window events.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepWindowExtensionMethods.Max``2(Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary> Computes the maximum of the values specified by the input parameter over a window of events. </summary>
      <returns>A value that contains the maximum.</returns>
      <param name="window">The window with the input events to which the maximum calculation is applied to.</param>
      <param name="input">The lambda expression that defines the value that the maximum is going to operate against. </param>
      <typeparam name="TPayload">The payload type of window events.</typeparam>
      <typeparam name="TMaxValue">The value type that the maximum computation is operating against.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepWindowExtensionMethods.Min``2(Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary> Computes the minimum of the values specified by the input parameter over a window of events. </summary>
      <returns>A value that contains the minimum.</returns>
      <param name="window">The window with the input events to which the minimum calculation is applied to.</param>
      <param name="input">A lambda expression that defines the value that the minimum is going to operate against. </param>
      <typeparam name="TPayload">The payload type of window events.</typeparam>
      <typeparam name="TMinValue">The value type that the minimum computation is operating against.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepWindowExtensionMethods.Sum``1(Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Byte}})">
      <summary> Computes the sum of all events in a window. The value to compute the sum over is defined in the input expression parameter.  </summary>
      <returns>A value that contains the result of the summation.</returns>
      <param name="window">The window that the sum is computed over.</param>
      <param name="input">The lambda expression which defines the input value for the summation based on an input event.</param>
      <typeparam name="TPayload">The payload type of window events.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepWindowExtensionMethods.Sum``1(Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary> Computes the sum of all events in a window. The value to compute the sum over is defined in the input expression parameter.  </summary>
      <returns>A value that contains the result of the summation.</returns>
      <param name="window">The window that the sum is computed over.</param>
      <param name="input">The lambda expression which defines the input value for the summation based on an input event.</param>
      <typeparam name="TPayload">The payload type of window events.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepWindowExtensionMethods.Sum``1(Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary> Computes the sum of all events in a window. The value to compute the sum over is defined in the input expression parameter.  </summary>
      <returns>A value that contains the result of the summation.</returns>
      <param name="window">The window that the sum is computed over.</param>
      <param name="input">The lambda expression which defines the input value for the summation based on an input event.</param>
      <typeparam name="TPayload">The payload type of window events.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepWindowExtensionMethods.Sum``1(Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int16}})">
      <summary> Computes the sum of all events in a window. The value to compute the sum over is defined in the input expression parameter.  </summary>
      <returns>A value that contains the result of the summation.</returns>
      <param name="window">The window that the sum is computed over.</param>
      <param name="input">The lambda expression which defines the input value for the summation based on an input event.</param>
      <typeparam name="TPayload">The payload type of window events.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepWindowExtensionMethods.Sum``1(Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary> Computes the sum of all events in a window. The value to compute the sum over is defined in the input expression parameter.  </summary>
      <returns>A value that contains the result of the summation.</returns>
      <param name="window">The window that the sum is computed over.</param>
      <param name="input">The lambda expression which defines the input value for the summation based on an input event.</param>
      <typeparam name="TPayload">The payload type of window events.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepWindowExtensionMethods.Sum``1(Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary> Computes the sum of all events in a window. The value to compute the sum over is defined in the input expression parameter.  </summary>
      <returns>A value that contains the result of the summation.</returns>
      <param name="window">The window that the sum is computed over.</param>
      <param name="input">The lambda expression which defines the input value for the summation based on an input event.</param>
      <typeparam name="TPayload">The payload type of window events.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepWindowExtensionMethods.Sum``1(Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Byte}}})">
      <summary> Computes the sum of all events in a window. The value to compute the sum over is defined in the input expression parameter.  </summary>
      <returns>A nullable value that contains the result of the summation.</returns>
      <param name="window">The window that the sum is computed over.</param>
      <param name="input">The lambda expression which defines the input value for the summation based on an input event.</param>
      <typeparam name="TPayload">The payload type of window events.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepWindowExtensionMethods.Sum``1(Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary> Computes the sum of all events in a window. The value to compute the sum over is defined in the input expression parameter.  </summary>
      <returns>A nullable value that contains the result of the summation.</returns>
      <param name="window">The window that the sum is computed over.</param>
      <param name="input">The lambda expression which defines the input value for the summation based on an input event.</param>
      <typeparam name="TPayload">The payload type of window events.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepWindowExtensionMethods.Sum``1(Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary> Computes the sum of all events in a window. The value to compute the sum over is defined in the input expression parameter.  </summary>
      <returns>A nullable value that contains the result of the summation.</returns>
      <param name="window">The window that the sum is computed over.</param>
      <param name="input">The lambda expression which defines the input value for the summation based on an input event.</param>
      <typeparam name="TPayload">The payload type of window events.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepWindowExtensionMethods.Sum``1(Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int16}}})">
      <summary> Computes the sum of all events in a window. The value to compute the sum over is defined in the input expression parameter.  </summary>
      <returns>A nullable value that contains the result of the summation.</returns>
      <param name="window">The window that the sum is computed over.</param>
      <param name="input">The lambda expression which defines the input value for the summation based on an input event.</param>
      <typeparam name="TPayload">The payload type of window events.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepWindowExtensionMethods.Sum``1(Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary> Computes the sum of all events in a window. The value to compute the sum over is defined in the input expression parameter.  </summary>
      <returns>A nullable value that contains the result of the summation.</returns>
      <param name="window">The window that the sum is computed over.</param>
      <param name="input">The lambda expression which defines the input value for the summation based on an input event.</param>
      <typeparam name="TPayload">The payload type of window events.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepWindowExtensionMethods.Sum``1(Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary> Computes the sum of all events in a window. The value to compute the sum over is defined in the input expression parameter.  </summary>
      <returns>A nullable value that contains the result of the summation.</returns>
      <param name="window">The window that the sum is computed over.</param>
      <param name="input">The lambda expression which defines the input value for the summation based on an input event.</param>
      <typeparam name="TPayload">The payload type of window events.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepWindowExtensionMethods.Sum``1(Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.SByte}}})">
      <summary> Computes the sum of all events in a window. The value to compute the sum over is defined in the input expression parameter.  </summary>
      <returns>A nullable value that contains the result of the summation.</returns>
      <param name="window">The window that the sum is computed over.</param>
      <param name="input">The lambda expression which defines the input value for the summation based on an input event.</param>
      <typeparam name="TPayload">The payload type of window events.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepWindowExtensionMethods.Sum``1(Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary> Computes the sum of all events in a window. The value to compute the sum over is defined in the input expression parameter.  </summary>
      <returns>A nullable value that contains the result of the summation.</returns>
      <param name="window">The window that the sum is computed over.</param>
      <param name="input">The lambda expression which defines the input value for the summation based on an input event.</param>
      <typeparam name="TPayload">The payload type of window events.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepWindowExtensionMethods.Sum``1(Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.UInt16}}})">
      <summary> Computes the sum of all events in a window. The value to compute the sum over is defined in the input expression parameter.  </summary>
      <returns>A nullable value that contains the result of the summation.</returns>
      <param name="window">The window that the sum is computed over.</param>
      <param name="input">The lambda expression which defines the input value for the summation based on an input event.</param>
      <typeparam name="TPayload">The payload type of window events.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepWindowExtensionMethods.Sum``1(Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.UInt32}}})">
      <summary> Computes the sum of all events in a window. The value to compute the sum over is defined in the input expression parameter.  </summary>
      <returns>A nullable value that contains the result of the summation.</returns>
      <param name="window">The window that the sum is computed over.</param>
      <param name="input">The lambda expression which defines the input value for the summation based on an input event.</param>
      <typeparam name="TPayload">The payload type of window events.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepWindowExtensionMethods.Sum``1(Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.UInt64}}})">
      <summary> Computes the sum of all events in a window. The value to compute the sum over is defined in the input expression parameter.  </summary>
      <returns>A nullable value that contains the result of the summation.</returns>
      <param name="window">The window that the sum is computed over.</param>
      <param name="input">The lambda expression which defines the input value for the summation based on an input event.</param>
      <typeparam name="TPayload">The payload type of window events.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepWindowExtensionMethods.Sum``1(Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},System.Linq.Expressions.Expression{System.Func{``0,System.SByte}})">
      <summary> Computes the sum of all events in a window. The value to compute the sum over is defined in the input expression parameter.  </summary>
      <returns>A value that contains the result of the summation.</returns>
      <param name="window">The window that the sum is computed over.</param>
      <param name="input">The lambda expression which defines the input value for the summation based on an input event.</param>
      <typeparam name="TPayload">The payload type of window events.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepWindowExtensionMethods.Sum``1(Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary> Computes the sum of all events in a window. The value to compute the sum over is defined in the input expression parameter.  </summary>
      <returns>A value that contains the result of the summation.</returns>
      <param name="window">The window that the sum is computed over.</param>
      <param name="input">The lambda expression which defines the input value for the summation based on an input event.</param>
      <typeparam name="TPayload">The payload type of window events.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepWindowExtensionMethods.Sum``1(Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},System.Linq.Expressions.Expression{System.Func{``0,System.UInt16}})">
      <summary> Computes the sum of all events in a window. The value to compute the sum over is defined in the input expression parameter.  </summary>
      <returns>A value that contains the result of the summation.</returns>
      <param name="window">The window that the sum is computed over.</param>
      <param name="input">The lambda expression which defines the input value for the summation based on an input event.</param>
      <typeparam name="TPayload">The payload type of window events.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepWindowExtensionMethods.Sum``1(Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},System.Linq.Expressions.Expression{System.Func{``0,System.UInt32}})">
      <summary> Computes the sum of all events in a window. The value to compute the sum over is defined in the input expression parameter.  </summary>
      <returns>A value that contains the result of the summation.</returns>
      <param name="window">The window that the sum is computed over.</param>
      <param name="input">The lambda expression which defines the input value for the summation based on an input event.</param>
      <typeparam name="TPayload">The payload type of window events.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepWindowExtensionMethods.Sum``1(Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},System.Linq.Expressions.Expression{System.Func{``0,System.UInt64}})">
      <summary> Computes the sum of all events in a window. The value to compute the sum over is defined in the input expression parameter.  </summary>
      <returns>A value that contains the result of the summation.</returns>
      <param name="window">The window that the sum is computed over.</param>
      <param name="input">The lambda expression which defines the input value for the summation based on an input event.</param>
      <typeparam name="TPayload">The payload type of window events.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepWindowExtensionMethods.UserDefinedAggregate``3(Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},System.Object)">
      <summary>Calls a user-defined aggregate (UDA) in which the UDA does not take an additional expression to map the input event to the input that the UDA expects.</summary>
      <returns>The output of the user-defined aggregate.</returns>
      <param name="window">The window that the aggregate is applied to.</param>
      <param name="configInfo">The initialization information for the aggregate.</param>
      <typeparam name="TPayload">The payload type of window events.</typeparam>
      <typeparam name="TUda">The input event type of the user-defined aggregate.</typeparam>
      <typeparam name="TAggregateOutput">The event type of the aggregate output.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.CepWindowExtensionMethods.UserDefinedAggregateWithMapping``4(Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Object)">
      <summary> Calls a user-defined aggregate. </summary>
      <returns>The output of the user-defined aggregate.</returns>
      <param name="window">The window that aggregate is applied to.</param>
      <param name="aggregateInputExpr">The expression that transform the input event type to the aggregate input event type.</param>
      <param name="configInfo">The initialization information for the aggreagate.</param>
      <typeparam name="TPayload">The payload type of input events.</typeparam>
      <typeparam name="TUda">The input event type of the user defined aggregate.  </typeparam>
      <typeparam name="TAggregateInput">The input type of the aggregate. </typeparam>
      <typeparam name="TAggregateOutput">The event type of the aggregate output. </typeparam>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.CepWindowStream`1">
      <summary>Results from applying a windowing operator to a stream.</summary>
      <typeparam name="T">Event payload type.</typeparam>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.Linq.CepWindowStream`1.Expression">
      <summary>Gets the lambda expression that is associated with this object.</summary>
      <returns>The lambda expression that is associated with this object.</returns>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.CountWindowOutputPolicy">
      <summary>Defines the window output policies that are applicable to count windows. A window output policy describes how the CEP engine modifies the timestamp of events that result from a window-based operation.</summary>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.Linq.CountWindowOutputPolicy.PointAlignToWindowEnd">
      <summary>Gets a window output policy instance for count windows that adjusts the lifetime of the output events to point events which align with the window end time.</summary>
      <returns>A window output policy instance for count windows that adjusts the lifetime of the output events to point events which align with the window end time.</returns>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.HoppingWindowOutputPolicy">
      <summary>Defines the window output policies that are applicable to hopping windows. A window output policy describes how the CEP engine modifies the timestamp of events that result from a window-based operation.</summary>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.Linq.HoppingWindowOutputPolicy.ClipToWindowEnd">
      <summary>Gets a window output policy instance for hopping windows that clips the end time of the output events to the window end.</summary>
      <returns>A window output policy instance for hopping windows that clips the end time of the output events to the window end.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.Linq.HoppingWindowOutputPolicy.PointAlignToWindowEnd">
      <summary>Gets a window output policy instance for hopping windows that adjusts the lifetime of the output events to point events which align with the window end time.</summary>
      <returns>A window output policy instance for hopping windows that adjusts the lifetime of the output events to point events which align with the window end time.</returns>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.IBinding">
      <summary> Binding between a data generator and data consumer. </summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.IBinding.Run">
      <summary> Begins a computation in which the data generator produces and the data consumer consumes. </summary>
      <returns>Handle for the computation.</returns>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.ICepEnumerable`1">
      <summary>Extends the IEnumerable&lt;T&gt; interface to let you specify a query name and description for an enumerable event source.</summary>
      <typeparam name="T">Type of the event.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.ICepEnumerable`1.GetEnumerator(System.String,System.String)">
      <summary>Extends the IEnumerable&lt;T&gt; interface to let you specify a query name and description for an enumerable event source.</summary>
      <returns>Returns <see cref="T:System.Collections.Generic.IEnumerator`1" />.</returns>
      <param name="queryName">Name of the query.</param>
      <param name="queryDescription">Optional description of the query.</param>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.ICepObservable`1">
      <summary>Represents an extended observable interface supporting named queries for subscriptions.</summary>
      <typeparam name="T">The element type that provides notification information.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.ICepObservable`1.Subscribe(System.IObserver{`0},System.String,System.String)">
      <summary>Creates and observes results from a query with the given name and description.</summary>
      <returns>A reference to an interface that allows observers to stop receiving notifications before the provider has finished sending them.</returns>
      <param name="observer">The object that receives observable results.</param>
      <param name="queryName">The name of the query being observed.</param>
      <param name="queryDescription">A textual description of the query.</param>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.IKey`1">
      <summary>Provides access to the grouping key.</summary>
      <typeparam name="K">Grouping key.</typeparam>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.Linq.IKey`1.Key">
      <summary>Gets the grouping key.</summary>
      <returns>The grouping key.</returns>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.InputStreamInfo">
      <summary>Contains all information extracted from a stream definition.</summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.InputStreamInfo.#ctor(System.String,System.Object,System.Object,System.Type,Microsoft.ComplexEventProcessing.EventShape,Microsoft.ComplexEventProcessing.AdvanceTimeSettings,Microsoft.ComplexEventProcessing.Linq.CepStreamCreationContext)">
      <summary>Initalizes a new instance of the input stream info.</summary>
      <param name="streamName">Name of the input stream.</param>
      <param name="streamSource">Input stream provider.</param>
      <param name="streamSourceConfig">Configuration for the input stream provider.</param>
      <param name="eventType">Event payload type of the input stream.</param>
      <param name="eventShape">Event shape of the input stream.</param>
      <param name="advanceTimeSettings">Advance time settings.</param>
      <param name="context">The context in which the stream was created.</param>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.Linq.InputStreamInfo.AdvanceTimeSettings">
      <summary>Gets the advance time settings.</summary>
      <returns>The advance time settings.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.Linq.InputStreamInfo.Context">
      <summary>Gets an object that represents the context in which the stream was created.</summary>
      <returns>The object that represents the context in which the stream was created.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.Linq.InputStreamInfo.EventShape">
      <summary>Gets the event shape the stream source is going to provide.</summary>
      <returns>The event shape the stream source is going to provide.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.Linq.InputStreamInfo.EventType">
      <summary>Gets the event payload type in the stream.</summary>
      <returns>The event payload type in the stream.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.Linq.InputStreamInfo.StreamName">
      <summary>Gets the name of the stream.</summary>
      <returns>The name of the stream.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.Linq.InputStreamInfo.StreamSource">
      <summary>Gets the stream provider.</summary>
      <returns>The stream provider.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.Linq.InputStreamInfo.StreamSourceConfig">
      <summary>Gets the configuration information for the stream provider.</summary>
      <returns>The configuration information for the stream provider.</returns>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.IOrderedWindow`1">
      <summary>Represents a window in which the arrival of events is fully ordered.</summary>
      <typeparam name="TPayload">The type of payload.</typeparam>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.IPartitionedStreamable`2">
      <summary>Represents a partitioned data that can be organized into streams.</summary>
      <typeparam name="TKey">The type of the grouping key.</typeparam>
      <typeparam name="TPayload">The type of payload.</typeparam>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.IQOrderedWindow`1">
      <summary>Represents an ordered window query.</summary>
      <typeparam name="TPayload">The type of the payload.</typeparam>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.IQPartitionedStreamable`2">
      <summary>Represents a partitioned temporal stream query.</summary>
      <typeparam name="TKey">The type of the grouping key.</typeparam>
      <typeparam name="TPayload">The type of the payload.</typeparam>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.IQStreamable">
      <summary> Base interface for parts of a temporal stream query. </summary>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.Linq.IQStreamable.Expression">
      <summary> Gets expression describing the query part. </summary>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.Linq.IQStreamable.Provider">
      <summary> Gets the LINQ provider for the temporal stream query part. </summary>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.IQStreamable`1">
      <summary>Represents a base interface for parts of a temporal stream query with the specified type of payload.</summary>
      <typeparam name="TPayload">The type of the payload.</typeparam>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.IQStreamableProvider">
      <summary> LINQ provider supporting composition of temporal stream queries. </summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.IQStreamableProvider.CreateOrderedWindow``1(System.Linq.Expressions.Expression)">
      <summary> Creates an ordered window query. </summary>
      <returns>Ordered window.</returns>
      <param name="expression">Expression describing the ordered window.</param>
      <typeparam name="TPayload">Payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.IQStreamableProvider.CreatePartitionedStreamable``2(System.Linq.Expressions.Expression)">
      <summary> Creates a grouped temporal stream query. </summary>
      <returns>Partitioned stream.</returns>
      <param name="expression">Expression describing the partitioned stream.</param>
      <typeparam name="TKey">Partition key type.</typeparam>
      <typeparam name="TPayload">Payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.IQStreamableProvider.CreateStreamable``1(System.Linq.Expressions.Expression)">
      <summary> Creates a temporal stream query. </summary>
      <returns>Temporal stream query.</returns>
      <param name="expression">Expression describing the temporal query.</param>
      <typeparam name="TPayload">Payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.IQStreamableProvider.CreateWindowedStreamable``1(System.Linq.Expressions.Expression)">
      <summary> Creates a windowed temporal stream query. </summary>
      <returns>Windowed stream.</returns>
      <param name="expression">Expression describing the windowed stream.</param>
      <typeparam name="TPayload">Payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.IQStreamableProvider.CreateWindowResult``1(System.Linq.Expressions.Expression)">
      <summary> Creates the result of a window computation. </summary>
      <returns>Window result.</returns>
      <param name="expression">Expression describing the window computation.</param>
      <typeparam name="TPayload">Payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.IQStreamableProvider.CreateWindowSource``1(System.Linq.Expressions.Expression)">
      <summary> Creates the input to a window computation. </summary>
      <returns>Window result.</returns>
      <param name="expression">Expression describing the window computation.</param>
      <typeparam name="TPayload">Payload type.</typeparam>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.IQWindowedStreamable`1">
      <summary>Represents a windowed temporal stream query.</summary>
      <typeparam name="TPayload">The type of the payload.</typeparam>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.IQWindowResult`1">
      <summary>Provides the result of events within the window stream.</summary>
      <typeparam name="TResult">The type of result.</typeparam>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.IQWindowSource`1">
      <summary>Provides the source of events within the window stream.</summary>
      <typeparam name="TSource">The type of source.</typeparam>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.IRemote">
      <summary> A component that is remotely hosted. </summary>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.Linq.IRemote.Expression">
      <summary> Gets expression defining the logic for the remote component. </summary>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.Linq.IRemote.Provider">
      <summary> Gets the LINQ provider supporting construction and composition of remote components. </summary>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.IRemoteBinding">
      <summary> Remote binding between a data generator and data consumer. </summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.IRemoteBinding.Run(System.String)">
      <summary> Begins a computation in which the data generator produces and the data consumer consumes. </summary>
      <returns>Handle for the computation.</returns>
      <param name="id">Identifier that can be used to later retrieve a handle on the computation.</param>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.IRemoteObserver`1">
      <summary>Represents the changes in observable objects.</summary>
      <typeparam name="TElement">The type of element.</typeparam>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.IRemoteProvider">
      <summary>Represents a LINQ provider supporting creation of remote sequence and stream definitions.</summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.IRemoteProvider.CreateBinding(System.Linq.Expressions.Expression)">
      <summary>Creates a remote binding between a data generator and a data consumer.</summary>
      <returns>The proxy for remote binding.</returns>
      <param name="expression">The binding definition.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.IRemoteProvider.CreateEnumerable``1(System.Linq.Expressions.Expression)">
      <summary>Creates a remote enumerable sequence using the given definition.</summary>
      <returns>The proxy for remote enumerable.</returns>
      <param name="expression">The enumerable definition.</param>
      <typeparam name="TElement">The enumerable element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.IRemoteProvider.CreateObservable``1(System.Linq.Expressions.Expression)">
      <summary>Creates a remote observable sequence using the given definition.</summary>
      <returns>The proxy for remote observable.</returns>
      <param name="expression">The observable definition.</param>
      <typeparam name="TElement">The observable element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.IRemoteProvider.CreateObserver``1(System.Linq.Expressions.Expression)">
      <summary>Creates a remote observer using the given definition.</summary>
      <returns>The proxy for remote observer.</returns>
      <param name="expression">The observer definition.</param>
      <typeparam name="TElement">The observer element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.IRemoteProvider.CreateStreamable``1(System.Linq.Expressions.Expression)">
      <summary>Creates a remote temporal stream using the given definition.</summary>
      <returns>The proxy for remote temporal stream.</returns>
      <param name="expression">The temporal stream definition.</param>
      <typeparam name="TPayload">The stream payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.IRemoteProvider.CreateStreamableBinding(System.Linq.Expressions.Expression)">
      <summary>Creates a remote binding between a streamable data generator and data consumer.</summary>
      <returns>The proxy for remote streamable binding.</returns>
      <param name="expression">The binding definition.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.IRemoteProvider.CreateStreamableSink``1(System.Linq.Expressions.Expression)">
      <summary>Creates a remote temporal stream sink using the given definition.</summary>
      <returns>The proxy for remote temporal stream sink.</returns>
      <param name="expression">The sink definition.</param>
      <typeparam name="TPayload">The stream payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.IRemoteProvider.CreateSubjectReference``2(System.String)">
      <summary>Creates a reference for the subject.</summary>
      <returns>The created reference for the subject.</returns>
      <param name="id">The subject identifier.</param>
      <typeparam name="TSource">The subject input element type.</typeparam>
      <typeparam name="TResult">The subject output element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.IRemoteProvider.Deploy(System.Linq.Expressions.Expression,System.String)">
      <summary>Deploys a remote temporal stream.</summary>
      <param name="expression">The temporal stream definition.</param>
      <param name="id">The identifier of the temporal stream.</param>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.IRemoteStreamableBinding">
      <summary>Represents a remote binding of streamable data.</summary>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.IRemoteStreamableSink`1">
      <summary>Represents a remotely hosted streamable event sink with specific payload type.</summary>
      <typeparam name="TPayload">The type of payload.</typeparam>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.IRemoteSubject`2">
      <summary>Represents an interface for the remote binding.</summary>
      <typeparam name="TSource">The type of the elements of source.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.IStreamable`1">
      <summary>Represents a streamable data.</summary>
      <typeparam name="TPayload">The type of the payload.</typeparam>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.IStreamableBinding">
      <summary>Represents the binding of streamable data.</summary>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.IStreamableSink`1">
      <summary>Represents a temporal stream event sink.</summary>
      <typeparam name="TPayload">The type of payload.</typeparam>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.IWindowedStreamable`1">
      <summary>Represents a windowed data that can be organized into streams.</summary>
      <typeparam name="TPayload">The type of the payload.</typeparam>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.IWindowResult`1">
      <summary>Provides the result of the event within the window stream.</summary>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.IWindowSource`1">
      <summary>Provides the source of events within the window stream.</summary>
      <typeparam name="TSource">The type of source.</typeparam>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.KeyedPayload`2">
      <summary>Represents a payload that can be accessed using key grouping.</summary>
      <typeparam name="TKey">The type of the grouping key.</typeparam>
      <typeparam name="TPayload">The type of payload.</typeparam>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.Linq.KeyedPayload`2.Key">
      <summary>Gets the grouping key that is associated with this object.</summary>
      <returns>An object that represents the grouping key that is associated with this object.</returns>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.Linq.KeyedPayload`2.Payload">
      <summary>Gets the underlying payload of the keyed payload.</summary>
      <returns>The underlying payload of the keyed payload.</returns>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.ObservableCepStream">
      <summary>Provides support for event sinks that implement the IObservable interface.</summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.ObservableCepStream.Select``2(Microsoft.ComplexEventProcessing.Linq.ICepObservable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Projects each event of an observable input stream into a new event.</summary>
      <returns>The observable stream of projected events.</returns>
      <param name="source">The observable source to be projected. This parameter cannot be null.</param>
      <param name="selector">The projection selector. This parameter cannot be null.</param>
      <typeparam name="TInput">Projects each event of an observable input stream into a new event.</typeparam>
      <typeparam name="TOutput">Type of the result.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.ObservableCepStream.ToEdgeObservable``1(Microsoft.ComplexEventProcessing.Linq.CepStream{``0})">
      <summary>Converts a <see cref="T:Microsoft.ComplexEventProcessing.Linq.CepStream" /> of edge events to an event sink that implements the IObservable interface. The order of events is <see cref="F:Microsoft.ComplexEventProcessing.StreamEventOrder.FullyOrdered" />.</summary>
      <returns>An event sink that supports observation.</returns>
      <param name="stream">The fully bound event source from which the observable event sink is created.</param>
      <typeparam name="TPayload">Type of the event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.ObservableCepStream.ToEdgeObservable``1(Microsoft.ComplexEventProcessing.Linq.CepStream{``0},Microsoft.ComplexEventProcessing.StreamEventOrder)">
      <summary>Converts a <see cref="T:Microsoft.ComplexEventProcessing.Linq.CepStream" /> of edge events with the specified event order to an event sink that implements the IObservable interface.</summary>
      <returns>An event sink that supports observation.</returns>
      <param name="stream">The fully bound event source from which the observable event sink is created.</param>
      <param name="streamEventOrder">One of the enumeration values that specifies how events are ordered.</param>
      <typeparam name="TPayload">Type of the event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.ObservableCepStream.ToEdgeStream``2(System.IObservable{``0},Microsoft.ComplexEventProcessing.Application,System.Linq.Expressions.Expression{System.Func{``0,Microsoft.ComplexEventProcessing.EdgeEvent{``1}}},Microsoft.ComplexEventProcessing.AdvanceTimeSettings,System.String)">
      <summary>Converts an observable input stream to a stream of edge events, and provides the temporal characteristics of the input.</summary>
      <returns>A stream of edge events.</returns>
      <param name="source">The observable input stream.</param>
      <param name="application">Application instance that hosts the event source. This parameter cannot be null. The application must belong to an embedded server that was generated by calling one of the overloads of Server.Create.</param>
      <param name="selector">An expression that reshapes the input as a stream of edge events.</param>
      <param name="advanceTimeSettings">Temporal characteristics of the input.</param>
      <param name="streamName">Name of the stream.A stream name supports “importing” CTI events from one stream to another using <see cref="T:Microsoft.ComplexEventProcessing.AdvanceTimeImportSettings" />. These settings require the user to indicate the name of the input stream from which the CTI events are imported.</param>
      <typeparam name="TInput">Type of the input.</typeparam>
      <typeparam name="TPayload">Type of the event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.ObservableCepStream.ToIntervalObservable``1(Microsoft.ComplexEventProcessing.Linq.CepStream{``0})">
      <summary>Converts a <see cref="T:Microsoft.ComplexEventProcessing.Linq.CepStream" /> of interval events to an event sink that implements the IObservable interface. The order of events is <see cref="F:Microsoft.ComplexEventProcessing.StreamEventOrder.FullyOrdered" />.</summary>
      <returns>An event sink that supports observation.</returns>
      <param name="stream">The fully bound event source from which the observable event sink is created.</param>
      <typeparam name="TPayload">Type of the event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.ObservableCepStream.ToIntervalObservable``1(Microsoft.ComplexEventProcessing.Linq.CepStream{``0},Microsoft.ComplexEventProcessing.StreamEventOrder)">
      <summary>Converts a <see cref="T:Microsoft.ComplexEventProcessing.Linq.CepStream" /> of interval events with the specified event order to an event sink that implements the IObservable interface.</summary>
      <returns>An event sink that supports observation.</returns>
      <param name="stream">The fully bound event source from which the observable event sink is created.</param>
      <param name="streamEventOrder">One of the enumeration values that specifies how events are ordered.</param>
      <typeparam name="TPayload">Type of the event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.ObservableCepStream.ToIntervalStream``2(System.IObservable{``0},Microsoft.ComplexEventProcessing.Application,System.Linq.Expressions.Expression{System.Func{``0,Microsoft.ComplexEventProcessing.IntervalEvent{``1}}},Microsoft.ComplexEventProcessing.AdvanceTimeSettings,System.String)">
      <summary>Converts an observable input stream to a stream of interval events, and provides the temporal characteristics of the input.</summary>
      <returns>A stream of interval events.</returns>
      <param name="source">The observable input stream.</param>
      <param name="application">Application instance that hosts the event source. This parameter cannot be null. The application must belong to an embedded server that was generated by calling one of the overloads of Server.Create.</param>
      <param name="selector">An expression that reshapes the input as a stream of interval events.</param>
      <param name="advanceTimeSettings">Temporal characteristics of the input.</param>
      <param name="streamName">Name of the stream.A stream name supports “importing” CTI events from one stream to another using <see cref="T:Microsoft.ComplexEventProcessing.AdvanceTimeImportSettings" />. These settings require the user to indicate the name of the input stream from which the CTI events are imported.</param>
      <typeparam name="TInput">Type of the input.</typeparam>
      <typeparam name="TPayload">Type of the event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.ObservableCepStream.ToObservable``1(Microsoft.ComplexEventProcessing.Linq.CepStream{``0})">
      <summary>Converts a stream of events to observable output by removing event headers and discarding CTI events.</summary>
      <returns>Observable output.</returns>
      <param name="stream">Stream of events to convert.</param>
      <typeparam name="TPayload">Type of the event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.ObservableCepStream.ToObservable``1(Microsoft.ComplexEventProcessing.Linq.CepStream{``0},Microsoft.ComplexEventProcessing.StreamEventOrder)">
      <summary>Converts a stream of events to observable output with the specified event order by removing event headers and discarding CTI events.</summary>
      <returns>Observable output.</returns>
      <param name="stream">Stream of events to convert.</param>
      <param name="streamEventOrder">Order of the events in the output.</param>
      <typeparam name="TPayload">Type of the event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.ObservableCepStream.ToPointObservable``1(Microsoft.ComplexEventProcessing.Linq.CepStream{``0})">
      <summary>Converts a <see cref="T:Microsoft.ComplexEventProcessing.Linq.CepStream" /> of point events to an event sink that implements the IObservable interface. The order of events is <see cref="F:Microsoft.ComplexEventProcessing.StreamEventOrder.FullyOrdered" />.</summary>
      <returns> An event sink that supports observation.</returns>
      <param name="stream">The fully bound event source from which the observable event sink is created.</param>
      <typeparam name="TPayload">Type of the event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.ObservableCepStream.ToPointObservable``1(Microsoft.ComplexEventProcessing.Linq.CepStream{``0},Microsoft.ComplexEventProcessing.StreamEventOrder)">
      <summary>Converts a <see cref="T:Microsoft.ComplexEventProcessing.Linq.CepStream" /> of point events with the specified event order to an event sink that implements the IObservable interface.</summary>
      <returns> An event sink that supports observation.</returns>
      <param name="stream">The fully bound event source from which the observable event sink is created.</param>
      <param name="streamEventOrder">One of the enumeration values that specifies how events are ordered.</param>
      <typeparam name="TPayload">Type of the event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.ObservableCepStream.ToPointStream``2(System.IObservable{``0},Microsoft.ComplexEventProcessing.Application,System.Linq.Expressions.Expression{System.Func{``0,Microsoft.ComplexEventProcessing.PointEvent{``1}}},Microsoft.ComplexEventProcessing.AdvanceTimeSettings,System.String)">
      <summary>Converts an observable input stream to a stream of point events, and provides the temporal characteristics of the input.</summary>
      <returns>A stream of point events.</returns>
      <param name="source">The observable input stream.</param>
      <param name="application">Application instance that hosts the event source. This parameter cannot be null. The application must belong to an embedded server that was generated by calling one of the overloads of Server.Create.</param>
      <param name="selector">An expression that reshapes the input as a stream of point events.</param>
      <param name="advanceTimeSettings">Temporal characteristics of the input.</param>
      <param name="streamName">Name of the stream.A stream name supports “importing” CTI events from one stream to another using <see cref="T:Microsoft.ComplexEventProcessing.AdvanceTimeImportSettings" />. These settings require the user to indicate the name of the input stream from which the CTI events are imported.</param>
      <typeparam name="TInput">Type of the input.</typeparam>
      <typeparam name="TPayload">Type of the event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.ObservableCepStream.ToStream``1(System.IObservable{Microsoft.ComplexEventProcessing.EdgeEvent{``0}},Microsoft.ComplexEventProcessing.Application,Microsoft.ComplexEventProcessing.AdvanceTimeSettings,System.String)">
      <summary>Translates an event source that implements the IObservable interface into a <see cref="T:Microsoft.ComplexEventProcessing.Linq.CepStream" /> that can be queried.</summary>
      <returns>A stream definition for the observable event source that can be used to compose queries.</returns>
      <param name="source">The observable input stream.</param>
      <param name="application">Application instance that hosts the event source. This parameter cannot be null. The application must belong to an embedded server that was generated by calling one of the overloads of Server.Create.</param>
      <param name="advanceTimeSettings">Temporal characteristics of the input.</param>
      <param name="streamName">Name of the stream.A stream name supports “importing” CTI events from one stream to another using <see cref="T:Microsoft.ComplexEventProcessing.AdvanceTimeImportSettings" />. These settings require the user to indicate the name of the input stream from which the CTI events are imported.</param>
      <typeparam name="TPayload">Type of the event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.ObservableCepStream.ToStream``1(System.IObservable{Microsoft.ComplexEventProcessing.IntervalEvent{``0}},Microsoft.ComplexEventProcessing.Application,Microsoft.ComplexEventProcessing.AdvanceTimeSettings,System.String)">
      <summary>Translates an event source that implements the IObservable interface into a <see cref="T:Microsoft.ComplexEventProcessing.Linq.CepStream" /> that can be queried.</summary>
      <returns>A stream definition for the observable event source that can be used to compose queries.</returns>
      <param name="source">The observable input stream.</param>
      <param name="application">Application instance that hosts the event source. This parameter cannot be null. The application must belong to an embedded server that was generated by calling one of the overloads of Server.Create.</param>
      <param name="advanceTimeSettings">Temporal characteristics of the input.</param>
      <param name="streamName">Name of the stream.A stream name supports “importing” CTI events from one stream to another using <see cref="T:Microsoft.ComplexEventProcessing.AdvanceTimeImportSettings" />. These settings require the user to indicate the name of the input stream from which the CTI events are imported.</param>
      <typeparam name="TPayload">Type of the event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.ObservableCepStream.ToStream``1(System.IObservable{Microsoft.ComplexEventProcessing.PointEvent{``0}},Microsoft.ComplexEventProcessing.Application,Microsoft.ComplexEventProcessing.AdvanceTimeSettings,System.String)">
      <summary>Translates an event source that implements the IObservable interface into a <see cref="T:Microsoft.ComplexEventProcessing.Linq.CepStream" /> that can be queried.</summary>
      <returns>A stream definition for the observable event source that can be used to compose queries.</returns>
      <param name="source">The observable input stream.</param>
      <param name="application">Application instance that hosts the event source. This parameter cannot be null. The application must belong to an embedded server that was generated by calling one of the overloads of Server.Create.</param>
      <param name="advanceTimeSettings">Temporal characteristics of the input.</param>
      <param name="streamName">Name of the stream.A stream name supports “importing” CTI events from one stream to another using <see cref="T:Microsoft.ComplexEventProcessing.AdvanceTimeImportSettings" />. These settings require the user to indicate the name of the input stream from which the CTI events are imported.</param>
      <typeparam name="TPayload">Type of the event payload.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.ObservableCepStream.Where``1(Microsoft.ComplexEventProcessing.Linq.ICepObservable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Filters events from an observable input stream using the specified filter expression.</summary>
      <returns>The observable stream of filtered events..</returns>
      <param name="source">The observable source to be filtered. This parameter cannot be null.</param>
      <param name="predicate">The selection predicate. This parameter cannot be null.</param>
      <typeparam name="TInput">Type of the source.</typeparam>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.QStreamable">
      <summary>Represents operator extension methods for IQStreamable temporal stream queries.</summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.QStreamable.AlterEventDuration``1(Microsoft.ComplexEventProcessing.Linq.IQStreamable{``0},System.Linq.Expressions.Expression{System.Func{Microsoft.ComplexEventProcessing.Linq.CepEvent{``0},System.TimeSpan}})">
      <summary>Alters the duration of events without affecting start time.</summary>
      <returns>The altered stream.</returns>
      <param name="source">The input stream.</param>
      <param name="durationSelector">The function modifying the duration of events.</param>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.QStreamable.AlterEventLifetime``1(Microsoft.ComplexEventProcessing.Linq.IQStreamable{``0},System.Linq.Expressions.Expression{System.Func{Microsoft.ComplexEventProcessing.Linq.CepEvent,System.DateTime}},System.Linq.Expressions.Expression{System.Func{Microsoft.ComplexEventProcessing.Linq.CepEvent{``0},System.TimeSpan}})">
      <summary>Alters the lifetime of events.</summary>
      <returns>The altered stream.</returns>
      <param name="source">The input stream.</param>
      <param name="startTimeSelector">The function modifying the start time of events.</param>
      <param name="durationSelector">The function modifying the duration of events.</param>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.QStreamable.AlterEventStartTime``1(Microsoft.ComplexEventProcessing.Linq.IQStreamable{``0},System.Linq.Expressions.Expression{System.Func{Microsoft.ComplexEventProcessing.Linq.CepEvent,System.DateTime}})">
      <summary>Alters the start time of events without affecting duration.</summary>
      <returns>The altered stream.</returns>
      <param name="source">The input stream.</param>
      <param name="startTimeSelector">The function modifying the start time of events.</param>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.QStreamable.ClipEventDuration``3(Microsoft.ComplexEventProcessing.Linq.IQStreamable{``0},Microsoft.ComplexEventProcessing.Linq.IQStreamable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
      <summary>Clips the end time of events in source to the start time of the next corresponding event in clip with matching key value.</summary>
      <typeparam name="TSource">The source stream payload type.</typeparam>
      <typeparam name="TClip">The clip stream payload type.</typeparam>
      <typeparam name="TKey">Key type.</typeparam>
      <param name="source">The source stream.</param>
      <param name="clip">The clip stream.</param>
      <param name="sourceKeySelector">Key selector for source stream.</param>
      <param name="clipKeySelector">Key selector for clip stream.</param>
      <returns>Altered stream.</returns>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.QStreamable.ClipEventDuration``2(Microsoft.ComplexEventProcessing.Linq.IQStreamable{``0},Microsoft.ComplexEventProcessing.Linq.IQStreamable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
      <summary>Clips the end time of events in source to the start time of the next corresponding event in clip matching predicate.</summary>
      <returns>The altered stream.</returns>
      <param name="source">The source stream.</param>
      <param name="clip">The clip stream.</param>
      <param name="predicate">The join predicate.</param>
      <typeparam name="TSource">The source stream payload type.</typeparam>
      <typeparam name="TClip">The clip stream payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.QStreamable.CountWindow``1(Microsoft.ComplexEventProcessing.Linq.IQStreamable{``0},System.UInt32)">
      <summary>Produces a windowed stream based on a count. Each window consists of events with count unique start times. The window slides when a new event arrives with a distinct start time.</summary>
      <returns>The windowed stream.</returns>
      <param name="source">The source stream.</param>
      <param name="count">The numbers of unique start times.</param>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.QStreamable.GroupBy``2(Microsoft.ComplexEventProcessing.Linq.IQStreamable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Partition operator.</summary>
      <returns>The partitioned stream.</returns>
      <param name="source">The input stream.</param>
      <param name="keySelector">The key projection expression.</param>
      <typeparam name="TPayload">The input payload type.</typeparam>
      <typeparam name="TKey">The type of partition key.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.QStreamable.GroupBy``3(Microsoft.ComplexEventProcessing.Linq.IQStreamable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
      <summary>Partition operator.</summary>
      <returns>The partitioned stream.</returns>
      <param name="source">The input stream.</param>
      <param name="keySelector">The key projection expression.</param>
      <param name="resultSelector">The result projection expression.</param>
      <typeparam name="TSource">The input payload type.</typeparam>
      <typeparam name="TKey">The type of partition key.</typeparam>
      <typeparam name="TResult">The type of result.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.QStreamable.HoppingWindow``1(Microsoft.ComplexEventProcessing.Linq.IQStreamable{``0},System.TimeSpan,System.TimeSpan)">
      <summary>Produces a windowed stream based on window definition. Hopping windows are characterized by a window duration and a hop size representing the window period.</summary>
      <returns>The windowed stream.</returns>
      <param name="source">The source stream.</param>
      <param name="windowSize">The size of window.</param>
      <param name="hopSize">The hop size.</param>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.QStreamable.HoppingWindow``1(Microsoft.ComplexEventProcessing.Linq.IQStreamable{``0},System.TimeSpan,System.TimeSpan,System.DateTime)">
      <summary>Produces a windowed stream based on window definition. Hopping windows are characterized by a window duration and a hop size representing the window period.</summary>
      <returns>The windowed stream.</returns>
      <param name="source">The source stream.</param>
      <param name="windowSize">The size of a window.</param>
      <param name="hopSize">The hop size.</param>
      <param name="alignment">The start times of windows are aligned with the given value which must have DateTimeKind.Utc.</param>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.QStreamable.Join``4(Microsoft.ComplexEventProcessing.Linq.IQStreamable{``0},Microsoft.ComplexEventProcessing.Linq.IQStreamable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
      <summary>Joins events with coincident lifetimes and matching key values.</summary>
      <returns>The join result stream.</returns>
      <param name="left">The left input stream.</param>
      <param name="right">The right input stream.</param>
      <param name="leftKeySelector">The left key selector.</param>
      <param name="rightKeySelector">The right key selector.</param>
      <param name="resultSelector">The result projection expression.</param>
      <typeparam name="TLeft">The left input stream payload type.</typeparam>
      <typeparam name="TRight">The right input stream payload type.</typeparam>
      <typeparam name="TKey">The join key type.</typeparam>
      <typeparam name="TResult">The result payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.QStreamable.LeftAntiJoin``3(Microsoft.ComplexEventProcessing.Linq.IQStreamable{``0},Microsoft.ComplexEventProcessing.Linq.IQStreamable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
      <summary>
      Returns <paramref name="left"/> events when no coincident <paramref name="right"/> events
      have matching key values.
      </summary>
      <param name="left">The left input stream.</param>
      <param name="right">The right input stream.</param>
      <param name="leftKeySelector">The left key selector.</param>
      <param name="rightKeySelector">The right key selector.</param>
      <typeparam name="TLeft">The left input stream payload type.</typeparam>
      <typeparam name="TRight">The right input stream payload type.</typeparam>
      <typeparam name="TKey">The join key type.</typeparam>
      <returns>The anti-join result stream.</returns>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.QStreamable.LeftAntiJoin``2(Microsoft.ComplexEventProcessing.Linq.IQStreamable{``0},Microsoft.ComplexEventProcessing.Linq.IQStreamable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
      <summary>
        Returns <paramref name="left"/> events when no coincident <paramref name="right"/> events
        match the given <paramref name="predicate"/>.
      </summary>
      <typeparam name="TLeft">The left input stream payload type.</typeparam>
      <typeparam name="TRight">The right input stream payload type.</typeparam>
      <param name="left">The left input stream.</param>
      <param name="right">The right input stream.</param>
      <param name="predicate">Predicate matching left and right events.</param>
      <returns>The anti-join result stream.</returns>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.QStreamable.Multicast``2(Microsoft.ComplexEventProcessing.Linq.IQStreamable{``0},System.Linq.Expressions.Expression{System.Func{Microsoft.ComplexEventProcessing.Linq.IQStreamable{``0},Microsoft.ComplexEventProcessing.Linq.IQStreamable{``1}}})">
      <summary>Multicast operator.</summary>
      <returns>The multicast stream result.</returns>
      <param name="source">The input stream.</param>
      <param name="streamSelector">The stream selector.</param>
      <typeparam name="TSource">The input payload type.</typeparam>
      <typeparam name="TResult">The output payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.QStreamable.OrderBy``2(Microsoft.ComplexEventProcessing.Linq.IQWindowSource{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Orders the contents of a window based on a key.</summary>
      <returns>The ordered window.</returns>
      <param name="source">The window.</param>
      <param name="keySelector">The order key selector.</param>
      <typeparam name="TPayload">The window payload type.</typeparam>
      <typeparam name="TKey">The key type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.QStreamable.OrderByDescending``2(Microsoft.ComplexEventProcessing.Linq.IQWindowSource{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Orders the contents of a window based on a key in descending order.</summary>
      <returns>The ordered window.</returns>
      <param name="source">The window.</param>
      <param name="keySelector">The order key selector.</param>
      <typeparam name="TPayload">The window payload type.</typeparam>
      <typeparam name="TKey">The key type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.QStreamable.Scan``3(Microsoft.ComplexEventProcessing.Linq.IQStreamable{``1},System.Linq.Expressions.Expression{System.Func{Microsoft.ComplexEventProcessing.Extensibility.CepStreamOperator{``0,``1,``2}}})">
      <summary>Scans a stream using a user-defined stream operator.</summary>
      <returns>The result stream.</returns>
      <param name="source">The source stream.</param>
      <param name="initializeOp">The function initializing user-defined stream operator.</param>
      <typeparam name="TSourceEvent">The source event type.</typeparam>
      <typeparam name="TSource">The source payload type.</typeparam>
      <typeparam name="TResult">The result payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.QStreamable.Select``2(Microsoft.ComplexEventProcessing.Linq.IQOrderedWindow{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Projection operator over ordered window.</summary>
      <returns>The ordered window.</returns>
      <param name="source">The input ordered window.</param>
      <param name="selector">The projection expression.</param>
      <typeparam name="TSource">The input payload type.</typeparam>
      <typeparam name="TResult">The output payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.QStreamable.Select``2(Microsoft.ComplexEventProcessing.Linq.IQStreamable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Projection operator.</summary>
      <returns>The projected stream.</returns>
      <param name="source">The input stream.</param>
      <param name="selector">The projection expression.</param>
      <typeparam name="TSource">The input payload type.</typeparam>
      <typeparam name="TResult">The output payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.QStreamable.Select``2(Microsoft.ComplexEventProcessing.Linq.IQWindowedStreamable{``0},System.Linq.Expressions.Expression{System.Func{Microsoft.ComplexEventProcessing.Linq.CepWindow{``0},``1}})">
      <summary>Projection method supporting aggregate computations over windows.</summary>
      <returns>The aggregate result stream.</returns>
      <param name="source">The windowed source.</param>
      <param name="selector">The aggregate projection expression.</param>
      <typeparam name="TSource">The source payload type.</typeparam>
      <typeparam name="TResult">The result payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.QStreamable.SelectMany``4(Microsoft.ComplexEventProcessing.Linq.IQPartitionedStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{Microsoft.ComplexEventProcessing.Linq.IQStreamable{``1},Microsoft.ComplexEventProcessing.Linq.IQStreamable{``2}}},System.Linq.Expressions.Expression{System.Func{Microsoft.ComplexEventProcessing.Linq.IKey{``0},``2,``3}})">
      <summary>Merges operator for partitioned stream.</summary>
      <returns>The merged stream.</returns>
      <param name="source">The partitioned stream source.</param>
      <param name="streamSelector">The function returning a result stream given a partition stream.</param>
      <param name="resultSelector">The projection expression.</param>
      <typeparam name="TKey">The partition key type.</typeparam>
      <typeparam name="TSource">The source payload type.</typeparam>
      <typeparam name="TBind">The intermediate payload type.</typeparam>
      <typeparam name="TResult">The result payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.QStreamable.SelectMany``3(Microsoft.ComplexEventProcessing.Linq.IQPartitionedStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{Microsoft.ComplexEventProcessing.Linq.IQStreamable{``1},Microsoft.ComplexEventProcessing.Linq.IQStreamable{``2}}})">
      <summary>Merges operator for partitioned stream.</summary>
      <returns>The merged stream.</returns>
      <param name="source">The partitioned stream source.</param>
      <param name="streamSelector">The function returning a result stream given a partition stream.</param>
      <typeparam name="TKey">The partition key type.</typeparam>
      <typeparam name="TSource">The source payload type.</typeparam>
      <typeparam name="TResult">The result payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.QStreamable.SelectMany``4(Microsoft.ComplexEventProcessing.Linq.IQPartitionedStreamable{``0,``1},System.Linq.Expressions.Expression{System.Func{Microsoft.ComplexEventProcessing.Linq.IQStreamable{``1},Microsoft.ComplexEventProcessing.Linq.IQWindowedStreamable{``2}}},System.Linq.Expressions.Expression{System.Func{Microsoft.ComplexEventProcessing.Linq.IKey{``0},Microsoft.ComplexEventProcessing.Linq.CepWindow{``2},``3}})">
      <summary>Merges aggregate operator for partitioned stream.</summary>
      <returns>The merged stream.</returns>
      <param name="source">The partitioned stream source.</param>
      <param name="streamSelector">The function returning a windowed stream given a partition stream.</param>
      <param name="resultSelector">The aggregate projection expression.</param>
      <typeparam name="TKey">The partition key type.</typeparam>
      <typeparam name="TSource">The source payload type.</typeparam>
      <typeparam name="TBind">The intermediate payload type.</typeparam>
      <typeparam name="TResult">The result payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.QStreamable.SelectMany``3(Microsoft.ComplexEventProcessing.Linq.IQStreamable{``0},System.Linq.Expressions.Expression{System.Func{System.Reactive.Unit,Microsoft.ComplexEventProcessing.Linq.IQStreamable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>Cross-join operator.</summary>
      <returns>The join stream.</returns>
      <param name="left">The left input stream.</param>
      <param name="right">The definition of right input stream.</param>
      <param name="resultSelector">The result projection expression.</param>
      <typeparam name="TLeft">The left input payload type.</typeparam>
      <typeparam name="TRight">The right input payload type.</typeparam>
      <typeparam name="TResult">The output payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.QStreamable.SelectMany``3(Microsoft.ComplexEventProcessing.Linq.IQWindowedStreamable{``0},System.Linq.Expressions.Expression{System.Func{Microsoft.ComplexEventProcessing.Linq.IQWindowSource{``0},Microsoft.ComplexEventProcessing.Linq.IQWindowResult{``1}}},System.Linq.Expressions.Expression{System.Func{System.Reactive.Unit,``1,``2}})">
      <summary>Binds operator returning a stream of results given a function from window to window results.</summary>
      <returns>The stream combining all window results.</returns>
      <param name="source">The windowed source.</param>
      <param name="windowResultSelector">The selector generating a window result.</param>
      <param name="resultSelector">The result projection expression.</param>
      <typeparam name="TSource">The source payload type.</typeparam>
      <typeparam name="TBind">The payload type of window results.</typeparam>
      <typeparam name="TResult">The payload type of result.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.QStreamable.SelectMany``2(Microsoft.ComplexEventProcessing.Linq.IQWindowedStreamable{``0},System.Linq.Expressions.Expression{System.Func{Microsoft.ComplexEventProcessing.Linq.IQWindowSource{``0},Microsoft.ComplexEventProcessing.Linq.IQWindowResult{``1}}})">
      <summary>Binds operator returning a stream of results given a function from window to window results.</summary>
      <returns>The stream combining all window results.</returns>
      <param name="source">The windowed source.</param>
      <param name="windowResultSelector">The selector generating a window result.</param>
      <typeparam name="TSource">The source payload type.</typeparam>
      <typeparam name="TResult">The payload type of result.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.QStreamable.ShiftEventTime``1(Microsoft.ComplexEventProcessing.Linq.IQStreamable{``0},System.Linq.Expressions.Expression{System.Func{Microsoft.ComplexEventProcessing.Linq.CepEvent,System.TimeSpan}})">
      <summary>Shifts events by offsets specified by the shiftSelector parameter.</summary>
      <returns>The altered stream.</returns>
      <param name="source">The input stream.</param>
      <param name="shiftSelector">The function determining the offset applied to each event.</param>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.QStreamable.SnapshotWindow``1(Microsoft.ComplexEventProcessing.Linq.IQStreamable{``0})">
      <summary>Produces a windowed stream based on snapshots. Windows are defined by event boundaries in source.</summary>
      <returns>The windowed stream.</returns>
      <param name="source">The source stream.</param>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.QStreamable.Take``1(Microsoft.ComplexEventProcessing.Linq.IQOrderedWindow{``0},System.UInt32)">
      <summary>Takes the top count elements from an ordered window. If there are ties, all elements with the lowest rank are returned.</summary>
      <returns>The window containing count elements.</returns>
      <param name="source">The input ordered window.</param>
      <param name="count">The number of elements to take.</param>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.QStreamable.Take``2(Microsoft.ComplexEventProcessing.Linq.IQOrderedWindow{``0},System.UInt32,System.Linq.Expressions.Expression{System.Func{Microsoft.ComplexEventProcessing.Linq.CepRankedEvent{``0},``1}})">
      <summary>Takes the top count elements from an ordered window. If there are ties, all elements with the lowest rank are returned.</summary>
      <returns>The window containing count elements.</returns>
      <param name="source">The input ordered window.</param>
      <param name="count">The number of elements to take.</param>
      <param name="selector">The projection expression supporting production of result elements including ranks.</param>
      <typeparam name="TSource">The source payload type.</typeparam>
      <typeparam name="TResult">The output payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.QStreamable.ThenBy``2(Microsoft.ComplexEventProcessing.Linq.IQOrderedWindow{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Adds an ordering key to an ordered window definition.</summary>
      <returns>The ordered window.</returns>
      <param name="source">The window.</param>
      <param name="keySelector">The order key selector.</param>
      <typeparam name="TPayload">The window payload type.</typeparam>
      <typeparam name="TKey">The key type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.QStreamable.ThenByDescending``2(Microsoft.ComplexEventProcessing.Linq.IQOrderedWindow{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Adds an ordering key to an ordered window definition where the key is used for descending order.</summary>
      <returns>The ordered window.</returns>
      <param name="source">The window.</param>
      <param name="keySelector">The order key selector.</param>
      <typeparam name="TPayload">The window payload type.</typeparam>
      <typeparam name="TKey">The key type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.QStreamable.ToPointEventStream``1(Microsoft.ComplexEventProcessing.Linq.IQStreamable{``0})">
      <summary>Turns events in the input stream into point events.</summary>
      <returns>The altered stream.</returns>
      <param name="source">The input stream.</param>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.QStreamable.TumblingWindow``1(Microsoft.ComplexEventProcessing.Linq.IQStreamable{``0},System.TimeSpan)">
      <summary>Produces a windowed stream based on window definition.</summary>
      <returns>The windowed stream.</returns>
      <param name="source">The source stream.</param>
      <param name="windowSize">The size of a window.</param>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.QStreamable.TumblingWindow``1(Microsoft.ComplexEventProcessing.Linq.IQStreamable{``0},System.TimeSpan,System.DateTime)">
      <summary>Produces a windowed stream based on window definition.</summary>
      <returns>The windowed stream.</returns>
      <param name="source">The source stream.</param>
      <param name="windowSize">The size of a window.</param>
      <param name="alignment">The start times of windows are aligned with the given value which must have DateTimeKind.Utc.</param>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.QStreamable.Union``1(Microsoft.ComplexEventProcessing.Linq.IQStreamable{``0},Microsoft.ComplexEventProcessing.Linq.IQStreamable{``0})">
      <summary>Union operator.</summary>
      <returns>The stream consisting of events from the left and right input streams.</returns>
      <param name="left">The first input stream.</param>
      <param name="right">The second input stream.</param>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.QStreamable.UserDefinedOperator``2(Microsoft.ComplexEventProcessing.Linq.IQWindowSource{``0},System.Linq.Expressions.Expression{System.Func{Microsoft.ComplexEventProcessing.Extensibility.CepOperator{``0,``1}}})">
      <summary>Applies a user-defined operator to a window.</summary>
      <returns>The window containing results of computation.</returns>
      <param name="source">The input window.</param>
      <param name="initializeUdo">The function initializing UDO.</param>
      <typeparam name="TSource">The source payload type.</typeparam>
      <typeparam name="TResult">The result output type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.QStreamable.UserDefinedOperator``2(Microsoft.ComplexEventProcessing.Linq.IQWindowSource{``0},System.Linq.Expressions.Expression{System.Func{Microsoft.ComplexEventProcessing.Extensibility.CepTimeSensitiveOperator{``0,``1}}})">
      <summary>Applies a user-defined operator to a window.</summary>
      <returns>The window containing results of computation.</returns>
      <param name="source">The input window.</param>
      <param name="initializeUdo">The function initializing UDO.</param>
      <typeparam name="TSource">The source payload type.</typeparam>
      <typeparam name="TResult">The result output type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.QStreamable.Where``1(Microsoft.ComplexEventProcessing.Linq.IQStreamable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Selection operator.</summary>
      <returns>The filtered stream.</returns>
      <param name="source">The input stream.</param>
      <param name="predicate">The filter expression.</param>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.QueryGenerationException">
      <summary>Exception thrown from LINQ provider when the query cannot be correctly produced.</summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.QueryGenerationException.#ctor">
      <summary>Initializes a new instance of the QueryGenerateException class.</summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.QueryGenerationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the QueryGenerationException class.</summary>
      <param name="info">The SerializationInfo object that holds the serialized object data.</param>
      <param name="context">The StreamingContext object that contains the contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.QueryGenerationException.#ctor(System.String)">
      <summary>Initializes a new instance of the QueryGenerateException class.</summary>
      <param name="message">Error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.QueryGenerationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the QueryGenerateException class.</summary>
      <param name="message">Error message that explains the reason for the exception.</param>
      <param name="innerException">Exception that is the cause of the current exception.</param>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.RemoteEntityAttribute">
      <summary> Attribute that will be present on all context properties. This tells the LINQ provider that  the property represents an entity on the remote server and it has to be evaluated instead of  being sent to the server as part of the entity definition. </summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteEntityAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ComplexEventProcessing.Linq.RemoteEntityAttribute" /> class.</summary>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.RemoteProvider">
      <summary>Provides extension methods supporting definition, deployment, retrieval of and transition between sequences and temporal streams. </summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Bind``1(Microsoft.ComplexEventProcessing.Linq.IQStreamable{``0},Microsoft.ComplexEventProcessing.Linq.IRemoteObserver{Microsoft.ComplexEventProcessing.EdgeEvent{``0}})">
      <summary> Binds temporal stream to edge event observer sink. </summary>
      <returns>The binding between the <paramref name="source" /> and <paramref name="sink" />.</returns>
      <param name="source">The streamable source.</param>
      <param name="sink">The sequence sink.</param>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Bind``1(Microsoft.ComplexEventProcessing.Linq.IQStreamable{``0},Microsoft.ComplexEventProcessing.Linq.IRemoteObserver{Microsoft.ComplexEventProcessing.IntervalEvent{``0}})">
      <summary> Binds temporal stream to interval event observer sink. </summary>
      <returns>The binding between the <paramref name="source" /> and <paramref name="sink" />.</returns>
      <param name="source">The streamable source.</param>
      <param name="sink">The sequence sink.</param>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Bind``1(Microsoft.ComplexEventProcessing.Linq.IQStreamable{``0},Microsoft.ComplexEventProcessing.Linq.IRemoteObserver{Microsoft.ComplexEventProcessing.PointEvent{``0}})">
      <summary> Binds temporal stream to point event observer sink. </summary>
      <returns>The binding between the <paramref name="source" /> and <paramref name="sink" />.</returns>
      <param name="source">The streamable source.</param>
      <param name="sink">The sequence sink.</param>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Bind``1(Microsoft.ComplexEventProcessing.Linq.IQStreamable{``0},Microsoft.ComplexEventProcessing.Linq.IRemoteObserver{``0})">
      <summary> Binds temporal stream to observer sink. </summary>
      <returns>The binding between the <paramref name="source" /> and <paramref name="sink" />.</returns>
      <param name="source">The streamable source.</param>
      <param name="sink">The sequence sink.</param>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Bind``1(Microsoft.ComplexEventProcessing.Linq.IQStreamable{``0},Microsoft.ComplexEventProcessing.Linq.IRemoteStreamableSink{``0})">
      <summary> Binds temporal stream source to temporal stream sink. </summary>
      <returns>The binding between the <paramref name="source" /> and <paramref name="sink" />.</returns>
      <param name="source">The streamable source.</param>
      <param name="sink">The stream sink.</param>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Bind``1(Microsoft.ComplexEventProcessing.Linq.IQStreamable{``0},System.Func{System.Nullable{System.DateTimeOffset},System.Int32,Microsoft.ComplexEventProcessing.Linq.IRemoteObserver{Microsoft.ComplexEventProcessing.EdgeEvent{``0}}})">
      <summary> Binds temporal stream to edge event observer parameterized on high-water mark and offset. </summary>
      <returns>The binding between the <paramref name="source" /> and <paramref name="sink" />.</returns>
      <param name="source">The streamable source.</param>
      <param name="sink">A function returning an observer given high-water mark (DateTimeOffset?) and offset for the last completed checkpoint. Where no checkpoint has completed, the high-water mark is null.</param>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Bind``1(Microsoft.ComplexEventProcessing.Linq.IQStreamable{``0},System.Func{System.Nullable{System.DateTimeOffset},System.Int32,Microsoft.ComplexEventProcessing.Linq.IRemoteObserver{Microsoft.ComplexEventProcessing.IntervalEvent{``0}}})">
      <summary> Binds temporal stream to interval event observer parameterized on high-water mark and offset. </summary>
      <returns>The binding between the <paramref name="source" /> and <paramref name="sink" />.</returns>
      <param name="source">The streamable source.</param>
      <param name="sink">A function returning an observer given high-water mark (DateTimeOffset?) and offset for the last completed checkpoint. Where no checkpoint has completed, the high-water mark is null.</param>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Bind``1(Microsoft.ComplexEventProcessing.Linq.IQStreamable{``0},System.Func{System.Nullable{System.DateTimeOffset},System.Int32,Microsoft.ComplexEventProcessing.Linq.IRemoteObserver{Microsoft.ComplexEventProcessing.PointEvent{``0}}})">
      <summary> Binds temporal stream to point event observer parameterized on high-water mark and offset. </summary>
      <returns>The binding between the <paramref name="source" /> and <paramref name="sink" />.</returns>
      <param name="source">The streamable source.</param>
      <param name="sink">A function returning an observer given high-water mark (DateTimeOffset?) and offset for the last completed checkpoint. Where no checkpoint has completed, the high-water mark is null.</param>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Bind``1(System.Linq.IQueryable{``0},Microsoft.ComplexEventProcessing.Linq.IRemoteObserver{``0})">
      <summary> Binds an enumerable sequence to an observer. </summary>
      <returns>The binding between the <paramref name="source" /> and <paramref name="sink" />.</returns>
      <param name="source">The enumerable sequence to subscribe to.</param>
      <param name="sink">The observer that will receive notifications from the enumerable sequence.</param>
      <typeparam name="TElement">The sequence element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Bind``1(System.Linq.IQueryable{``0},Microsoft.ComplexEventProcessing.Linq.IRemoteObserver{``0},System.Reactive.Concurrency.IScheduler)">
      <summary> Binds an enumerable sequence to an observer. </summary>
      <returns>The binding between the <paramref name="source" /> and <paramref name="sink" />.</returns>
      <param name="source">The enumerable sequence to subscribe to.</param>
      <param name="sink">The observer that will receive notifications from the enumerable sequence.</param>
      <param name="scheduler">The scheduler to perform the enumeration on.</param>
      <typeparam name="TElement">The sequence element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Bind``1(System.Reactive.Linq.IQbservable{``0},Microsoft.ComplexEventProcessing.Linq.IRemoteObserver{``0})">
      <summary> Binds observable source to observer sink. </summary>
      <returns>The binding between the <paramref name="source" /> and <paramref name="sink" />.</returns>
      <param name="source">The sequence source.</param>
      <param name="sink">The sequence sink.</param>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.CreateSubject``2(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String,System.Linq.Expressions.Expression{System.Func{System.Reactive.Subjects.ISubject{``0,``1}}})">
      <summary> Defines and deploys a remote subject. </summary>
      <returns>The remote subject.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The subject identifier.</param>
      <param name="definition">The subject definition.</param>
      <typeparam name="TSource">The input element type.</typeparam>
      <typeparam name="TResult">The output element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineEnumerable``1(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.IEnumerable{``0}}})">
      <summary> Defines a remote sequence. </summary>
      <returns>The remote sequence.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The sequence definition.</param>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineEnumerable``10(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Collections.Generic.IEnumerable{``9}}})">
      <summary> Defines a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineEnumerable``11(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Collections.Generic.IEnumerable{``10}}})">
      <summary> Defines a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineEnumerable``12(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Collections.Generic.IEnumerable{``11}}})">
      <summary> Defines a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineEnumerable``13(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Collections.Generic.IEnumerable{``12}}})">
      <summary> Defines a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineEnumerable``14(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Collections.Generic.IEnumerable{``13}}})">
      <summary> Defines a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineEnumerable``15(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Collections.Generic.IEnumerable{``14}}})">
      <summary> Defines a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="T14">The fourteenth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineEnumerable``16(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Collections.Generic.IEnumerable{``15}}})">
      <summary> Defines a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="T14">The fourteenth parameter type.</typeparam>
      <typeparam name="T15">The fifteenth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineEnumerable``17(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Collections.Generic.IEnumerable{``16}}})">
      <summary> Defines a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="T14">The fourteenth parameter type.</typeparam>
      <typeparam name="T15">The fifteenth parameter type.</typeparam>
      <typeparam name="T16">The sixteenth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineEnumerable``2(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
      <summary> Defines a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineEnumerable``3(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,System.Collections.Generic.IEnumerable{``2}}})">
      <summary> Defines a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineEnumerable``4(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{``3}}})">
      <summary> Defines a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineEnumerable``5(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,System.Collections.Generic.IEnumerable{``4}}})">
      <summary> Defines a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineEnumerable``6(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,System.Collections.Generic.IEnumerable{``5}}})">
      <summary> Defines a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineEnumerable``7(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,System.Collections.Generic.IEnumerable{``6}}})">
      <summary> Defines a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineEnumerable``8(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,System.Collections.Generic.IEnumerable{``7}}})">
      <summary> Defines a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineEnumerable``9(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Collections.Generic.IEnumerable{``8}}})">
      <summary> Defines a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineObservable``1(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{System.IObservable{``0}}})">
      <summary> Defines a remote sequence. </summary>
      <returns>The remote sequence.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The sequence definition.</param>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineObservable``10(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.IObservable{``9}}})">
      <summary> Define a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineObservable``11(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.IObservable{``10}}})">
      <summary> Define a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineObservable``12(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.IObservable{``11}}})">
      <summary> Define a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineObservable``13(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.IObservable{``12}}})">
      <summary> Define a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The hird parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineObservable``14(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.IObservable{``13}}})">
      <summary> Define a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineObservable``15(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.IObservable{``14}}})">
      <summary> Define a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="T14">The fourteenth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineObservable``16(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.IObservable{``15}}})">
      <summary> Define a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="T14">The fourteenth parameter type.</typeparam>
      <typeparam name="T15">The fifteenth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineObservable``17(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.IObservable{``16}}})">
      <summary> Define a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="T14">The fourteenth parameter type.</typeparam>
      <typeparam name="T15">The fifteenth parameter type.</typeparam>
      <typeparam name="T16">The sixteenth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineObservable``2(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,System.IObservable{``1}}})">
      <summary> Define a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineObservable``3(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,System.IObservable{``2}}})">
      <summary> Define a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineObservable``4(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,System.IObservable{``3}}})">
      <summary> Define a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineObservable``5(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,System.IObservable{``4}}})">
      <summary> Define a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineObservable``6(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,System.IObservable{``5}}})">
      <summary> Define a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineObservable``7(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,System.IObservable{``6}}})">
      <summary> Define a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineObservable``8(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,System.IObservable{``7}}})">
      <summary> Define a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineObservable``9(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.IObservable{``8}}})">
      <summary> Define a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineObserver``1(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{System.IObserver{``0}}})">
      <summary> Defines a remote observer. </summary>
      <returns>The remote observer.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The observer definition.</param>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineObserver``10(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.IObserver{``9}}})">
      <summary> Defines a remote function that returns a observer. </summary>
      <returns>The remote observer function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineObserver``11(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.IObserver{``10}}})">
      <summary> Defines a remote function that returns a observer. </summary>
      <returns>The remote observer function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineObserver``12(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.IObserver{``11}}})">
      <summary> Defines a remote function that returns a observer. </summary>
      <returns>The remote observer function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineObserver``13(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.IObserver{``12}}})">
      <summary> Defines a remote function that returns a observer. </summary>
      <returns>The remote observer function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineObserver``14(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.IObserver{``13}}})">
      <summary> Defines a remote function that returns a observer. </summary>
      <returns>The remote observer function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineObserver``15(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.IObserver{``14}}})">
      <summary> Defines a remote function that returns a observer. </summary>
      <returns>The remote observer function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="T14">The fourteenth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineObserver``16(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.IObserver{``15}}})">
      <summary> Defines a remote function that returns a observer. </summary>
      <returns>The remote observer function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="T14">The fourteenth parameter type.</typeparam>
      <typeparam name="T15">The fifteenth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineObserver``17(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.IObserver{``16}}})">
      <summary> Defines a remote function that returns a observer. </summary>
      <returns>The remote observer function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="T14">The fourteenth parameter type.</typeparam>
      <typeparam name="T15">The fifteenth parameter type.</typeparam>
      <typeparam name="T16">The sixteenth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineObserver``2(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,System.IObserver{``1}}})">
      <summary> Defines a remote function that returns a observer. </summary>
      <returns>The remote observer function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineObserver``3(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,System.IObserver{``2}}})">
      <summary> Defines a remote function that returns a observer. </summary>
      <returns>The remote observer function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineObserver``4(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,System.IObserver{``3}}})">
      <summary> Defines a remote function that returns a observer. </summary>
      <returns>The remote observer function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineObserver``5(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,System.IObserver{``4}}})">
      <summary> Defines a remote function that returns a observer. </summary>
      <returns>The remote observer function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineObserver``6(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,System.IObserver{``5}}})">
      <summary> Defines a remote function that returns a observer. </summary>
      <returns>The remote observer function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineObserver``7(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,System.IObserver{``6}}})">
      <summary> Defines a remote function that returns a observer. </summary>
      <returns>The remote observer function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineObserver``8(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,System.IObserver{``7}}})">
      <summary> Defines a remote function that returns a observer. </summary>
      <returns>The remote observer function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineObserver``9(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.IObserver{``8}}})">
      <summary> Defines a remote function that returns a observer. </summary>
      <returns>The remote observer function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineStreamable``1(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{Microsoft.ComplexEventProcessing.Linq.IStreamable{``0}}})">
      <summary> Defines a remote temporal stream. </summary>
      <returns>The remote temporal stream.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The temporal stream definition.</param>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineStreamable``10(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,Microsoft.ComplexEventProcessing.Linq.IStreamable{``9}}})">
      <summary> Defines a remote function that returns a temporal stream. </summary>
      <returns>The remote function that returns a temporal stream.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineStreamable``11(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,Microsoft.ComplexEventProcessing.Linq.IStreamable{``10}}})">
      <summary> Defines a remote function that returns a temporal stream. </summary>
      <returns>The remote function that returns a temporal stream.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineStreamable``12(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,Microsoft.ComplexEventProcessing.Linq.IStreamable{``11}}})">
      <summary> Defines a remote function that returns a temporal stream. </summary>
      <returns>The remote function that returns a temporal stream.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineStreamable``13(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,Microsoft.ComplexEventProcessing.Linq.IStreamable{``12}}})">
      <summary> Defines a remote function that returns a temporal stream. </summary>
      <returns>The remote function that returns a temporal stream.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineStreamable``14(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,Microsoft.ComplexEventProcessing.Linq.IStreamable{``13}}})">
      <summary> Defines a remote function that returns a temporal stream. </summary>
      <returns>The remote function that returns a temporal stream.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineStreamable``15(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,Microsoft.ComplexEventProcessing.Linq.IStreamable{``14}}})">
      <summary> Defines a remote function that returns a temporal stream. </summary>
      <returns>The remote function that returns a temporal stream.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="T14">The fourteenth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineStreamable``16(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,Microsoft.ComplexEventProcessing.Linq.IStreamable{``15}}})">
      <summary> Defines a remote function that returns a temporal stream. </summary>
      <returns>The remote function that returns a temporal stream.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="T14">The fourteenth parameter type.</typeparam>
      <typeparam name="T15">The fifteenth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineStreamable``17(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,Microsoft.ComplexEventProcessing.Linq.IStreamable{``16}}})">
      <summary> Defines a remote function that returns a temporal stream. </summary>
      <returns>The remote function that returns a temporal stream.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="T14">The fourteenth parameter type.</typeparam>
      <typeparam name="T15">The fifteenth parameter type.</typeparam>
      <typeparam name="T16">The sixteenth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineStreamable``2(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,Microsoft.ComplexEventProcessing.Linq.IStreamable{``1}}})">
      <summary> Defines a remote function that returns a temporal stream. </summary>
      <returns>The remote function that returns a temporal stream.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineStreamable``3(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,Microsoft.ComplexEventProcessing.Linq.IStreamable{``2}}})">
      <summary> Defines a remote function that returns a temporal stream. </summary>
      <returns>The remote function that returns a temporal stream.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineStreamable``4(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,Microsoft.ComplexEventProcessing.Linq.IStreamable{``3}}})">
      <summary> Defines a remote function that returns a temporal stream. </summary>
      <returns>The remote function that returns a temporal stream.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineStreamable``5(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,Microsoft.ComplexEventProcessing.Linq.IStreamable{``4}}})">
      <summary> Defines a remote function that returns a temporal stream. </summary>
      <returns>The remote function that returns a temporal stream.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineStreamable``6(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,Microsoft.ComplexEventProcessing.Linq.IStreamable{``5}}})">
      <summary> Defines a remote function that returns a temporal stream. </summary>
      <returns>The remote function that returns a temporal stream.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineStreamable``7(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,Microsoft.ComplexEventProcessing.Linq.IStreamable{``6}}})">
      <summary> Defines a remote function that returns a temporal stream. </summary>
      <returns>The remote function that returns a temporal stream.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineStreamable``8(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,Microsoft.ComplexEventProcessing.Linq.IStreamable{``7}}})">
      <summary> Defines a remote function that returns a temporal stream. </summary>
      <returns>The remote function that returns a temporal stream.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineStreamable``9(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,Microsoft.ComplexEventProcessing.Linq.IStreamable{``8}}})">
      <summary> Defines a remote function that returns a temporal stream. </summary>
      <returns>The remote function that returns a temporal stream.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineStreamable``1(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Type,System.Object,Microsoft.ComplexEventProcessing.EventShape,Microsoft.ComplexEventProcessing.AdvanceTimeSettings)">
      <summary> Defines a remote temporal stream. </summary>
      <returns>The remote temporal stream.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="adapterFactoryType">The adapter factory type.</param>
      <param name="configInfo">The adapter configuration.</param>
      <param name="eventShape">The event shape.</param>
      <param name="advanceTimeSettings">The advance time settings.</param>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineStreamableSink``10(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,Microsoft.ComplexEventProcessing.Linq.IStreamableSink{``9}}})">
      <summary> Defines a remote function that returns a temporal stream sink. </summary>
      <returns>The remote function that returns a temporal stream sink.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineStreamableSink``11(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,Microsoft.ComplexEventProcessing.Linq.IStreamableSink{``10}}})">
      <summary> Defines a remote function that returns a temporal stream sink. </summary>
      <returns>The remote function that returns a temporal stream sink.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineStreamableSink``12(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,Microsoft.ComplexEventProcessing.Linq.IStreamableSink{``11}}})">
      <summary> Defines a remote function that returns a temporal stream sink. </summary>
      <returns>The remote function that returns a temporal stream sink.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineStreamableSink``13(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,Microsoft.ComplexEventProcessing.Linq.IStreamableSink{``12}}})">
      <summary> Defines a remote function that returns a temporal stream sink. </summary>
      <returns>The remote function that returns a temporal stream sink.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineStreamableSink``14(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,Microsoft.ComplexEventProcessing.Linq.IStreamableSink{``13}}})">
      <summary> Defines a remote function that returns a temporal stream sink. </summary>
      <returns>The remote function that returns a temporal stream sink.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineStreamableSink``15(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,Microsoft.ComplexEventProcessing.Linq.IStreamableSink{``14}}})">
      <summary> Defines a remote function that returns a temporal stream sink. </summary>
      <returns>The remote function that returns a temporal stream sink.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="T14">The fourteenth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineStreamableSink``16(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,Microsoft.ComplexEventProcessing.Linq.IStreamableSink{``15}}})">
      <summary> Defines a remote function that returns a temporal stream sink. </summary>
      <returns>The remote function that returns a temporal stream sink.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="T14">The fourteenth parameter type.</typeparam>
      <typeparam name="T15">The fifteenth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineStreamableSink``17(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,Microsoft.ComplexEventProcessing.Linq.IStreamableSink{``16}}})">
      <summary> Defines a remote function that returns a temporal stream sink. </summary>
      <returns>The remote function that returns a temporal stream sink.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="T14">The fourteenth parameter type.</typeparam>
      <typeparam name="T15">The fifteenth parameter type.</typeparam>
      <typeparam name="T16">The sixteenth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineStreamableSink``2(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,Microsoft.ComplexEventProcessing.Linq.IStreamableSink{``1}}})">
      <summary> Defines a remote function that returns a temporal stream sink. </summary>
      <returns>The remote function that returns a temporal stream sink.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineStreamableSink``3(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,Microsoft.ComplexEventProcessing.Linq.IStreamableSink{``2}}})">
      <summary> Defines a remote function that returns a temporal stream sink. </summary>
      <returns>The remote function that returns a temporal stream sink.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineStreamableSink``4(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,Microsoft.ComplexEventProcessing.Linq.IStreamableSink{``3}}})">
      <summary> Defines a remote function that returns a temporal stream sink. </summary>
      <returns>The remote function that returns a temporal stream sink.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineStreamableSink``5(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,Microsoft.ComplexEventProcessing.Linq.IStreamableSink{``4}}})">
      <summary> Defines a remote function that returns a temporal stream sink. </summary>
      <returns>The remote function that returns a temporal stream sink.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineStreamableSink``6(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,Microsoft.ComplexEventProcessing.Linq.IStreamableSink{``5}}})">
      <summary> Defines a remote function that returns a temporal stream sink. </summary>
      <returns>The remote function that returns a temporal stream sink.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineStreamableSink``7(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,Microsoft.ComplexEventProcessing.Linq.IStreamableSink{``6}}})">
      <summary> Defines a remote function that returns a temporal stream sink. </summary>
      <returns>The remote function that returns a temporal stream sink.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineStreamableSink``8(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,Microsoft.ComplexEventProcessing.Linq.IStreamableSink{``7}}})">
      <summary> Defines a remote function that returns a temporal stream sink. </summary>
      <returns>The remote function that returns a temporal stream sink.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineStreamableSink``9(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,Microsoft.ComplexEventProcessing.Linq.IStreamableSink{``8}}})">
      <summary> Defines a remote function that returns a temporal stream sink. </summary>
      <returns>The remote function that returns a temporal stream sink.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="definition">The function definition.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.DefineStreamableSink``1(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.Type,System.Object,Microsoft.ComplexEventProcessing.EventShape,Microsoft.ComplexEventProcessing.StreamEventOrder)">
      <summary> Define a remote temporal stream sink. </summary>
      <returns>The remote temporal stream sink.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="adapterFactoryType">The adapter factory type.</param>
      <param name="configInfo">The adapter configuration.</param>
      <param name="eventShape">The event shape.</param>
      <param name="streamEventOrder">The stream event order.</param>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``1(Microsoft.ComplexEventProcessing.Linq.IQStreamable{``0},System.String)">
      <summary> Deploys a remote temporal stream. </summary>
      <returns>The remote temporal stream.</returns>
      <param name="definition">The remote temporal stream.</param>
      <param name="id">The temporal stream ID.</param>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``1(Microsoft.ComplexEventProcessing.Linq.IRemoteObserver{``0},System.String)">
      <summary> Deploys a remote observer. </summary>
      <returns>The remote observer.</returns>
      <param name="definition">The remote observer.</param>
      <param name="id">The observer identifier.</param>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``1(Microsoft.ComplexEventProcessing.Linq.IRemoteStreamableSink{``0},System.String)">
      <summary> Deploys a remote temporal stream sink. </summary>
      <returns>The remote temporal stream sink.</returns>
      <param name="definition">The remote sink definition.</param>
      <param name="id">The sink identifier.</param>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,Microsoft.ComplexEventProcessing.Linq.IQStreamable{``9}},System.String)">
      <summary> Deploys a remote function that returns a temporal stream. </summary>
      <returns>The remote function that returns a temporal stream.</returns>
      <param name="definition">The remote temporal stream function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,Microsoft.ComplexEventProcessing.Linq.IRemoteObserver{``9}},System.String)">
      <summary> Deploys a remote function that returns a observer. </summary>
      <returns>The remote observer function.</returns>
      <param name="definition">The remote observer function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,Microsoft.ComplexEventProcessing.Linq.IRemoteStreamableSink{``9}},System.String)">
      <summary> Deploys a remote function that returns a temporal stream sink. </summary>
      <returns>The remote function that returns a temporal stream sink.</returns>
      <param name="definition">The remote function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Linq.IQueryable{``9}},System.String)">
      <summary> Deploys a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="definition">The remote sequence function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Reactive.Linq.IQbservable{``9}},System.String)">
      <summary> Deploys a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="definition">The remote sequence function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,Microsoft.ComplexEventProcessing.Linq.IQStreamable{``10}},System.String)">
      <summary> Deploys a remote function that returns a temporal stream. </summary>
      <returns>The remote function that returns a temporal stream.</returns>
      <param name="definition">The remote temporal stream function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,Microsoft.ComplexEventProcessing.Linq.IRemoteObserver{``10}},System.String)">
      <summary> Deploys a remote function that returns a observer. </summary>
      <returns>The remote observer function.</returns>
      <param name="definition">The remote observer function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,Microsoft.ComplexEventProcessing.Linq.IRemoteStreamableSink{``10}},System.String)">
      <summary> Deploys a remote function that returns a temporal stream sink. </summary>
      <returns>The remote function that returns a temporal stream sink.</returns>
      <param name="definition">The remote function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Linq.IQueryable{``10}},System.String)">
      <summary> Deploys a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="definition">The remote sequence function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Reactive.Linq.IQbservable{``10}},System.String)">
      <summary> Deploys a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="definition">The remote sequence function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,Microsoft.ComplexEventProcessing.Linq.IQStreamable{``11}},System.String)">
      <summary> Deploys a remote function that returns a temporal stream. </summary>
      <returns>The remote function that returns a temporal stream.</returns>
      <param name="definition">The remote temporal stream function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,Microsoft.ComplexEventProcessing.Linq.IRemoteObserver{``11}},System.String)">
      <summary> Deploys a remote function that returns a observer. </summary>
      <returns>The remote observer function.</returns>
      <param name="definition">The remote observer function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,Microsoft.ComplexEventProcessing.Linq.IRemoteStreamableSink{``11}},System.String)">
      <summary> Deploys a remote function that returns a temporal stream sink. </summary>
      <returns>The remote function that returns a temporal stream sink.</returns>
      <param name="definition">The remote function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Linq.IQueryable{``11}},System.String)">
      <summary> Deploys a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="definition">The remote sequence function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Reactive.Linq.IQbservable{``11}},System.String)">
      <summary> Deploys a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="definition">The remote sequence function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,Microsoft.ComplexEventProcessing.Linq.IQStreamable{``12}},System.String)">
      <summary> Deploys a remote function that returns a temporal stream. </summary>
      <returns>The remote function that returns a temporal stream.</returns>
      <param name="definition">The remote temporal stream function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,Microsoft.ComplexEventProcessing.Linq.IRemoteObserver{``12}},System.String)">
      <summary> Deploys a remote function that returns a observer. </summary>
      <returns>The remote observer function.</returns>
      <param name="definition">The remote observer function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,Microsoft.ComplexEventProcessing.Linq.IRemoteStreamableSink{``12}},System.String)">
      <summary> Deploys a remote function that returns a temporal stream sink. </summary>
      <returns>The remote function that returns a temporal stream sink.</returns>
      <param name="definition">The remote function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Linq.IQueryable{``12}},System.String)">
      <summary> Deploys a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="definition">The remote sequence function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Reactive.Linq.IQbservable{``12}},System.String)">
      <summary> Deploys a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="definition">The remote sequence function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,Microsoft.ComplexEventProcessing.Linq.IQStreamable{``13}},System.String)">
      <summary> Deploys a remote function that returns a temporal stream. </summary>
      <returns>The remote function that returns a temporal stream.</returns>
      <param name="definition">The remote temporal stream function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,Microsoft.ComplexEventProcessing.Linq.IRemoteObserver{``13}},System.String)">
      <summary> Deploys a remote function that returns a observer. </summary>
      <returns>The remote observer function.</returns>
      <param name="definition">The remote observer function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,Microsoft.ComplexEventProcessing.Linq.IRemoteStreamableSink{``13}},System.String)">
      <summary> Deploys a remote function that returns a temporal stream sink. </summary>
      <returns>The remote function that returns a temporal stream sink.</returns>
      <param name="definition">The remote function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Linq.IQueryable{``13}},System.String)">
      <summary> Deploys a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="definition">The remote sequence function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Reactive.Linq.IQbservable{``13}},System.String)">
      <summary> Deploys a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="definition">The remote sequence function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,Microsoft.ComplexEventProcessing.Linq.IQStreamable{``14}},System.String)">
      <summary> Deploys a remote function that returns a temporal stream. </summary>
      <returns>The remote function that returns a temporal stream.</returns>
      <param name="definition">The remote temporal stream function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="T14">The fourteenth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,Microsoft.ComplexEventProcessing.Linq.IRemoteObserver{``14}},System.String)">
      <summary> Deploys a remote function that returns a observer. </summary>
      <returns>The remote observer function.</returns>
      <param name="definition">The remote observer function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="T14">The fourteenth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,Microsoft.ComplexEventProcessing.Linq.IRemoteStreamableSink{``14}},System.String)">
      <summary> Deploys a remote function that returns a temporal stream sink. </summary>
      <returns>The remote function that returns a temporal stream sink.</returns>
      <param name="definition">The remote function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="T14">The fourteenth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Linq.IQueryable{``14}},System.String)">
      <summary> Deploys a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="definition">The remote sequence function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="T14">The fourteenth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Reactive.Linq.IQbservable{``14}},System.String)">
      <summary> Deploys a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="definition">The remote sequence function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="T14">The fourteenth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,Microsoft.ComplexEventProcessing.Linq.IQStreamable{``15}},System.String)">
      <summary> Deploys a remote function that returns a temporal stream. </summary>
      <returns>The remote function that returns a temporal stream.</returns>
      <param name="definition">The remote temporal stream function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="T14">The fourteenth parameter type.</typeparam>
      <typeparam name="T15">The fifteenth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,Microsoft.ComplexEventProcessing.Linq.IRemoteObserver{``15}},System.String)">
      <summary> Deploys a remote function that returns a observer. </summary>
      <returns>The remote observer function.</returns>
      <param name="definition">The remote observer function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="T14">The fourteenth parameter type.</typeparam>
      <typeparam name="T15">The fifteenth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,Microsoft.ComplexEventProcessing.Linq.IRemoteStreamableSink{``15}},System.String)">
      <summary> Deploys a remote function that returns a temporal stream sink. </summary>
      <returns>The remote function that returns a temporal stream sink.</returns>
      <param name="definition">The remote function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="T14">The fourteenth parameter type.</typeparam>
      <typeparam name="T15">The fifteenth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Linq.IQueryable{``15}},System.String)">
      <summary> Deploys a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="definition">The remote sequence function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="T14">The fourteenth parameter type.</typeparam>
      <typeparam name="T15">The fifteenth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Reactive.Linq.IQbservable{``15}},System.String)">
      <summary> Deploys a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="definition">The remote sequence function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="T14">The fourteenth parameter type.</typeparam>
      <typeparam name="T15">The fifteenth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,Microsoft.ComplexEventProcessing.Linq.IQStreamable{``16}},System.String)">
      <summary> Deploys a remote function that returns a temporal stream. </summary>
      <returns>The remote function that returns a temporal stream.</returns>
      <param name="definition">The remote temporal stream function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="T14">The fourteenth parameter type.</typeparam>
      <typeparam name="T15">The fifteenth parameter type.</typeparam>
      <typeparam name="T16">The sixteenth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,Microsoft.ComplexEventProcessing.Linq.IRemoteObserver{``16}},System.String)">
      <summary> Deploys a remote function that returns a observer. </summary>
      <returns>The remote observer function.</returns>
      <param name="definition">The remote observer function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="T14">The fourteenth parameter type.</typeparam>
      <typeparam name="T15">The fifteenth parameter type.</typeparam>
      <typeparam name="T16">The sixteenth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,Microsoft.ComplexEventProcessing.Linq.IRemoteStreamableSink{``16}},System.String)">
      <summary> Deploys a remote function that returns a temporal stream sink. </summary>
      <returns>The remote function that returns a temporal stream sink.</returns>
      <param name="definition">The remote function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="T14">The fourteenth parameter type.</typeparam>
      <typeparam name="T15">The fifteenth parameter type.</typeparam>
      <typeparam name="T16">The sixteenth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Linq.IQueryable{``16}},System.String)">
      <summary> Deploys a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="definition">The remote sequence function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="T14">The fourteenth parameter type.</typeparam>
      <typeparam name="T15">The fifteenth parameter type.</typeparam>
      <typeparam name="T16">The sixteenth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Reactive.Linq.IQbservable{``16}},System.String)">
      <summary> Deploys a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="definition">The remote sequence function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="T14">The fourteenth parameter type.</typeparam>
      <typeparam name="T15">The fifteenth parameter type.</typeparam>
      <typeparam name="T16">The sixteenth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``2(System.Func{``0,Microsoft.ComplexEventProcessing.Linq.IQStreamable{``1}},System.String)">
      <summary> Deploys a remote function that returns a temporal stream. </summary>
      <returns>The remote function that returns a temporal stream.</returns>
      <param name="definition">The remote temporal stream function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``2(System.Func{``0,Microsoft.ComplexEventProcessing.Linq.IRemoteObserver{``1}},System.String)">
      <summary> Deploys a remote function that returns a observer. </summary>
      <returns>The remote observer function.</returns>
      <param name="definition">The remote observer function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``2(System.Func{``0,Microsoft.ComplexEventProcessing.Linq.IRemoteStreamableSink{``1}},System.String)">
      <summary> Deploys a remote function that returns a temporal stream sink. </summary>
      <returns>The remote function that returns a temporal stream sink.</returns>
      <param name="definition">The remote function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``2(System.Func{``0,System.Linq.IQueryable{``1}},System.String)">
      <summary> Deploys a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="definition">The remote sequence function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``2(System.Func{``0,System.Reactive.Linq.IQbservable{``1}},System.String)">
      <summary> Deploys a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="definition">The remote sequence function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``3(System.Func{``0,``1,Microsoft.ComplexEventProcessing.Linq.IQStreamable{``2}},System.String)">
      <summary> Deploys a remote function that returns a temporal stream. </summary>
      <returns>The remote function that returns a temporal stream.</returns>
      <param name="definition">The remote temporal stream function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``3(System.Func{``0,``1,Microsoft.ComplexEventProcessing.Linq.IRemoteObserver{``2}},System.String)">
      <summary> Deploys a remote function that returns a observer. </summary>
      <returns>The remote observer function.</returns>
      <param name="definition">The remote observer function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``3(System.Func{``0,``1,Microsoft.ComplexEventProcessing.Linq.IRemoteStreamableSink{``2}},System.String)">
      <summary> Deploys a remote function that returns a temporal stream sink. </summary>
      <returns>The remote function that returns a temporal stream sink.</returns>
      <param name="definition">The remote function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``3(System.Func{``0,``1,System.Linq.IQueryable{``2}},System.String)">
      <summary> Deploys a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="definition">The remote sequence function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``3(System.Func{``0,``1,System.Reactive.Linq.IQbservable{``2}},System.String)">
      <summary> Deploys a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="definition">The remote sequence function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``4(System.Func{``0,``1,``2,Microsoft.ComplexEventProcessing.Linq.IQStreamable{``3}},System.String)">
      <summary> Deploys a remote function that returns a temporal stream. </summary>
      <returns>The remote function that returns a temporal stream.</returns>
      <param name="definition">The remote temporal stream function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``4(System.Func{``0,``1,``2,Microsoft.ComplexEventProcessing.Linq.IRemoteObserver{``3}},System.String)">
      <summary> Deploys a remote function that returns a observer. </summary>
      <returns>The remote observer function.</returns>
      <param name="definition">The remote observer function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``4(System.Func{``0,``1,``2,Microsoft.ComplexEventProcessing.Linq.IRemoteStreamableSink{``3}},System.String)">
      <summary> Deploys a remote function that returns a temporal stream sink. </summary>
      <returns>The remote function that returns a temporal stream sink.</returns>
      <param name="definition">The remote function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``4(System.Func{``0,``1,``2,System.Linq.IQueryable{``3}},System.String)">
      <summary> Deploys a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="definition">The remote sequence function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``4(System.Func{``0,``1,``2,System.Reactive.Linq.IQbservable{``3}},System.String)">
      <summary> Deploys a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="definition">The remote sequence function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``5(System.Func{``0,``1,``2,``3,Microsoft.ComplexEventProcessing.Linq.IQStreamable{``4}},System.String)">
      <summary> Deploys a remote function that returns a temporal stream. </summary>
      <returns>The remote function that returns a temporal stream.</returns>
      <param name="definition">The remote temporal stream function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``5(System.Func{``0,``1,``2,``3,Microsoft.ComplexEventProcessing.Linq.IRemoteObserver{``4}},System.String)">
      <summary> Deploys a remote function that returns a observer. </summary>
      <returns>The remote observer function.</returns>
      <param name="definition">The remote observer function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``5(System.Func{``0,``1,``2,``3,Microsoft.ComplexEventProcessing.Linq.IRemoteStreamableSink{``4}},System.String)">
      <summary> Deploys a remote function that returns a temporal stream sink. </summary>
      <returns>The remote function that returns a temporal stream sink.</returns>
      <param name="definition">The remote function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``5(System.Func{``0,``1,``2,``3,System.Linq.IQueryable{``4}},System.String)">
      <summary> Deploys a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="definition">The remote sequence function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``5(System.Func{``0,``1,``2,``3,System.Reactive.Linq.IQbservable{``4}},System.String)">
      <summary> Deploys a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="definition">The remote sequence function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``6(System.Func{``0,``1,``2,``3,``4,Microsoft.ComplexEventProcessing.Linq.IQStreamable{``5}},System.String)">
      <summary> Deploys a remote function that returns a temporal stream. </summary>
      <returns>The remote function that returns a temporal stream.</returns>
      <param name="definition">The remote temporal stream function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``6(System.Func{``0,``1,``2,``3,``4,Microsoft.ComplexEventProcessing.Linq.IRemoteObserver{``5}},System.String)">
      <summary> Deploys a remote function that returns a observer. </summary>
      <returns>The remote observer function.</returns>
      <param name="definition">The remote observer function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``6(System.Func{``0,``1,``2,``3,``4,Microsoft.ComplexEventProcessing.Linq.IRemoteStreamableSink{``5}},System.String)">
      <summary> Deploys a remote function that returns a temporal stream sink. </summary>
      <returns>The remote function that returns a temporal stream sink.</returns>
      <param name="definition">The remote function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``6(System.Func{``0,``1,``2,``3,``4,System.Linq.IQueryable{``5}},System.String)">
      <summary> Deploys a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="definition">The remote sequence function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``6(System.Func{``0,``1,``2,``3,``4,System.Reactive.Linq.IQbservable{``5}},System.String)">
      <summary> Deploys a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="definition">The remote sequence function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``7(System.Func{``0,``1,``2,``3,``4,``5,Microsoft.ComplexEventProcessing.Linq.IQStreamable{``6}},System.String)">
      <summary> Deploys a remote function that returns a temporal stream. </summary>
      <returns>The remote function that returns a temporal stream.</returns>
      <param name="definition">The remote temporal stream function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``7(System.Func{``0,``1,``2,``3,``4,``5,Microsoft.ComplexEventProcessing.Linq.IRemoteObserver{``6}},System.String)">
      <summary> Deploys a remote function that returns a observer. </summary>
      <returns>The remote observer function.</returns>
      <param name="definition">The remote observer function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``7(System.Func{``0,``1,``2,``3,``4,``5,Microsoft.ComplexEventProcessing.Linq.IRemoteStreamableSink{``6}},System.String)">
      <summary> Deploys a remote function that returns a temporal stream sink. </summary>
      <returns>The remote function that returns a temporal stream sink.</returns>
      <param name="definition">The remote function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``7(System.Func{``0,``1,``2,``3,``4,``5,System.Linq.IQueryable{``6}},System.String)">
      <summary> Deploys a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="definition">The remote sequence function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``7(System.Func{``0,``1,``2,``3,``4,``5,System.Reactive.Linq.IQbservable{``6}},System.String)">
      <summary> Deploys a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="definition">The remote sequence function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``8(System.Func{``0,``1,``2,``3,``4,``5,``6,Microsoft.ComplexEventProcessing.Linq.IQStreamable{``7}},System.String)">
      <summary> Deploys a remote function that returns a temporal stream. </summary>
      <returns>The remote function that returns a temporal stream.</returns>
      <param name="definition">The remote temporal stream function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``8(System.Func{``0,``1,``2,``3,``4,``5,``6,Microsoft.ComplexEventProcessing.Linq.IRemoteObserver{``7}},System.String)">
      <summary> Deploys a remote function that returns a observer. </summary>
      <returns>The remote observer function.</returns>
      <param name="definition">The remote observer function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``8(System.Func{``0,``1,``2,``3,``4,``5,``6,Microsoft.ComplexEventProcessing.Linq.IRemoteStreamableSink{``7}},System.String)">
      <summary> Deploys a remote function that returns a temporal stream sink. </summary>
      <returns>The remote function that returns a temporal stream sink.</returns>
      <param name="definition">The remote function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``8(System.Func{``0,``1,``2,``3,``4,``5,``6,System.Linq.IQueryable{``7}},System.String)">
      <summary> Deploys a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="definition">The remote sequence function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``8(System.Func{``0,``1,``2,``3,``4,``5,``6,System.Reactive.Linq.IQbservable{``7}},System.String)">
      <summary> Deploys a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="definition">The remote sequence function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,Microsoft.ComplexEventProcessing.Linq.IQStreamable{``8}},System.String)">
      <summary> Deploys a remote function that returns a temporal stream. </summary>
      <returns>The remote function that returns a temporal stream.</returns>
      <param name="definition">The remote temporal stream function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,Microsoft.ComplexEventProcessing.Linq.IRemoteObserver{``8}},System.String)">
      <summary> Deploys a remote function that returns a observer. </summary>
      <returns>The remote observer function.</returns>
      <param name="definition">The remote observer function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,Microsoft.ComplexEventProcessing.Linq.IRemoteStreamableSink{``8}},System.String)">
      <summary> Deploys a remote function that returns a temporal stream sink. </summary>
      <returns>The remote function that returns a temporal stream sink.</returns>
      <param name="definition">The remote function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Linq.IQueryable{``8}},System.String)">
      <summary> Deploys a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="definition">The remote sequence function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Reactive.Linq.IQbservable{``8}},System.String)">
      <summary> Deploys a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="definition">The remote sequence function.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``1(System.Linq.IQueryable{``0},System.String)">
      <summary> Deploys a remote sequence. </summary>
      <returns>The remote sequence.</returns>
      <param name="definition">The remote sequence.</param>
      <param name="id">The sequence identifier.</param>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Deploy``1(System.Reactive.Linq.IQbservable{``0},System.String)">
      <summary> Deploys a remote sequence. </summary>
      <returns>The remote sequence.</returns>
      <param name="definition">The remote sequence.</param>
      <param name="id">The sequence identifier.</param>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetEnumerable``11(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetEnumerable``14(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetEnumerable``16(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="T14">The fourteenth parameter type.</typeparam>
      <typeparam name="T15">The fifteenth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetEnumerable``15(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="T14">The fourteenth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetEnumerable``12(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetEnumerable``13(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetEnumerable``17(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="T14">The fourteenth parameter type.</typeparam>
      <typeparam name="T15">The fifteenth parameter type.</typeparam>
      <typeparam name="T16">The sixteenth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetEnumerable``4(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetEnumerable``8(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetEnumerable``5(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetEnumerable``6(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetEnumerable``7(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetEnumerable``9(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetEnumerable``10(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetEnumerable``2(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetEnumerable``3(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetEnumerable``1(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a sequence. </summary>
      <returns>The remote sequence.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The sequence identifier.</param>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetObservable``14(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetObservable``13(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetObservable``6(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetObservable``16(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="T14">The fourteenth parameter type.</typeparam>
      <typeparam name="T15">The fifteenth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetObservable``15(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="T14">The fourteenth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetObservable``9(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetObservable``8(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetObservable``10(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetObservable``12(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetObservable``11(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetObservable``7(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetObservable``3(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetObservable``1(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote sequence. </summary>
      <returns>The remote sequence.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The sequence identifier.</param>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetObservable``2(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetObservable``17(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="T14">The fourteenth parameter type.</typeparam>
      <typeparam name="T15">The fifteenth parameter type.</typeparam>
      <typeparam name="T16">The sixteenth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetObservable``5(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetObservable``4(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a sequence. </summary>
      <returns>The remote sequence function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetObserver``15(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a observer. </summary>
      <returns>The remote observer function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="T14">The fourteenth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetObserver``1(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote observer. </summary>
      <returns>The remote observer.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The observer identifier.</param>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetObserver``17(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a observer. </summary>
      <returns>The remote observer function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="T14">The fourteenth parameter type.</typeparam>
      <typeparam name="T15">The fifteenth parameter type.</typeparam>
      <typeparam name="T16">The sixteenth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetObserver``16(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a observer. </summary>
      <returns>The remote observer function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="T14">The fourteenth parameter type.</typeparam>
      <typeparam name="T15">The fifteenth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetObserver``7(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a observer. </summary>
      <returns>The remote observer function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetObserver``4(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a observer. </summary>
      <returns>The remote observer function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetObserver``3(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a observer. </summary>
      <returns>The remote observer function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetObserver``9(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a observer. </summary>
      <returns>The remote observer function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetObserver``6(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a observer. </summary>
      <returns>The remote observer function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetObserver``5(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a observer. </summary>
      <returns>The remote observer function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetObserver``8(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a observer. </summary>
      <returns>The remote observer function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetObserver``12(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a observer. </summary>
      <returns>The remote observer function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetObserver``13(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a observer. </summary>
      <returns>The remote observer function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetObserver``14(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a observer. </summary>
      <returns>The remote observer function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetObserver``2(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a observer. </summary>
      <returns>The remote observer function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetObserver``10(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a observer. </summary>
      <returns>The remote observer function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetObserver``11(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a observer. </summary>
      <returns>The remote observer function.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="TElement">The element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetStreamable``10(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a temporal stream. </summary>
      <returns>The remote function that returns a temporal stream.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetStreamable``11(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a temporal stream. </summary>
      <returns>The remote function that returns a temporal stream.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetStreamable``12(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a temporal stream. </summary>
      <returns>The remote function that returns a temporal stream.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetStreamable``7(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a temporal stream. </summary>
      <returns>The remote function that returns a temporal stream.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetStreamable``8(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a temporal stream. </summary>
      <returns>The remote function that returns a temporal stream.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetStreamable``9(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a temporal stream. </summary>
      <returns>The remote function that returns a temporal stream.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetStreamable``16(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a temporal stream. </summary>
      <returns>The remote function that returns a temporal stream.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="T14">The fourteenth parameter type.</typeparam>
      <typeparam name="T15">The fifteenth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetStreamable``17(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a temporal stream. </summary>
      <returns>The remote function that returns a temporal stream.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="T14">The fourteenth parameter type.</typeparam>
      <typeparam name="T15">The fifteenth parameter type.</typeparam>
      <typeparam name="T16">The sixteenth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetStreamable``1(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote temporal stream. </summary>
      <returns>The remote temporal stream.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The temporal stream ID.</param>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetStreamable``13(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a temporal stream. </summary>
      <returns>The remote function that returns a temporal stream.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetStreamable``14(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a temporal stream. </summary>
      <returns>The remote function that returns a temporal stream.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetStreamable``15(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a temporal stream. </summary>
      <returns>The remote function that returns a temporal stream.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="T14">The fourteenth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetStreamable``5(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a temporal stream. </summary>
      <returns>The remote function that returns a temporal stream.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetStreamable``6(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a temporal stream. </summary>
      <returns>The remote function that returns a temporal stream.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetStreamable``4(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a temporal stream. </summary>
      <returns>The remote function that returns a temporal stream.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetStreamable``3(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a temporal stream. </summary>
      <returns>The remote function that returns a temporal stream.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetStreamable``2(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a temporal stream. </summary>
      <returns>The remote function that returns a temporal stream.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetStreamableSink``1(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote temporal stream sink </summary>
      <returns>The remote temporal stream sink.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The sink identifier.</param>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetStreamableSink``8(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a temporal stream sink. </summary>
      <returns>The remote function that returns a temporal stream sink.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetStreamableSink``4(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a temporal stream sink. </summary>
      <returns>The remote function that returns a temporal stream sink.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetStreamableSink``17(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a temporal stream sink. </summary>
      <returns>The remote function that returns a temporal stream sink.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="T14">The fourteenth parameter type.</typeparam>
      <typeparam name="T15">The fifteenth parameter type.</typeparam>
      <typeparam name="T16">The sixteenth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetStreamableSink``7(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a temporal stream sink. </summary>
      <returns>The remote function that returns a temporal stream sink.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetStreamableSink``3(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a temporal stream sink. </summary>
      <returns>The remote function that returns a temporal stream sink.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetStreamableSink``2(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a temporal stream sink. </summary>
      <returns>The remote function that returns a temporal stream sink.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetStreamableSink``6(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a temporal stream sink. </summary>
      <returns>The remote function that returns a temporal stream sink.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetStreamableSink``5(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a temporal stream sink. </summary>
      <returns>The remote function that returns a temporal stream sink.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetStreamableSink``12(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a temporal stream sink. </summary>
      <returns>The remote function that returns a temporal stream sink.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetStreamableSink``11(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a temporal stream sink. </summary>
      <returns>The remote function that returns a temporal stream sink.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetStreamableSink``13(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a temporal stream sink. </summary>
      <returns>The remote function that returns a temporal stream sink.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetStreamableSink``15(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a temporal stream sink. </summary>
      <returns>The remote function that returns a temporal stream sink.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="T14">The fourteenth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetStreamableSink``14(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a temporal stream sink. </summary>
      <returns>The remote function that returns a temporal stream sink.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetStreamableSink``10(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a temporal stream sink. </summary>
      <returns>The remote function that returns a temporal stream sink.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetStreamableSink``9(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a temporal stream sink. </summary>
      <returns>The remote function that returns a temporal stream sink.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetStreamableSink``16(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote function that returns a temporal stream sink. </summary>
      <returns>The remote function that returns a temporal stream sink.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The function identifier.</param>
      <typeparam name="T1">The first parameter type.</typeparam>
      <typeparam name="T2">The second parameter type.</typeparam>
      <typeparam name="T3">The third parameter type.</typeparam>
      <typeparam name="T4">The fourth parameter type.</typeparam>
      <typeparam name="T5">The fifth parameter type.</typeparam>
      <typeparam name="T6">The sixth parameter type.</typeparam>
      <typeparam name="T7">The seventh parameter type.</typeparam>
      <typeparam name="T8">The eighth parameter type.</typeparam>
      <typeparam name="T9">The ninth parameter type.</typeparam>
      <typeparam name="T10">The tenth parameter type.</typeparam>
      <typeparam name="T11">The eleventh parameter type.</typeparam>
      <typeparam name="T12">The twelfth parameter type.</typeparam>
      <typeparam name="T13">The thirteenth parameter type.</typeparam>
      <typeparam name="T14">The fourteenth parameter type.</typeparam>
      <typeparam name="T15">The fifteenth parameter type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.GetSubject``2(Microsoft.ComplexEventProcessing.Linq.IRemoteProvider,System.String)">
      <summary> Retrieves a remote subject. </summary>
      <returns>The remote subject.</returns>
      <param name="provider">The remote LINQ provider.</param>
      <param name="id">The subject identifier.</param>
      <typeparam name="TSource">The input element type.</typeparam>
      <typeparam name="TResult">The output element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Multicast``1(Microsoft.ComplexEventProcessing.Linq.IQStreamable{``0},System.Linq.Expressions.Expression{System.Func{Microsoft.ComplexEventProcessing.Linq.IQStreamable{``0},Microsoft.ComplexEventProcessing.Linq.IRemoteStreamableBinding}})">
      <summary> Defines a streamable binding based given a source. </summary>
      <returns>The remote binding.</returns>
      <param name="source">The multicast source.</param>
      <param name="bindingSelector">The selector returning binding given multicasted source.</param>
      <typeparam name="TSource">The source payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Subscribe``1(System.Linq.IQueryable{``0},Microsoft.ComplexEventProcessing.Linq.IRemoteObserver{``0})">
      <summary> Subscribes an observer to an enumerable sequence with the specified source and observer. </summary>
      <returns>The disposable object that can be used to unsubscribe the observer from the enumerable.</returns>
      <param name="source">The enumerable sequence to subscribe to.</param>
      <param name="observer">The remote observer that will receive notifications from the enumerable sequence.</param>
      <typeparam name="TElement">The sequence element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.Subscribe``1(System.Linq.IQueryable{``0},Microsoft.ComplexEventProcessing.Linq.IRemoteObserver{``0},System.Reactive.Concurrency.IScheduler)">
      <summary> Subscribes an observer to an enumerable sequence with the specified source, observer and scheduler. </summary>
      <returns>The disposable object that can be used to unsubscribe the observer from the enumerable.</returns>
      <param name="source">The enumerable sequence to subscribe to.</param>
      <param name="observer">The remote observer that will receive notifications from the enumerable sequence.</param>
      <param name="scheduler">The scheduler to perform the enumeration on.</param>
      <typeparam name="TElement">The sequence element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.ToEdgeEnumerable``1(Microsoft.ComplexEventProcessing.Linq.IQStreamable{``0},Microsoft.ComplexEventProcessing.StreamEventOrder)">
      <summary> Converts temporal stream to sequence. </summary>
      <returns>The remote sequence.</returns>
      <param name="source">The remote temporal stream.</param>
      <param name="order">The event output order.</param>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.ToEdgeObservable``1(Microsoft.ComplexEventProcessing.Linq.IQStreamable{``0},Microsoft.ComplexEventProcessing.StreamEventOrder)">
      <summary> Converts temporal stream to sequence. </summary>
      <returns>The remote sequence.</returns>
      <param name="source">The remote temporal stream.</param>
      <param name="order">The event output order.</param>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.ToEdgeStreamable``2(System.Func{System.Nullable{System.DateTimeOffset},System.Linq.IQueryable{``0}},System.Linq.Expressions.Expression{System.Func{``0,Microsoft.ComplexEventProcessing.EdgeEvent{``1}}},Microsoft.ComplexEventProcessing.AdvanceTimeSettings)">
      <summary> Converts sequence parameterized on high-water mark for replay in checkpoints to temporal stream. </summary>
      <returns>The remote temporal stream.</returns>
      <param name="source">The remote function that returns a sequence given the high-water mark for the last completed checkpoint. Where no checkpoint has completed, the high-water mark value is null.</param>
      <param name="selector">The selector returning a stream event given an element of the input sequence.</param>
      <param name="advanceTimeSettings">The advance time settings applied to incoming events.</param>
      <typeparam name="TSource">The input element type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.ToEdgeStreamable``2(System.Func{System.Nullable{System.DateTimeOffset},System.Reactive.Linq.IQbservable{``0}},System.Linq.Expressions.Expression{System.Func{``0,Microsoft.ComplexEventProcessing.EdgeEvent{``1}}},Microsoft.ComplexEventProcessing.AdvanceTimeSettings)">
      <summary> Converts sequence parameterized on high-water mark for replay in checkpoints to temporal stream. </summary>
      <returns>The remote temporal stream.</returns>
      <param name="source">The remote function that returns a sequence given the high-water mark for the last completed checkpoint. Where no checkpoint has completed, the high-water mark value is null.</param>
      <param name="selector">The selector returning a stream event given an element of the input sequence.</param>
      <param name="advanceTimeSettings">The advance time settings applied to incoming events.</param>
      <typeparam name="TSource">The input element type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.ToEdgeStreamable``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,Microsoft.ComplexEventProcessing.EdgeEvent{``1}}},Microsoft.ComplexEventProcessing.AdvanceTimeSettings)">
      <summary> Converts sequence to temporal stream. </summary>
      <returns>The remote temporal stream.</returns>
      <param name="source">The remote sequence.</param>
      <param name="selector">The selector returning a stream event given an element of the input sequence.</param>
      <param name="advanceTimeSettings">The advance time settings applied to incoming events.</param>
      <typeparam name="TSource">The input element type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.ToEdgeStreamable``2(System.Reactive.Linq.IQbservable{``0},System.Linq.Expressions.Expression{System.Func{``0,Microsoft.ComplexEventProcessing.EdgeEvent{``1}}},Microsoft.ComplexEventProcessing.AdvanceTimeSettings)">
      <summary> Converts sequence to temporal stream. </summary>
      <returns>The remote temporal stream.</returns>
      <param name="source">The remote sequence.</param>
      <param name="selector">The selector returning a stream event given an element of the input sequence.</param>
      <param name="advanceTimeSettings">The advance time settings applied to incoming events.</param>
      <typeparam name="TSource">The input element type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.ToEnumerable``1(Microsoft.ComplexEventProcessing.Linq.IQStreamable{``0},Microsoft.ComplexEventProcessing.StreamEventOrder)">
      <summary> Converts temporal stream to sequence. </summary>
      <returns>The remote sequence.</returns>
      <param name="source">The remote temporal stream.</param>
      <param name="order">The event output order.</param>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.ToEnumerable``1(System.Reactive.Linq.IQbservable{``0})">
      <summary> Converts an observable sequence to an enumerable sequence. </summary>
      <returns>The enumerable sequence whose elements are pushed from the given observable sequence.</returns>
      <param name="source">The observable sequence to convert to an enumerable sequence.</param>
      <typeparam name="TElement">The sequence element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.ToIntervalEnumerable``1(Microsoft.ComplexEventProcessing.Linq.IQStreamable{``0},Microsoft.ComplexEventProcessing.StreamEventOrder)">
      <summary> Converts temporal stream to sequence. </summary>
      <returns>The remote sequence.</returns>
      <param name="source">The remote temporal stream.</param>
      <param name="order">The event output order.</param>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.ToIntervalObservable``1(Microsoft.ComplexEventProcessing.Linq.IQStreamable{``0},Microsoft.ComplexEventProcessing.StreamEventOrder)">
      <summary> Converts temporal stream to sequence. </summary>
      <returns>The remote sequence.</returns>
      <param name="source">The remote temporal stream.</param>
      <param name="order">The event output order.</param>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.ToIntervalStreamable``2(System.Func{System.Nullable{System.DateTimeOffset},System.Linq.IQueryable{``0}},System.Linq.Expressions.Expression{System.Func{``0,Microsoft.ComplexEventProcessing.IntervalEvent{``1}}},Microsoft.ComplexEventProcessing.AdvanceTimeSettings)">
      <summary> Converts sequence parameterized on high-water mark for replay in checkpoints to temporal stream. </summary>
      <returns>The remote temporal stream.</returns>
      <param name="source">The remote function that returns a sequence given the high-water mark for the last completed checkpoint. Where no checkpoint has completed, the high-water mark value is null.</param>
      <param name="selector">The selector returning a stream event given an element of the input sequence.</param>
      <param name="advanceTimeSettings">The advance time settings applied to incoming events.</param>
      <typeparam name="TSource">The input element type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.ToIntervalStreamable``2(System.Func{System.Nullable{System.DateTimeOffset},System.Reactive.Linq.IQbservable{``0}},System.Linq.Expressions.Expression{System.Func{``0,Microsoft.ComplexEventProcessing.IntervalEvent{``1}}},Microsoft.ComplexEventProcessing.AdvanceTimeSettings)">
      <summary> Converts sequence parameterized on high-water mark for replay in checkpoints to temporal stream. </summary>
      <returns>The remote temporal stream.</returns>
      <param name="source">The remote function that returns a sequence given the high-water mark for the last completed checkpoint. Where no checkpoint has completed, the high-water mark value is null.</param>
      <param name="selector">The selector returning a stream event given an element of the input sequence.</param>
      <param name="advanceTimeSettings">The advance time settings applied to incoming events.</param>
      <typeparam name="TSource">The input element type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.ToIntervalStreamable``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,Microsoft.ComplexEventProcessing.IntervalEvent{``1}}},Microsoft.ComplexEventProcessing.AdvanceTimeSettings)">
      <summary> Converts sequence to temporal stream. </summary>
      <returns>The remote temporal stream.</returns>
      <param name="source">The remote sequence.</param>
      <param name="selector">The selector returning a stream event given an element of the input sequence.</param>
      <param name="advanceTimeSettings">The advance time settings applied to incoming events.</param>
      <typeparam name="TSource">The input element type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.ToIntervalStreamable``2(System.Reactive.Linq.IQbservable{``0},System.Linq.Expressions.Expression{System.Func{``0,Microsoft.ComplexEventProcessing.IntervalEvent{``1}}},Microsoft.ComplexEventProcessing.AdvanceTimeSettings)">
      <summary> Converts sequence to temporal stream. </summary>
      <returns>The remote temporal stream.</returns>
      <param name="source">The remote sequence.</param>
      <param name="selector">The selector returning a stream event given an element of the input sequence.</param>
      <param name="advanceTimeSettings">The advance time settings applied to incoming events.</param>
      <typeparam name="TSource">The input element type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.ToObservable``1(Microsoft.ComplexEventProcessing.Linq.IQStreamable{``0},Microsoft.ComplexEventProcessing.StreamEventOrder)">
      <summary> Converts temporal stream to sequence. </summary>
      <returns>The remote sequence.</returns>
      <param name="source">The remote temporal stream.</param>
      <param name="order">The event output order.</param>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.ToObservable``1(System.Linq.IQueryable{``0})">
      <summary> Converts an enumerable sequence to an observable sequence. </summary>
      <returns>The observable sequence whose elements are pulled from the given enumerable sequence.</returns>
      <param name="source">The enumerable sequence to convert to an observable sequence.</param>
      <typeparam name="TElement">The sequence element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.ToObservable``1(System.Linq.IQueryable{``0},System.Reactive.Concurrency.IScheduler)">
      <summary> Converts an enumerable sequence to an observable sequence with a specified source and scheduler. </summary>
      <returns>The observable sequence whose elements are pulled from the given enumerable sequence.</returns>
      <param name="source">The enumerable sequence to convert to an observable sequence.</param>
      <param name="scheduler">The scheduler to run the enumeration of the input sequence on.</param>
      <typeparam name="TElement">The sequence element type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.ToPointEnumerable``1(Microsoft.ComplexEventProcessing.Linq.IQStreamable{``0},Microsoft.ComplexEventProcessing.StreamEventOrder)">
      <summary> Converts temporal stream to sequence. </summary>
      <returns>The remote sequence.</returns>
      <param name="source">The remote temporal stream.</param>
      <param name="order">The event output order.</param>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.ToPointObservable``1(Microsoft.ComplexEventProcessing.Linq.IQStreamable{``0},Microsoft.ComplexEventProcessing.StreamEventOrder)">
      <summary> Converts temporal stream to sequence. </summary>
      <returns>The remote sequence.</returns>
      <param name="source">The remote temporal stream.</param>
      <param name="order">The event output order.</param>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.ToPointStreamable``2(System.Func{System.Nullable{System.DateTimeOffset},System.Linq.IQueryable{``0}},System.Linq.Expressions.Expression{System.Func{``0,Microsoft.ComplexEventProcessing.PointEvent{``1}}},Microsoft.ComplexEventProcessing.AdvanceTimeSettings)">
      <summary> Converts sequence parameterized on high-water mark for replay in checkpoints to temporal stream. </summary>
      <returns>The remote temporal stream.</returns>
      <param name="source">The remote function that returns a sequence given the high-water mark for the last completed checkpoint. Where no checkpoint has completed, the high-water mark value is null.</param>
      <param name="selector">The selector returning a stream event given an element of the input sequence.</param>
      <param name="advanceTimeSettings">The advance time settings applied to incoming events.</param>
      <typeparam name="TSource">The input element type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.ToPointStreamable``2(System.Func{System.Nullable{System.DateTimeOffset},System.Reactive.Linq.IQbservable{``0}},System.Linq.Expressions.Expression{System.Func{``0,Microsoft.ComplexEventProcessing.PointEvent{``1}}},Microsoft.ComplexEventProcessing.AdvanceTimeSettings)">
      <summary> Converts sequence parameterized on high-water mark for replay in checkpoints to temporal stream. </summary>
      <returns>The remote temporal stream.</returns>
      <param name="source">The remote function that returns a sequence given the high-water mark for the last completed checkpoint. Where no checkpoint has completed, the high-water mark value is null.</param>
      <param name="selector">The selector returning a stream event given an element of the input sequence.</param>
      <param name="advanceTimeSettings">The advance time settings applied to incoming events.</param>
      <typeparam name="TSource">The input element type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.ToPointStreamable``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,Microsoft.ComplexEventProcessing.PointEvent{``1}}},Microsoft.ComplexEventProcessing.AdvanceTimeSettings)">
      <summary> Converts sequence to temporal stream. </summary>
      <returns>The remote temporal stream.</returns>
      <param name="source">The remote sequence.</param>
      <param name="selector">The selector returning a stream event given an element of the input sequence.</param>
      <param name="advanceTimeSettings">The advance time settings applied to incoming events.</param>
      <typeparam name="TSource">The input element type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.ToPointStreamable``2(System.Reactive.Linq.IQbservable{``0},System.Linq.Expressions.Expression{System.Func{``0,Microsoft.ComplexEventProcessing.PointEvent{``1}}},Microsoft.ComplexEventProcessing.AdvanceTimeSettings)">
      <summary> Converts sequence to temporal stream. </summary>
      <returns>The remote temporal stream.</returns>
      <param name="source">The remote sequence.</param>
      <param name="selector">The selector returning a stream event given an element of the input sequence.</param>
      <param name="advanceTimeSettings">The advance time settings applied to incoming events.</param>
      <typeparam name="TSource">The input element type.</typeparam>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.ToStreamable``1(System.Func{System.Nullable{System.DateTimeOffset},System.Linq.IQueryable{Microsoft.ComplexEventProcessing.EdgeEvent{``0}}},Microsoft.ComplexEventProcessing.AdvanceTimeSettings)">
      <summary> Converts sequence parameterized on high-water mark for replay in checkpoints to temporal stream. </summary>
      <returns>The remote temporal stream.</returns>
      <param name="source">The remote function that returns a sequence given the high-water mark for the last completed checkpoint. Where no checkpoint has completed, the high-water mark value is null.</param>
      <param name="advanceTimeSettings">The advance time settings applied to incoming events.</param>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.ToStreamable``1(System.Func{System.Nullable{System.DateTimeOffset},System.Linq.IQueryable{Microsoft.ComplexEventProcessing.IntervalEvent{``0}}},Microsoft.ComplexEventProcessing.AdvanceTimeSettings)">
      <summary> Converts sequence parameterized on high-water mark for replay in checkpoints to temporal stream. </summary>
      <returns>The remote temporal stream.</returns>
      <param name="source">The remote function that returns a sequence given the high-water mark for the last completed checkpoint. Where no checkpoint has completed, the high-water mark value is null.</param>
      <param name="advanceTimeSettings">The advance time settings applied to incoming events.</param>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.ToStreamable``1(System.Func{System.Nullable{System.DateTimeOffset},System.Linq.IQueryable{Microsoft.ComplexEventProcessing.PointEvent{``0}}},Microsoft.ComplexEventProcessing.AdvanceTimeSettings)">
      <summary> Converts sequence parameterized on high-water mark for replay in checkpoints to temporal stream. </summary>
      <returns>The remote temporal stream.</returns>
      <param name="source">The remote function that returns a sequence given the high-water mark for the last completed checkpoint. Where no checkpoint has completed, the high-water mark value is null.</param>
      <param name="advanceTimeSettings">The advance time settings applied to incoming events.</param>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.ToStreamable``1(System.Func{System.Nullable{System.DateTimeOffset},System.Reactive.Linq.IQbservable{Microsoft.ComplexEventProcessing.EdgeEvent{``0}}},Microsoft.ComplexEventProcessing.AdvanceTimeSettings)">
      <summary> Converts sequence parameterized on high-water mark for replay in checkpoints to temporal stream. </summary>
      <returns>The remote temporal stream.</returns>
      <param name="source">The remote function that returns a sequence given the high-water mark for the last completed checkpoint. Where no checkpoint has completed, the high-water mark value is null.</param>
      <param name="advanceTimeSettings">The advance time settings applied to incoming events.</param>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.ToStreamable``1(System.Func{System.Nullable{System.DateTimeOffset},System.Reactive.Linq.IQbservable{Microsoft.ComplexEventProcessing.IntervalEvent{``0}}},Microsoft.ComplexEventProcessing.AdvanceTimeSettings)">
      <summary> Converts sequence parameterized on high-water mark for replay in checkpoints to temporal stream. </summary>
      <returns>The remote temporal stream.</returns>
      <param name="source">The remote function that returns a sequence given the high-water mark for the last completed checkpoint. Where no checkpoint has completed, the high-water mark value is null.</param>
      <param name="advanceTimeSettings">The advance time settings applied to incoming events.</param>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.ToStreamable``1(System.Func{System.Nullable{System.DateTimeOffset},System.Reactive.Linq.IQbservable{Microsoft.ComplexEventProcessing.PointEvent{``0}}},Microsoft.ComplexEventProcessing.AdvanceTimeSettings)">
      <summary> Converts sequence parameterized on high-water mark for replay in checkpoints to temporal stream. </summary>
      <returns>The remote temporal stream.</returns>
      <param name="source">The remote function that returns a sequence given the high-water mark for the last completed checkpoint. Where no checkpoint has completed, the high-water mark value is null.</param>
      <param name="advanceTimeSettings">The advance time settings applied to incoming events.</param>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.ToStreamable``1(System.Linq.IQueryable{Microsoft.ComplexEventProcessing.EdgeEvent{``0}},Microsoft.ComplexEventProcessing.AdvanceTimeSettings)">
      <summary> Converts sequence to temporal stream. </summary>
      <returns>The remote temporal stream.</returns>
      <param name="source">The remote sequence.</param>
      <param name="advanceTimeSettings">The advance time settings applied to incoming events.</param>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.ToStreamable``1(System.Linq.IQueryable{Microsoft.ComplexEventProcessing.IntervalEvent{``0}},Microsoft.ComplexEventProcessing.AdvanceTimeSettings)">
      <summary> Converts sequence to temporal stream. </summary>
      <returns>The remote temporal stream.</returns>
      <param name="source">The remote sequence.</param>
      <param name="advanceTimeSettings">The advance time settings applied to incoming events.</param>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.ToStreamable``1(System.Linq.IQueryable{Microsoft.ComplexEventProcessing.PointEvent{``0}},Microsoft.ComplexEventProcessing.AdvanceTimeSettings)">
      <summary> Converts sequence to temporal stream. </summary>
      <returns>The remote temporal stream.</returns>
      <param name="source">The remote sequence.</param>
      <param name="advanceTimeSettings">The advance time settings applied to incoming events.</param>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.ToStreamable``1(System.Reactive.Linq.IQbservable{Microsoft.ComplexEventProcessing.EdgeEvent{``0}},Microsoft.ComplexEventProcessing.AdvanceTimeSettings)">
      <summary> Converts sequence to temporal stream. </summary>
      <returns>The remote temporal stream.</returns>
      <param name="source">The remote sequence.</param>
      <param name="advanceTimeSettings">The advance time settings applied to incoming events.</param>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.ToStreamable``1(System.Reactive.Linq.IQbservable{Microsoft.ComplexEventProcessing.IntervalEvent{``0}},Microsoft.ComplexEventProcessing.AdvanceTimeSettings)">
      <summary> Converts sequence to temporal stream. </summary>
      <returns>The remote temporal stream.</returns>
      <param name="source">The remote sequence.</param>
      <param name="advanceTimeSettings">The advance time settings applied to incoming events.</param>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.ToStreamable``1(System.Reactive.Linq.IQbservable{Microsoft.ComplexEventProcessing.PointEvent{``0}},Microsoft.ComplexEventProcessing.AdvanceTimeSettings)">
      <summary> Converts sequence to temporal stream. </summary>
      <returns>The remote temporal stream.</returns>
      <param name="source">The remote sequence.</param>
      <param name="advanceTimeSettings">The advance time settings applied to incoming events.</param>
      <typeparam name="TPayload">The payload type.</typeparam>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.With(Microsoft.ComplexEventProcessing.Linq.IRemoteBinding,Microsoft.ComplexEventProcessing.Linq.IRemoteBinding)">
      <summary>
      Defines a binding that, when evaluated, initiates the first binding and then the second binding.
      </summary>
      <param name="first">First binding.</param>
      <param name="second">Second binding.</param>
      <returns>Composite binding.</returns>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.RemoteProvider.With(Microsoft.ComplexEventProcessing.Linq.IRemoteStreamableBinding,Microsoft.ComplexEventProcessing.Linq.IRemoteStreamableBinding)">
      <summary>
      Defines a streamable binding that, when evaluated, initiates a temporal query with outputs
      including those contained in the first and second binding arguments.
      </summary>
      <param name="first">First streamable binding.</param>
      <param name="second">Second streamable binding.</param>
      <returns>Composite streamable binding.</returns>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.SnapshotWindowOutputPolicy">
      <summary>Defines the output policies that are applicable to snapshot windows. A window output policy describes how the CEP engine modifies the timestamp of events that result from a window-based operation.</summary>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.Linq.SnapshotWindowOutputPolicy.Clip">
      <summary>Gets a snapshot window output policy instance that clips the end time of the output events to the window end.</summary>
      <returns>A snapshot window output policy instance that clips the end time of output events to the window end.</returns>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.WindowInputPolicy">
      <summary>The window input policy describes how the timestamps of events that fall into a given window are changed before processing the window operation.</summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Linq.WindowInputPolicy.#ctor(Microsoft.ComplexEventProcessing.Linq.WindowInputPolicy.ClipKind)">
      <summary>Initializes a new instance of the class.</summary>
      <param name="clipKind">Clip kind.</param>
    </member>
    <member name="P:Microsoft.ComplexEventProcessing.Linq.WindowInputPolicy.ClipToWindow">
      <summary>Gets a window input policy that clips input event start and end time to the window boundaries.</summary>
      <returns>A window input policy that clips input event start and end time to the window boundaries.</returns>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Linq.WindowInputPolicy.ClipKind">
      <summary>The kind of clip for the input events that falls into the same window.</summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.Linq.WindowInputPolicy.ClipKind.ClipToWindow">
      <summary>Clips both start and end time of the event and align it with the window.</summary>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Serialization.RemoteAnonymousTypeAttribute">
      <summary> Attribute applied to type proxies for anonymous types. </summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Serialization.RemoteAnonymousTypeAttribute.#ctor">
      <summary> Creates a new instance of RemoteAnonymousTypeAttribute. </summary>
    </member>
    <member name="T:Microsoft.ComplexEventProcessing.Serialization.RemoteProxyTypeAttribute">
      <summary>Represents an attribute applied to type proxies. </summary>
    </member>
    <member name="M:Microsoft.ComplexEventProcessing.Serialization.RemoteProxyTypeAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ComplexEventProcessing.Serialization.RemoteProxyTypeAttribute" /> class. </summary>
      <param name="fullName">The full name of the remote type.</param>
      <param name="fullAssemblyName">The full name of the assembly that contains the remote type.</param>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.Serialization.RemoteProxyTypeAttribute.FullAssemblyName">
      <summary>Specifies the full name of the assembly that contains the remote type. </summary>
    </member>
    <member name="F:Microsoft.ComplexEventProcessing.Serialization.RemoteProxyTypeAttribute.FullName">
      <summary>Specifies the full name of the remote type. </summary>
    </member>
  </members>
</doc>